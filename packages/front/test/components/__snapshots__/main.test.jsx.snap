// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`components/main renders a main in / path 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <Connect(IntlProvider)
    store={
      Object {
        "clearActions": [Function],
        "dispatch": [Function],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      }
    }
  >
    <IntlProvider
      dispatch={[Function]}
      locale="en"
      messages={
        Object {
          "Custom": "Custom",
          "Data": "Data",
          "Delete": "Delete",
          "End date": "End date",
          "Error": "Error",
          "Event stats": "Event stats",
          "Events:": "Events:",
          "Filters": "Filters",
          "Google maps": "Google maps",
          "Group by": "Group by",
          "IP address:": "IP address:",
          "IoT": "IoT",
          "Last observation:": "Last observation:",
          "Login": "Login",
          "Logout": "Logout",
          "MQTT topic:": "MQTT topic:",
          "Measurement stats": "Measurement stats",
          "Measurement type": "Measurement type",
          "Measurements:": "Measurements:",
          "Observation": "Observation",
          "Password": "Password",
          "Real time": "Real time",
          "Request failed": "Request failed",
          "Reset": "Reset",
          "Start date": "Start date",
          "Stats": "Stats",
          "Thing": "Thing",
          "Thing not found": "Thing not found",
          "Things": "Things",
          "Time": "Time",
          "Time period": "Time period",
          "Type": "Type",
          "Username": "Username",
          "avg": "Average",
          "avgByHour": "Average by hour",
          "date": "Date",
          "day": "Day",
          "door-closed": "Door closed",
          "door-opened": "Door opened",
          "en": "English",
          "es": "Spanish",
          "event": "Event",
          "hour": "Hour",
          "humidity": "Humidity",
          "humidity-indoor": "Humidity indoor",
          "humidity-outdoor": "Humidity outdoor",
          "luminosity": "Luminosity",
          "max": "Maximum",
          "maxByHour": "Maximum by hour",
          "measurement": "Mesasurement",
          "min": "Minimum",
          "minByHour": "Minimum by hour",
          "minute": "Minute",
          "month": "Month",
          "second": "Second",
          "stdDev": "Standard deviation",
          "stdDevByHour": "Standard deviation by hour",
          "temperature": "Temperature",
          "temperature-indoor": "Temperature indoor",
          "temperature-outdoor": "Temperature outdoor",
          "thing": "Thing",
          "total": "Total",
          "week": "Week",
          "year": "Year",
        }
      }
      store={
        Object {
          "clearActions": [Function],
          "dispatch": [Function],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        }
      }
      storeSubscription={
        Subscription {
          "listeners": Object {
            "clear": [Function],
            "get": [Function],
            "notify": [Function],
            "subscribe": [Function],
          },
          "onStateChange": [Function],
          "parentSub": undefined,
          "store": Object {
            "clearActions": [Function],
            "dispatch": [Function],
            "getActions": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
          },
          "unsubscribe": [Function],
        }
      }
    >
      <IntlProvider
        key="en"
        locale="en"
        messages={
          Object {
            "Custom": "Custom",
            "Data": "Data",
            "Delete": "Delete",
            "End date": "End date",
            "Error": "Error",
            "Event stats": "Event stats",
            "Events:": "Events:",
            "Filters": "Filters",
            "Google maps": "Google maps",
            "Group by": "Group by",
            "IP address:": "IP address:",
            "IoT": "IoT",
            "Last observation:": "Last observation:",
            "Login": "Login",
            "Logout": "Logout",
            "MQTT topic:": "MQTT topic:",
            "Measurement stats": "Measurement stats",
            "Measurement type": "Measurement type",
            "Measurements:": "Measurements:",
            "Observation": "Observation",
            "Password": "Password",
            "Real time": "Real time",
            "Request failed": "Request failed",
            "Reset": "Reset",
            "Start date": "Start date",
            "Stats": "Stats",
            "Thing": "Thing",
            "Thing not found": "Thing not found",
            "Things": "Things",
            "Time": "Time",
            "Time period": "Time period",
            "Type": "Type",
            "Username": "Username",
            "avg": "Average",
            "avgByHour": "Average by hour",
            "date": "Date",
            "day": "Day",
            "door-closed": "Door closed",
            "door-opened": "Door opened",
            "en": "English",
            "es": "Spanish",
            "event": "Event",
            "hour": "Hour",
            "humidity": "Humidity",
            "humidity-indoor": "Humidity indoor",
            "humidity-outdoor": "Humidity outdoor",
            "luminosity": "Luminosity",
            "max": "Maximum",
            "maxByHour": "Maximum by hour",
            "measurement": "Mesasurement",
            "min": "Minimum",
            "minByHour": "Minimum by hour",
            "minute": "Minute",
            "month": "Month",
            "second": "Second",
            "stdDev": "Standard deviation",
            "stdDevByHour": "Standard deviation by hour",
            "temperature": "Temperature",
            "temperature-indoor": "Temperature indoor",
            "temperature-outdoor": "Temperature outdoor",
            "thing": "Thing",
            "total": "Total",
            "week": "Week",
            "year": "Year",
          }
        }
      >
        <MemoryRouter
          initialEntries={
            Array [
              "/",
            ]
          }
          keyLength={0}
        >
          <Router
            history={
              Object {
                "action": "REPLACE",
                "block": [Function],
                "canGo": [Function],
                "createHref": [Function],
                "entries": Array [
                  Object {
                    "hash": "",
                    "pathname": "/things",
                    "search": "",
                    "state": undefined,
                  },
                ],
                "go": [Function],
                "goBack": [Function],
                "goForward": [Function],
                "index": 0,
                "length": 1,
                "listen": [Function],
                "location": Object {
                  "hash": "",
                  "pathname": "/things",
                  "search": "",
                  "state": undefined,
                },
                "push": [Function],
                "replace": [Function],
              }
            }
          >
            <Main>
              <div
                className="has-navbar-fixed-top"
              >
                <withRouter(Connect(Navbar))>
                  <Route>
                    <Connect(Navbar)
                      history={
                        Object {
                          "action": "REPLACE",
                          "block": [Function],
                          "canGo": [Function],
                          "createHref": [Function],
                          "entries": Array [
                            Object {
                              "hash": "",
                              "pathname": "/things",
                              "search": "",
                              "state": undefined,
                            },
                          ],
                          "go": [Function],
                          "goBack": [Function],
                          "goForward": [Function],
                          "index": 0,
                          "length": 1,
                          "listen": [Function],
                          "location": Object {
                            "hash": "",
                            "pathname": "/things",
                            "search": "",
                            "state": undefined,
                          },
                          "push": [Function],
                          "replace": [Function],
                        }
                      }
                      location={
                        Object {
                          "hash": "",
                          "pathname": "/things",
                          "search": "",
                          "state": undefined,
                        }
                      }
                      match={
                        Object {
                          "isExact": false,
                          "params": Object {},
                          "path": "/",
                          "url": "/",
                        }
                      }
                    >
                      <Navbar
                        history={
                          Object {
                            "action": "REPLACE",
                            "block": [Function],
                            "canGo": [Function],
                            "createHref": [Function],
                            "entries": Array [
                              Object {
                                "hash": "",
                                "pathname": "/things",
                                "search": "",
                                "state": undefined,
                              },
                            ],
                            "go": [Function],
                            "goBack": [Function],
                            "goForward": [Function],
                            "index": 0,
                            "length": 1,
                            "listen": [Function],
                            "location": Object {
                              "hash": "",
                              "pathname": "/things",
                              "search": "",
                              "state": undefined,
                            },
                            "push": [Function],
                            "replace": [Function],
                          }
                        }
                        isHamburgerMenuExpanded={false}
                        location={
                          Object {
                            "hash": "",
                            "pathname": "/things",
                            "search": "",
                            "state": undefined,
                          }
                        }
                        logout={[Function]}
                        match={
                          Object {
                            "isExact": false,
                            "params": Object {},
                            "path": "/",
                            "url": "/",
                          }
                        }
                        toggleHamburgerMenu={[Function]}
                      >
                        <nav
                          className="navbar has-shadow is-spaced"
                        >
                          <div
                            className="navbar-brand"
                          >
                            <NavLink
                              activeClassName="active"
                              aria-current="page"
                              className="navbar-item"
                              to="/"
                            >
                              <Route
                                path="\\\\/"
                              >
                                <Link
                                  aria-current="page"
                                  className="navbar-item active"
                                  replace={false}
                                  style={Object {}}
                                  to="/"
                                >
                                  <a
                                    aria-current="page"
                                    className="navbar-item active"
                                    href="/"
                                    onClick={[Function]}
                                    style={Object {}}
                                  >
                                    <FormattedMessage
                                      id="IoT"
                                      values={Object {}}
                                    >
                                      <h1
                                        className="title"
                                      >
                                        IoT
                                      </h1>
                                    </FormattedMessage>
                                  </a>
                                </Link>
                              </Route>
                            </NavLink>
                            <div
                              className="navbar-burger burger"
                              data-target="navbar-menu"
                              onClick={[Function]}
                              onKeyPress={[Function]}
                              role="button"
                              tabIndex={0}
                            >
                              <span />
                              <span />
                              <span />
                            </div>
                          </div>
                          <div
                            className="navbar-menu"
                            id="navbar-menu"
                          >
                            <div
                              className="navbar-start"
                            >
                              <NavLink
                                activeClassName="navbar-item-active"
                                aria-current="page"
                                className="navbar-item"
                                to="/things"
                              >
                                <Route
                                  path="\\\\/things"
                                >
                                  <Link
                                    aria-current="page"
                                    className="navbar-item navbar-item-active"
                                    replace={false}
                                    style={Object {}}
                                    to="/things"
                                  >
                                    <a
                                      aria-current="page"
                                      className="navbar-item navbar-item-active"
                                      href="/things"
                                      onClick={[Function]}
                                      style={Object {}}
                                    >
                                      <span
                                        className="icon"
                                      >
                                        <i
                                          className="fas fa-microchip"
                                        />
                                      </span>
                                      <FormattedMessage
                                        id="Things"
                                        values={Object {}}
                                      >
                                        <span>
                                          Things
                                        </span>
                                      </FormattedMessage>
                                    </a>
                                  </Link>
                                </Route>
                              </NavLink>
                              <NavLink
                                activeClassName="navbar-item-active"
                                aria-current="page"
                                className="navbar-item"
                                to="/stats"
                              >
                                <Route
                                  path="\\\\/stats"
                                >
                                  <Link
                                    aria-current={null}
                                    className="navbar-item"
                                    replace={false}
                                    to="/stats"
                                  >
                                    <a
                                      aria-current={null}
                                      className="navbar-item"
                                      href="/stats"
                                      onClick={[Function]}
                                    >
                                      <span
                                        className="icon"
                                      >
                                        <i
                                          className="fas fa-chart-bar"
                                        />
                                      </span>
                                      <FormattedMessage
                                        id="Stats"
                                        values={Object {}}
                                      >
                                        <span>
                                          Stats
                                        </span>
                                      </FormattedMessage>
                                    </a>
                                  </Link>
                                </Route>
                              </NavLink>
                              <NavLink
                                activeClassName="navbar-item-active"
                                aria-current="page"
                                className="navbar-item"
                                to="/data"
                              >
                                <Route
                                  path="\\\\/data"
                                >
                                  <Link
                                    aria-current={null}
                                    className="navbar-item"
                                    replace={false}
                                    to="/data"
                                  >
                                    <a
                                      aria-current={null}
                                      className="navbar-item"
                                      href="/data"
                                      onClick={[Function]}
                                    >
                                      <span
                                        className="icon"
                                      >
                                        <i
                                          className="fas fa-database"
                                        />
                                      </span>
                                      <FormattedMessage
                                        id="Data"
                                        values={Object {}}
                                      >
                                        <span>
                                          Data
                                        </span>
                                      </FormattedMessage>
                                    </a>
                                  </Link>
                                </Route>
                              </NavLink>
                              <NavLink
                                activeClassName="navbar-item-active"
                                aria-current="page"
                                className="navbar-item"
                                to="/real-time"
                              >
                                <Route
                                  path="\\\\/real-time"
                                >
                                  <Link
                                    aria-current={null}
                                    className="navbar-item"
                                    replace={false}
                                    to="/real-time"
                                  >
                                    <a
                                      aria-current={null}
                                      className="navbar-item"
                                      href="/real-time"
                                      onClick={[Function]}
                                    >
                                      <span
                                        className="icon"
                                      >
                                        <i
                                          className="fas fa-clock"
                                        />
                                      </span>
                                      <FormattedMessage
                                        id="Real time"
                                        values={Object {}}
                                      >
                                        <span>
                                          Real time
                                        </span>
                                      </FormattedMessage>
                                    </a>
                                  </Link>
                                </Route>
                              </NavLink>
                            </div>
                            <div
                              className="navbar-end"
                            >
                              <Connect(LanguageSelector)>
                                <LanguageSelector
                                  languages={
                                    Array [
                                      "en",
                                      "es",
                                    ]
                                  }
                                  selectedLanguage="en"
                                  updateLanguage={[Function]}
                                >
                                  <div
                                    className="navbar-item has-dropdown is-hoverable"
                                  >
                                    <button
                                      className="navbar-link button is-white"
                                    >
                                      <LanguageItem
                                        language="en"
                                      >
                                        <span
                                          className="icon is-medium"
                                        >
                                          <i
                                            className="flag-icon flag-icon-gb"
                                          />
                                        </span>
                                        <FormattedMessage
                                          id="en"
                                          values={Object {}}
                                        >
                                          <span>
                                            English
                                          </span>
                                        </FormattedMessage>
                                      </LanguageItem>
                                    </button>
                                    <div
                                      className="navbar-dropdown"
                                    >
                                      <button
                                        className="navbar-item button is-white"
                                        key="es"
                                        onClick={[Function]}
                                      >
                                        <LanguageItem
                                          language="es"
                                        >
                                          <span
                                            className="icon is-medium"
                                          >
                                            <i
                                              className="flag-icon flag-icon-es"
                                            />
                                          </span>
                                          <FormattedMessage
                                            id="es"
                                            values={Object {}}
                                          >
                                            <span>
                                              Spanish
                                            </span>
                                          </FormattedMessage>
                                        </LanguageItem>
                                      </button>
                                    </div>
                                  </div>
                                </LanguageSelector>
                              </Connect(LanguageSelector)>
                              <div
                                className="navbar-item"
                              >
                                <div
                                  className="field"
                                >
                                  <p
                                    className="control"
                                  >
                                    <button
                                      className="button is-primary"
                                      id="logout-button"
                                      onClick={[Function]}
                                    >
                                      <span
                                        className="icon"
                                      >
                                        <i
                                          className="fa fa-user"
                                        />
                                      </span>
                                      <FormattedMessage
                                        id="Logout"
                                        values={Object {}}
                                      >
                                        <span>
                                          Logout
                                        </span>
                                      </FormattedMessage>
                                    </button>
                                  </p>
                                </div>
                              </div>
                            </div>
                          </div>
                        </nav>
                      </Navbar>
                    </Connect(Navbar)>
                  </Route>
                </withRouter(Connect(Navbar))>
                <main>
                  <Switch>
                    <Route
                      component={[Function]}
                      computedMatch={
                        Object {
                          "isExact": true,
                          "params": Object {},
                          "path": "/things",
                          "url": "/things",
                        }
                      }
                      location={
                        Object {
                          "hash": "",
                          "pathname": "/things",
                          "search": "",
                          "state": undefined,
                        }
                      }
                      path="/things"
                    >
                      <Connect(withRouter(Connect(ResetOnUnmount)))
                        history={
                          Object {
                            "action": "REPLACE",
                            "block": [Function],
                            "canGo": [Function],
                            "createHref": [Function],
                            "entries": Array [
                              Object {
                                "hash": "",
                                "pathname": "/things",
                                "search": "",
                                "state": undefined,
                              },
                            ],
                            "go": [Function],
                            "goBack": [Function],
                            "goForward": [Function],
                            "index": 0,
                            "length": 1,
                            "listen": [Function],
                            "location": Object {
                              "hash": "",
                              "pathname": "/things",
                              "search": "",
                              "state": undefined,
                            },
                            "push": [Function],
                            "replace": [Function],
                          }
                        }
                        location={
                          Object {
                            "hash": "",
                            "pathname": "/things",
                            "search": "",
                            "state": undefined,
                          }
                        }
                        match={
                          Object {
                            "isExact": true,
                            "params": Object {},
                            "path": "/things",
                            "url": "/things",
                          }
                        }
                      >
                        <withRouter(Connect(ResetOnUnmount))
                          getThings={[Function]}
                          history={
                            Object {
                              "action": "REPLACE",
                              "block": [Function],
                              "canGo": [Function],
                              "createHref": [Function],
                              "entries": Array [
                                Object {
                                  "hash": "",
                                  "pathname": "/things",
                                  "search": "",
                                  "state": undefined,
                                },
                              ],
                              "go": [Function],
                              "goBack": [Function],
                              "goForward": [Function],
                              "index": 0,
                              "length": 1,
                              "listen": [Function],
                              "location": Object {
                                "hash": "",
                                "pathname": "/things",
                                "search": "",
                                "state": undefined,
                              },
                              "push": [Function],
                              "replace": [Function],
                            }
                          }
                          isLoading={false}
                          location={
                            Object {
                              "hash": "",
                              "pathname": "/things",
                              "search": "",
                              "state": undefined,
                            }
                          }
                          match={
                            Object {
                              "isExact": true,
                              "params": Object {},
                              "path": "/things",
                              "url": "/things",
                            }
                          }
                          selectThing={[Function]}
                          selectedThing={null}
                          shouldShowNotFoundError={false}
                          showNotFoundError={[Function]}
                          things={Array []}
                        >
                          <Route>
                            <Connect(ResetOnUnmount)
                              getThings={[Function]}
                              history={
                                Object {
                                  "action": "REPLACE",
                                  "block": [Function],
                                  "canGo": [Function],
                                  "createHref": [Function],
                                  "entries": Array [
                                    Object {
                                      "hash": "",
                                      "pathname": "/things",
                                      "search": "",
                                      "state": undefined,
                                    },
                                  ],
                                  "go": [Function],
                                  "goBack": [Function],
                                  "goForward": [Function],
                                  "index": 0,
                                  "length": 1,
                                  "listen": [Function],
                                  "location": Object {
                                    "hash": "",
                                    "pathname": "/things",
                                    "search": "",
                                    "state": undefined,
                                  },
                                  "push": [Function],
                                  "replace": [Function],
                                }
                              }
                              isLoading={false}
                              location={
                                Object {
                                  "hash": "",
                                  "pathname": "/things",
                                  "search": "",
                                  "state": undefined,
                                }
                              }
                              match={
                                Object {
                                  "isExact": true,
                                  "params": Object {},
                                  "path": "/things",
                                  "url": "/things",
                                }
                              }
                              selectThing={[Function]}
                              selectedThing={null}
                              shouldShowNotFoundError={false}
                              showNotFoundError={[Function]}
                              things={Array []}
                            >
                              <ResetOnUnmount
                                getThings={[Function]}
                                history={
                                  Object {
                                    "action": "REPLACE",
                                    "block": [Function],
                                    "canGo": [Function],
                                    "createHref": [Function],
                                    "entries": Array [
                                      Object {
                                        "hash": "",
                                        "pathname": "/things",
                                        "search": "",
                                        "state": undefined,
                                      },
                                    ],
                                    "go": [Function],
                                    "goBack": [Function],
                                    "goForward": [Function],
                                    "index": 0,
                                    "length": 1,
                                    "listen": [Function],
                                    "location": Object {
                                      "hash": "",
                                      "pathname": "/things",
                                      "search": "",
                                      "state": undefined,
                                    },
                                    "push": [Function],
                                    "replace": [Function],
                                  }
                                }
                                isLoading={false}
                                location={
                                  Object {
                                    "hash": "",
                                    "pathname": "/things",
                                    "search": "",
                                    "state": undefined,
                                  }
                                }
                                match={
                                  Object {
                                    "isExact": true,
                                    "params": Object {},
                                    "path": "/things",
                                    "url": "/things",
                                  }
                                }
                                reset={[Function]}
                                selectThing={[Function]}
                                selectedThing={null}
                                shouldShowNotFoundError={false}
                                showNotFoundError={[Function]}
                                things={Array []}
                              >
                                <InjectIntl(Things)
                                  getThings={[Function]}
                                  history={
                                    Object {
                                      "action": "REPLACE",
                                      "block": [Function],
                                      "canGo": [Function],
                                      "createHref": [Function],
                                      "entries": Array [
                                        Object {
                                          "hash": "",
                                          "pathname": "/things",
                                          "search": "",
                                          "state": undefined,
                                        },
                                      ],
                                      "go": [Function],
                                      "goBack": [Function],
                                      "goForward": [Function],
                                      "index": 0,
                                      "length": 1,
                                      "listen": [Function],
                                      "location": Object {
                                        "hash": "",
                                        "pathname": "/things",
                                        "search": "",
                                        "state": undefined,
                                      },
                                      "push": [Function],
                                      "replace": [Function],
                                    }
                                  }
                                  isLoading={false}
                                  location={
                                    Object {
                                      "hash": "",
                                      "pathname": "/things",
                                      "search": "",
                                      "state": undefined,
                                    }
                                  }
                                  match={
                                    Object {
                                      "isExact": true,
                                      "params": Object {},
                                      "path": "/things",
                                      "url": "/things",
                                    }
                                  }
                                  reset={[Function]}
                                  selectThing={[Function]}
                                  selectedThing={null}
                                  shouldShowNotFoundError={false}
                                  showNotFoundError={[Function]}
                                  things={Array []}
                                >
                                  <Things
                                    getThings={[Function]}
                                    history={
                                      Object {
                                        "action": "REPLACE",
                                        "block": [Function],
                                        "canGo": [Function],
                                        "createHref": [Function],
                                        "entries": Array [
                                          Object {
                                            "hash": "",
                                            "pathname": "/things",
                                            "search": "",
                                            "state": undefined,
                                          },
                                        ],
                                        "go": [Function],
                                        "goBack": [Function],
                                        "goForward": [Function],
                                        "index": 0,
                                        "length": 1,
                                        "listen": [Function],
                                        "location": Object {
                                          "hash": "",
                                          "pathname": "/things",
                                          "search": "",
                                          "state": undefined,
                                        },
                                        "push": [Function],
                                        "replace": [Function],
                                      }
                                    }
                                    intl={
                                      Object {
                                        "defaultFormats": Object {},
                                        "defaultLocale": "en",
                                        "formatDate": [Function],
                                        "formatHTMLMessage": [Function],
                                        "formatMessage": [Function],
                                        "formatNumber": [Function],
                                        "formatPlural": [Function],
                                        "formatRelative": [Function],
                                        "formatTime": [Function],
                                        "formats": Object {},
                                        "formatters": Object {
                                          "getDateTimeFormat": [Function],
                                          "getMessageFormat": [Function],
                                          "getNumberFormat": [Function],
                                          "getPluralFormat": [Function],
                                          "getRelativeFormat": [Function],
                                        },
                                        "locale": "en",
                                        "messages": Object {
                                          "Custom": "Custom",
                                          "Data": "Data",
                                          "Delete": "Delete",
                                          "End date": "End date",
                                          "Error": "Error",
                                          "Event stats": "Event stats",
                                          "Events:": "Events:",
                                          "Filters": "Filters",
                                          "Google maps": "Google maps",
                                          "Group by": "Group by",
                                          "IP address:": "IP address:",
                                          "IoT": "IoT",
                                          "Last observation:": "Last observation:",
                                          "Login": "Login",
                                          "Logout": "Logout",
                                          "MQTT topic:": "MQTT topic:",
                                          "Measurement stats": "Measurement stats",
                                          "Measurement type": "Measurement type",
                                          "Measurements:": "Measurements:",
                                          "Observation": "Observation",
                                          "Password": "Password",
                                          "Real time": "Real time",
                                          "Request failed": "Request failed",
                                          "Reset": "Reset",
                                          "Start date": "Start date",
                                          "Stats": "Stats",
                                          "Thing": "Thing",
                                          "Thing not found": "Thing not found",
                                          "Things": "Things",
                                          "Time": "Time",
                                          "Time period": "Time period",
                                          "Type": "Type",
                                          "Username": "Username",
                                          "avg": "Average",
                                          "avgByHour": "Average by hour",
                                          "date": "Date",
                                          "day": "Day",
                                          "door-closed": "Door closed",
                                          "door-opened": "Door opened",
                                          "en": "English",
                                          "es": "Spanish",
                                          "event": "Event",
                                          "hour": "Hour",
                                          "humidity": "Humidity",
                                          "humidity-indoor": "Humidity indoor",
                                          "humidity-outdoor": "Humidity outdoor",
                                          "luminosity": "Luminosity",
                                          "max": "Maximum",
                                          "maxByHour": "Maximum by hour",
                                          "measurement": "Mesasurement",
                                          "min": "Minimum",
                                          "minByHour": "Minimum by hour",
                                          "minute": "Minute",
                                          "month": "Month",
                                          "second": "Second",
                                          "stdDev": "Standard deviation",
                                          "stdDevByHour": "Standard deviation by hour",
                                          "temperature": "Temperature",
                                          "temperature-indoor": "Temperature indoor",
                                          "temperature-outdoor": "Temperature outdoor",
                                          "thing": "Thing",
                                          "total": "Total",
                                          "week": "Week",
                                          "year": "Year",
                                        },
                                        "now": [Function],
                                        "onError": [Function],
                                        "textComponent": "span",
                                        "timeZone": null,
                                      }
                                    }
                                    isLoading={false}
                                    location={
                                      Object {
                                        "hash": "",
                                        "pathname": "/things",
                                        "search": "",
                                        "state": undefined,
                                      }
                                    }
                                    match={
                                      Object {
                                        "isExact": true,
                                        "params": Object {},
                                        "path": "/things",
                                        "url": "/things",
                                      }
                                    }
                                    reset={[Function]}
                                    selectThing={[Function]}
                                    selectedThing={null}
                                    shouldShowNotFoundError={false}
                                    showNotFoundError={[Function]}
                                    things={Array []}
                                  >
                                    <div>
                                      <div
                                        className="container is-fluid section"
                                      >
                                        <div
                                          className="columns"
                                        >
                                          <div
                                            className="column is-one-quarter"
                                          />
                                        </div>
                                      </div>
                                      <Modal
                                        isActive={false}
                                        messageStyle="is-danger"
                                        onCloseClick={[Function]}
                                        subTitle="Thing not found"
                                        title="Error"
                                      >
                                        <div
                                          className="modal"
                                        >
                                          <div
                                            className="modal-background"
                                            onClick={[Function]}
                                            onKeyPress={[Function]}
                                            role="button"
                                            tabIndex={0}
                                          />
                                          <div
                                            className="modal-content"
                                          >
                                            <article
                                              className="message is-medium is-danger"
                                            >
                                              <div
                                                className="message-header"
                                              >
                                                <p>
                                                  Error
                                                </p>
                                              </div>
                                              <div
                                                className="message-body has-text-centered"
                                              >
                                                Thing not found
                                              </div>
                                            </article>
                                          </div>
                                          <button
                                            aria-label="close"
                                            className="modal-close is-large"
                                            onClick={[Function]}
                                          />
                                        </div>
                                      </Modal>
                                    </div>
                                  </Things>
                                </InjectIntl(Things)>
                              </ResetOnUnmount>
                            </Connect(ResetOnUnmount)>
                          </Route>
                        </withRouter(Connect(ResetOnUnmount))>
                      </Connect(withRouter(Connect(ResetOnUnmount)))>
                    </Route>
                  </Switch>
                </main>
              </div>
            </Main>
          </Router>
        </MemoryRouter>
      </IntlProvider>
    </IntlProvider>
  </Connect(IntlProvider)>
</Provider>
`;

exports[`components/main renders a main in /foo path 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <Connect(IntlProvider)
    store={
      Object {
        "clearActions": [Function],
        "dispatch": [Function],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      }
    }
  >
    <IntlProvider
      dispatch={[Function]}
      locale="en"
      messages={
        Object {
          "Custom": "Custom",
          "Data": "Data",
          "Delete": "Delete",
          "End date": "End date",
          "Error": "Error",
          "Event stats": "Event stats",
          "Events:": "Events:",
          "Filters": "Filters",
          "Google maps": "Google maps",
          "Group by": "Group by",
          "IP address:": "IP address:",
          "IoT": "IoT",
          "Last observation:": "Last observation:",
          "Login": "Login",
          "Logout": "Logout",
          "MQTT topic:": "MQTT topic:",
          "Measurement stats": "Measurement stats",
          "Measurement type": "Measurement type",
          "Measurements:": "Measurements:",
          "Observation": "Observation",
          "Password": "Password",
          "Real time": "Real time",
          "Request failed": "Request failed",
          "Reset": "Reset",
          "Start date": "Start date",
          "Stats": "Stats",
          "Thing": "Thing",
          "Thing not found": "Thing not found",
          "Things": "Things",
          "Time": "Time",
          "Time period": "Time period",
          "Type": "Type",
          "Username": "Username",
          "avg": "Average",
          "avgByHour": "Average by hour",
          "date": "Date",
          "day": "Day",
          "door-closed": "Door closed",
          "door-opened": "Door opened",
          "en": "English",
          "es": "Spanish",
          "event": "Event",
          "hour": "Hour",
          "humidity": "Humidity",
          "humidity-indoor": "Humidity indoor",
          "humidity-outdoor": "Humidity outdoor",
          "luminosity": "Luminosity",
          "max": "Maximum",
          "maxByHour": "Maximum by hour",
          "measurement": "Mesasurement",
          "min": "Minimum",
          "minByHour": "Minimum by hour",
          "minute": "Minute",
          "month": "Month",
          "second": "Second",
          "stdDev": "Standard deviation",
          "stdDevByHour": "Standard deviation by hour",
          "temperature": "Temperature",
          "temperature-indoor": "Temperature indoor",
          "temperature-outdoor": "Temperature outdoor",
          "thing": "Thing",
          "total": "Total",
          "week": "Week",
          "year": "Year",
        }
      }
      store={
        Object {
          "clearActions": [Function],
          "dispatch": [Function],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        }
      }
      storeSubscription={
        Subscription {
          "listeners": Object {
            "clear": [Function],
            "get": [Function],
            "notify": [Function],
            "subscribe": [Function],
          },
          "onStateChange": [Function],
          "parentSub": undefined,
          "store": Object {
            "clearActions": [Function],
            "dispatch": [Function],
            "getActions": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
          },
          "unsubscribe": [Function],
        }
      }
    >
      <IntlProvider
        key="en"
        locale="en"
        messages={
          Object {
            "Custom": "Custom",
            "Data": "Data",
            "Delete": "Delete",
            "End date": "End date",
            "Error": "Error",
            "Event stats": "Event stats",
            "Events:": "Events:",
            "Filters": "Filters",
            "Google maps": "Google maps",
            "Group by": "Group by",
            "IP address:": "IP address:",
            "IoT": "IoT",
            "Last observation:": "Last observation:",
            "Login": "Login",
            "Logout": "Logout",
            "MQTT topic:": "MQTT topic:",
            "Measurement stats": "Measurement stats",
            "Measurement type": "Measurement type",
            "Measurements:": "Measurements:",
            "Observation": "Observation",
            "Password": "Password",
            "Real time": "Real time",
            "Request failed": "Request failed",
            "Reset": "Reset",
            "Start date": "Start date",
            "Stats": "Stats",
            "Thing": "Thing",
            "Thing not found": "Thing not found",
            "Things": "Things",
            "Time": "Time",
            "Time period": "Time period",
            "Type": "Type",
            "Username": "Username",
            "avg": "Average",
            "avgByHour": "Average by hour",
            "date": "Date",
            "day": "Day",
            "door-closed": "Door closed",
            "door-opened": "Door opened",
            "en": "English",
            "es": "Spanish",
            "event": "Event",
            "hour": "Hour",
            "humidity": "Humidity",
            "humidity-indoor": "Humidity indoor",
            "humidity-outdoor": "Humidity outdoor",
            "luminosity": "Luminosity",
            "max": "Maximum",
            "maxByHour": "Maximum by hour",
            "measurement": "Mesasurement",
            "min": "Minimum",
            "minByHour": "Minimum by hour",
            "minute": "Minute",
            "month": "Month",
            "second": "Second",
            "stdDev": "Standard deviation",
            "stdDevByHour": "Standard deviation by hour",
            "temperature": "Temperature",
            "temperature-indoor": "Temperature indoor",
            "temperature-outdoor": "Temperature outdoor",
            "thing": "Thing",
            "total": "Total",
            "week": "Week",
            "year": "Year",
          }
        }
      >
        <MemoryRouter
          initialEntries={
            Array [
              "/foo",
            ]
          }
          keyLength={0}
        >
          <Router
            history={
              Object {
                "action": "REPLACE",
                "block": [Function],
                "canGo": [Function],
                "createHref": [Function],
                "entries": Array [
                  Object {
                    "hash": "",
                    "pathname": "/things",
                    "search": "",
                    "state": undefined,
                  },
                ],
                "go": [Function],
                "goBack": [Function],
                "goForward": [Function],
                "index": 0,
                "length": 1,
                "listen": [Function],
                "location": Object {
                  "hash": "",
                  "pathname": "/things",
                  "search": "",
                  "state": undefined,
                },
                "push": [Function],
                "replace": [Function],
              }
            }
          >
            <Main>
              <div
                className="has-navbar-fixed-top"
              >
                <withRouter(Connect(Navbar))>
                  <Route>
                    <Connect(Navbar)
                      history={
                        Object {
                          "action": "REPLACE",
                          "block": [Function],
                          "canGo": [Function],
                          "createHref": [Function],
                          "entries": Array [
                            Object {
                              "hash": "",
                              "pathname": "/things",
                              "search": "",
                              "state": undefined,
                            },
                          ],
                          "go": [Function],
                          "goBack": [Function],
                          "goForward": [Function],
                          "index": 0,
                          "length": 1,
                          "listen": [Function],
                          "location": Object {
                            "hash": "",
                            "pathname": "/things",
                            "search": "",
                            "state": undefined,
                          },
                          "push": [Function],
                          "replace": [Function],
                        }
                      }
                      location={
                        Object {
                          "hash": "",
                          "pathname": "/things",
                          "search": "",
                          "state": undefined,
                        }
                      }
                      match={
                        Object {
                          "isExact": false,
                          "params": Object {},
                          "path": "/",
                          "url": "/",
                        }
                      }
                    >
                      <Navbar
                        history={
                          Object {
                            "action": "REPLACE",
                            "block": [Function],
                            "canGo": [Function],
                            "createHref": [Function],
                            "entries": Array [
                              Object {
                                "hash": "",
                                "pathname": "/things",
                                "search": "",
                                "state": undefined,
                              },
                            ],
                            "go": [Function],
                            "goBack": [Function],
                            "goForward": [Function],
                            "index": 0,
                            "length": 1,
                            "listen": [Function],
                            "location": Object {
                              "hash": "",
                              "pathname": "/things",
                              "search": "",
                              "state": undefined,
                            },
                            "push": [Function],
                            "replace": [Function],
                          }
                        }
                        isHamburgerMenuExpanded={false}
                        location={
                          Object {
                            "hash": "",
                            "pathname": "/things",
                            "search": "",
                            "state": undefined,
                          }
                        }
                        logout={[Function]}
                        match={
                          Object {
                            "isExact": false,
                            "params": Object {},
                            "path": "/",
                            "url": "/",
                          }
                        }
                        toggleHamburgerMenu={[Function]}
                      >
                        <nav
                          className="navbar has-shadow is-spaced"
                        >
                          <div
                            className="navbar-brand"
                          >
                            <NavLink
                              activeClassName="active"
                              aria-current="page"
                              className="navbar-item"
                              to="/"
                            >
                              <Route
                                path="\\\\/"
                              >
                                <Link
                                  aria-current="page"
                                  className="navbar-item active"
                                  replace={false}
                                  style={Object {}}
                                  to="/"
                                >
                                  <a
                                    aria-current="page"
                                    className="navbar-item active"
                                    href="/"
                                    onClick={[Function]}
                                    style={Object {}}
                                  >
                                    <FormattedMessage
                                      id="IoT"
                                      values={Object {}}
                                    >
                                      <h1
                                        className="title"
                                      >
                                        IoT
                                      </h1>
                                    </FormattedMessage>
                                  </a>
                                </Link>
                              </Route>
                            </NavLink>
                            <div
                              className="navbar-burger burger"
                              data-target="navbar-menu"
                              onClick={[Function]}
                              onKeyPress={[Function]}
                              role="button"
                              tabIndex={0}
                            >
                              <span />
                              <span />
                              <span />
                            </div>
                          </div>
                          <div
                            className="navbar-menu"
                            id="navbar-menu"
                          >
                            <div
                              className="navbar-start"
                            >
                              <NavLink
                                activeClassName="navbar-item-active"
                                aria-current="page"
                                className="navbar-item"
                                to="/things"
                              >
                                <Route
                                  path="\\\\/things"
                                >
                                  <Link
                                    aria-current="page"
                                    className="navbar-item navbar-item-active"
                                    replace={false}
                                    style={Object {}}
                                    to="/things"
                                  >
                                    <a
                                      aria-current="page"
                                      className="navbar-item navbar-item-active"
                                      href="/things"
                                      onClick={[Function]}
                                      style={Object {}}
                                    >
                                      <span
                                        className="icon"
                                      >
                                        <i
                                          className="fas fa-microchip"
                                        />
                                      </span>
                                      <FormattedMessage
                                        id="Things"
                                        values={Object {}}
                                      >
                                        <span>
                                          Things
                                        </span>
                                      </FormattedMessage>
                                    </a>
                                  </Link>
                                </Route>
                              </NavLink>
                              <NavLink
                                activeClassName="navbar-item-active"
                                aria-current="page"
                                className="navbar-item"
                                to="/stats"
                              >
                                <Route
                                  path="\\\\/stats"
                                >
                                  <Link
                                    aria-current={null}
                                    className="navbar-item"
                                    replace={false}
                                    to="/stats"
                                  >
                                    <a
                                      aria-current={null}
                                      className="navbar-item"
                                      href="/stats"
                                      onClick={[Function]}
                                    >
                                      <span
                                        className="icon"
                                      >
                                        <i
                                          className="fas fa-chart-bar"
                                        />
                                      </span>
                                      <FormattedMessage
                                        id="Stats"
                                        values={Object {}}
                                      >
                                        <span>
                                          Stats
                                        </span>
                                      </FormattedMessage>
                                    </a>
                                  </Link>
                                </Route>
                              </NavLink>
                              <NavLink
                                activeClassName="navbar-item-active"
                                aria-current="page"
                                className="navbar-item"
                                to="/data"
                              >
                                <Route
                                  path="\\\\/data"
                                >
                                  <Link
                                    aria-current={null}
                                    className="navbar-item"
                                    replace={false}
                                    to="/data"
                                  >
                                    <a
                                      aria-current={null}
                                      className="navbar-item"
                                      href="/data"
                                      onClick={[Function]}
                                    >
                                      <span
                                        className="icon"
                                      >
                                        <i
                                          className="fas fa-database"
                                        />
                                      </span>
                                      <FormattedMessage
                                        id="Data"
                                        values={Object {}}
                                      >
                                        <span>
                                          Data
                                        </span>
                                      </FormattedMessage>
                                    </a>
                                  </Link>
                                </Route>
                              </NavLink>
                              <NavLink
                                activeClassName="navbar-item-active"
                                aria-current="page"
                                className="navbar-item"
                                to="/real-time"
                              >
                                <Route
                                  path="\\\\/real-time"
                                >
                                  <Link
                                    aria-current={null}
                                    className="navbar-item"
                                    replace={false}
                                    to="/real-time"
                                  >
                                    <a
                                      aria-current={null}
                                      className="navbar-item"
                                      href="/real-time"
                                      onClick={[Function]}
                                    >
                                      <span
                                        className="icon"
                                      >
                                        <i
                                          className="fas fa-clock"
                                        />
                                      </span>
                                      <FormattedMessage
                                        id="Real time"
                                        values={Object {}}
                                      >
                                        <span>
                                          Real time
                                        </span>
                                      </FormattedMessage>
                                    </a>
                                  </Link>
                                </Route>
                              </NavLink>
                            </div>
                            <div
                              className="navbar-end"
                            >
                              <Connect(LanguageSelector)>
                                <LanguageSelector
                                  languages={
                                    Array [
                                      "en",
                                      "es",
                                    ]
                                  }
                                  selectedLanguage="en"
                                  updateLanguage={[Function]}
                                >
                                  <div
                                    className="navbar-item has-dropdown is-hoverable"
                                  >
                                    <button
                                      className="navbar-link button is-white"
                                    >
                                      <LanguageItem
                                        language="en"
                                      >
                                        <span
                                          className="icon is-medium"
                                        >
                                          <i
                                            className="flag-icon flag-icon-gb"
                                          />
                                        </span>
                                        <FormattedMessage
                                          id="en"
                                          values={Object {}}
                                        >
                                          <span>
                                            English
                                          </span>
                                        </FormattedMessage>
                                      </LanguageItem>
                                    </button>
                                    <div
                                      className="navbar-dropdown"
                                    >
                                      <button
                                        className="navbar-item button is-white"
                                        key="es"
                                        onClick={[Function]}
                                      >
                                        <LanguageItem
                                          language="es"
                                        >
                                          <span
                                            className="icon is-medium"
                                          >
                                            <i
                                              className="flag-icon flag-icon-es"
                                            />
                                          </span>
                                          <FormattedMessage
                                            id="es"
                                            values={Object {}}
                                          >
                                            <span>
                                              Spanish
                                            </span>
                                          </FormattedMessage>
                                        </LanguageItem>
                                      </button>
                                    </div>
                                  </div>
                                </LanguageSelector>
                              </Connect(LanguageSelector)>
                              <div
                                className="navbar-item"
                              >
                                <div
                                  className="field"
                                >
                                  <p
                                    className="control"
                                  >
                                    <button
                                      className="button is-primary"
                                      id="logout-button"
                                      onClick={[Function]}
                                    >
                                      <span
                                        className="icon"
                                      >
                                        <i
                                          className="fa fa-user"
                                        />
                                      </span>
                                      <FormattedMessage
                                        id="Logout"
                                        values={Object {}}
                                      >
                                        <span>
                                          Logout
                                        </span>
                                      </FormattedMessage>
                                    </button>
                                  </p>
                                </div>
                              </div>
                            </div>
                          </div>
                        </nav>
                      </Navbar>
                    </Connect(Navbar)>
                  </Route>
                </withRouter(Connect(Navbar))>
                <main>
                  <Switch>
                    <Route
                      component={[Function]}
                      computedMatch={
                        Object {
                          "isExact": true,
                          "params": Object {},
                          "path": "/things",
                          "url": "/things",
                        }
                      }
                      location={
                        Object {
                          "hash": "",
                          "pathname": "/things",
                          "search": "",
                          "state": undefined,
                        }
                      }
                      path="/things"
                    >
                      <Connect(withRouter(Connect(ResetOnUnmount)))
                        history={
                          Object {
                            "action": "REPLACE",
                            "block": [Function],
                            "canGo": [Function],
                            "createHref": [Function],
                            "entries": Array [
                              Object {
                                "hash": "",
                                "pathname": "/things",
                                "search": "",
                                "state": undefined,
                              },
                            ],
                            "go": [Function],
                            "goBack": [Function],
                            "goForward": [Function],
                            "index": 0,
                            "length": 1,
                            "listen": [Function],
                            "location": Object {
                              "hash": "",
                              "pathname": "/things",
                              "search": "",
                              "state": undefined,
                            },
                            "push": [Function],
                            "replace": [Function],
                          }
                        }
                        location={
                          Object {
                            "hash": "",
                            "pathname": "/things",
                            "search": "",
                            "state": undefined,
                          }
                        }
                        match={
                          Object {
                            "isExact": true,
                            "params": Object {},
                            "path": "/things",
                            "url": "/things",
                          }
                        }
                      >
                        <withRouter(Connect(ResetOnUnmount))
                          getThings={[Function]}
                          history={
                            Object {
                              "action": "REPLACE",
                              "block": [Function],
                              "canGo": [Function],
                              "createHref": [Function],
                              "entries": Array [
                                Object {
                                  "hash": "",
                                  "pathname": "/things",
                                  "search": "",
                                  "state": undefined,
                                },
                              ],
                              "go": [Function],
                              "goBack": [Function],
                              "goForward": [Function],
                              "index": 0,
                              "length": 1,
                              "listen": [Function],
                              "location": Object {
                                "hash": "",
                                "pathname": "/things",
                                "search": "",
                                "state": undefined,
                              },
                              "push": [Function],
                              "replace": [Function],
                            }
                          }
                          isLoading={false}
                          location={
                            Object {
                              "hash": "",
                              "pathname": "/things",
                              "search": "",
                              "state": undefined,
                            }
                          }
                          match={
                            Object {
                              "isExact": true,
                              "params": Object {},
                              "path": "/things",
                              "url": "/things",
                            }
                          }
                          selectThing={[Function]}
                          selectedThing={null}
                          shouldShowNotFoundError={false}
                          showNotFoundError={[Function]}
                          things={Array []}
                        >
                          <Route>
                            <Connect(ResetOnUnmount)
                              getThings={[Function]}
                              history={
                                Object {
                                  "action": "REPLACE",
                                  "block": [Function],
                                  "canGo": [Function],
                                  "createHref": [Function],
                                  "entries": Array [
                                    Object {
                                      "hash": "",
                                      "pathname": "/things",
                                      "search": "",
                                      "state": undefined,
                                    },
                                  ],
                                  "go": [Function],
                                  "goBack": [Function],
                                  "goForward": [Function],
                                  "index": 0,
                                  "length": 1,
                                  "listen": [Function],
                                  "location": Object {
                                    "hash": "",
                                    "pathname": "/things",
                                    "search": "",
                                    "state": undefined,
                                  },
                                  "push": [Function],
                                  "replace": [Function],
                                }
                              }
                              isLoading={false}
                              location={
                                Object {
                                  "hash": "",
                                  "pathname": "/things",
                                  "search": "",
                                  "state": undefined,
                                }
                              }
                              match={
                                Object {
                                  "isExact": true,
                                  "params": Object {},
                                  "path": "/things",
                                  "url": "/things",
                                }
                              }
                              selectThing={[Function]}
                              selectedThing={null}
                              shouldShowNotFoundError={false}
                              showNotFoundError={[Function]}
                              things={Array []}
                            >
                              <ResetOnUnmount
                                getThings={[Function]}
                                history={
                                  Object {
                                    "action": "REPLACE",
                                    "block": [Function],
                                    "canGo": [Function],
                                    "createHref": [Function],
                                    "entries": Array [
                                      Object {
                                        "hash": "",
                                        "pathname": "/things",
                                        "search": "",
                                        "state": undefined,
                                      },
                                    ],
                                    "go": [Function],
                                    "goBack": [Function],
                                    "goForward": [Function],
                                    "index": 0,
                                    "length": 1,
                                    "listen": [Function],
                                    "location": Object {
                                      "hash": "",
                                      "pathname": "/things",
                                      "search": "",
                                      "state": undefined,
                                    },
                                    "push": [Function],
                                    "replace": [Function],
                                  }
                                }
                                isLoading={false}
                                location={
                                  Object {
                                    "hash": "",
                                    "pathname": "/things",
                                    "search": "",
                                    "state": undefined,
                                  }
                                }
                                match={
                                  Object {
                                    "isExact": true,
                                    "params": Object {},
                                    "path": "/things",
                                    "url": "/things",
                                  }
                                }
                                reset={[Function]}
                                selectThing={[Function]}
                                selectedThing={null}
                                shouldShowNotFoundError={false}
                                showNotFoundError={[Function]}
                                things={Array []}
                              >
                                <InjectIntl(Things)
                                  getThings={[Function]}
                                  history={
                                    Object {
                                      "action": "REPLACE",
                                      "block": [Function],
                                      "canGo": [Function],
                                      "createHref": [Function],
                                      "entries": Array [
                                        Object {
                                          "hash": "",
                                          "pathname": "/things",
                                          "search": "",
                                          "state": undefined,
                                        },
                                      ],
                                      "go": [Function],
                                      "goBack": [Function],
                                      "goForward": [Function],
                                      "index": 0,
                                      "length": 1,
                                      "listen": [Function],
                                      "location": Object {
                                        "hash": "",
                                        "pathname": "/things",
                                        "search": "",
                                        "state": undefined,
                                      },
                                      "push": [Function],
                                      "replace": [Function],
                                    }
                                  }
                                  isLoading={false}
                                  location={
                                    Object {
                                      "hash": "",
                                      "pathname": "/things",
                                      "search": "",
                                      "state": undefined,
                                    }
                                  }
                                  match={
                                    Object {
                                      "isExact": true,
                                      "params": Object {},
                                      "path": "/things",
                                      "url": "/things",
                                    }
                                  }
                                  reset={[Function]}
                                  selectThing={[Function]}
                                  selectedThing={null}
                                  shouldShowNotFoundError={false}
                                  showNotFoundError={[Function]}
                                  things={Array []}
                                >
                                  <Things
                                    getThings={[Function]}
                                    history={
                                      Object {
                                        "action": "REPLACE",
                                        "block": [Function],
                                        "canGo": [Function],
                                        "createHref": [Function],
                                        "entries": Array [
                                          Object {
                                            "hash": "",
                                            "pathname": "/things",
                                            "search": "",
                                            "state": undefined,
                                          },
                                        ],
                                        "go": [Function],
                                        "goBack": [Function],
                                        "goForward": [Function],
                                        "index": 0,
                                        "length": 1,
                                        "listen": [Function],
                                        "location": Object {
                                          "hash": "",
                                          "pathname": "/things",
                                          "search": "",
                                          "state": undefined,
                                        },
                                        "push": [Function],
                                        "replace": [Function],
                                      }
                                    }
                                    intl={
                                      Object {
                                        "defaultFormats": Object {},
                                        "defaultLocale": "en",
                                        "formatDate": [Function],
                                        "formatHTMLMessage": [Function],
                                        "formatMessage": [Function],
                                        "formatNumber": [Function],
                                        "formatPlural": [Function],
                                        "formatRelative": [Function],
                                        "formatTime": [Function],
                                        "formats": Object {},
                                        "formatters": Object {
                                          "getDateTimeFormat": [Function],
                                          "getMessageFormat": [Function],
                                          "getNumberFormat": [Function],
                                          "getPluralFormat": [Function],
                                          "getRelativeFormat": [Function],
                                        },
                                        "locale": "en",
                                        "messages": Object {
                                          "Custom": "Custom",
                                          "Data": "Data",
                                          "Delete": "Delete",
                                          "End date": "End date",
                                          "Error": "Error",
                                          "Event stats": "Event stats",
                                          "Events:": "Events:",
                                          "Filters": "Filters",
                                          "Google maps": "Google maps",
                                          "Group by": "Group by",
                                          "IP address:": "IP address:",
                                          "IoT": "IoT",
                                          "Last observation:": "Last observation:",
                                          "Login": "Login",
                                          "Logout": "Logout",
                                          "MQTT topic:": "MQTT topic:",
                                          "Measurement stats": "Measurement stats",
                                          "Measurement type": "Measurement type",
                                          "Measurements:": "Measurements:",
                                          "Observation": "Observation",
                                          "Password": "Password",
                                          "Real time": "Real time",
                                          "Request failed": "Request failed",
                                          "Reset": "Reset",
                                          "Start date": "Start date",
                                          "Stats": "Stats",
                                          "Thing": "Thing",
                                          "Thing not found": "Thing not found",
                                          "Things": "Things",
                                          "Time": "Time",
                                          "Time period": "Time period",
                                          "Type": "Type",
                                          "Username": "Username",
                                          "avg": "Average",
                                          "avgByHour": "Average by hour",
                                          "date": "Date",
                                          "day": "Day",
                                          "door-closed": "Door closed",
                                          "door-opened": "Door opened",
                                          "en": "English",
                                          "es": "Spanish",
                                          "event": "Event",
                                          "hour": "Hour",
                                          "humidity": "Humidity",
                                          "humidity-indoor": "Humidity indoor",
                                          "humidity-outdoor": "Humidity outdoor",
                                          "luminosity": "Luminosity",
                                          "max": "Maximum",
                                          "maxByHour": "Maximum by hour",
                                          "measurement": "Mesasurement",
                                          "min": "Minimum",
                                          "minByHour": "Minimum by hour",
                                          "minute": "Minute",
                                          "month": "Month",
                                          "second": "Second",
                                          "stdDev": "Standard deviation",
                                          "stdDevByHour": "Standard deviation by hour",
                                          "temperature": "Temperature",
                                          "temperature-indoor": "Temperature indoor",
                                          "temperature-outdoor": "Temperature outdoor",
                                          "thing": "Thing",
                                          "total": "Total",
                                          "week": "Week",
                                          "year": "Year",
                                        },
                                        "now": [Function],
                                        "onError": [Function],
                                        "textComponent": "span",
                                        "timeZone": null,
                                      }
                                    }
                                    isLoading={false}
                                    location={
                                      Object {
                                        "hash": "",
                                        "pathname": "/things",
                                        "search": "",
                                        "state": undefined,
                                      }
                                    }
                                    match={
                                      Object {
                                        "isExact": true,
                                        "params": Object {},
                                        "path": "/things",
                                        "url": "/things",
                                      }
                                    }
                                    reset={[Function]}
                                    selectThing={[Function]}
                                    selectedThing={null}
                                    shouldShowNotFoundError={false}
                                    showNotFoundError={[Function]}
                                    things={Array []}
                                  >
                                    <div>
                                      <div
                                        className="container is-fluid section"
                                      >
                                        <div
                                          className="columns"
                                        >
                                          <div
                                            className="column is-one-quarter"
                                          />
                                        </div>
                                      </div>
                                      <Modal
                                        isActive={false}
                                        messageStyle="is-danger"
                                        onCloseClick={[Function]}
                                        subTitle="Thing not found"
                                        title="Error"
                                      >
                                        <div
                                          className="modal"
                                        >
                                          <div
                                            className="modal-background"
                                            onClick={[Function]}
                                            onKeyPress={[Function]}
                                            role="button"
                                            tabIndex={0}
                                          />
                                          <div
                                            className="modal-content"
                                          >
                                            <article
                                              className="message is-medium is-danger"
                                            >
                                              <div
                                                className="message-header"
                                              >
                                                <p>
                                                  Error
                                                </p>
                                              </div>
                                              <div
                                                className="message-body has-text-centered"
                                              >
                                                Thing not found
                                              </div>
                                            </article>
                                          </div>
                                          <button
                                            aria-label="close"
                                            className="modal-close is-large"
                                            onClick={[Function]}
                                          />
                                        </div>
                                      </Modal>
                                    </div>
                                  </Things>
                                </InjectIntl(Things)>
                              </ResetOnUnmount>
                            </Connect(ResetOnUnmount)>
                          </Route>
                        </withRouter(Connect(ResetOnUnmount))>
                      </Connect(withRouter(Connect(ResetOnUnmount)))>
                    </Route>
                  </Switch>
                </main>
              </div>
            </Main>
          </Router>
        </MemoryRouter>
      </IntlProvider>
    </IntlProvider>
  </Connect(IntlProvider)>
</Provider>
`;

exports[`components/main renders a main in /stats path 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <Connect(IntlProvider)
    store={
      Object {
        "clearActions": [Function],
        "dispatch": [Function],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      }
    }
  >
    <IntlProvider
      dispatch={[Function]}
      locale="en"
      messages={
        Object {
          "Custom": "Custom",
          "Data": "Data",
          "Delete": "Delete",
          "End date": "End date",
          "Error": "Error",
          "Event stats": "Event stats",
          "Events:": "Events:",
          "Filters": "Filters",
          "Google maps": "Google maps",
          "Group by": "Group by",
          "IP address:": "IP address:",
          "IoT": "IoT",
          "Last observation:": "Last observation:",
          "Login": "Login",
          "Logout": "Logout",
          "MQTT topic:": "MQTT topic:",
          "Measurement stats": "Measurement stats",
          "Measurement type": "Measurement type",
          "Measurements:": "Measurements:",
          "Observation": "Observation",
          "Password": "Password",
          "Real time": "Real time",
          "Request failed": "Request failed",
          "Reset": "Reset",
          "Start date": "Start date",
          "Stats": "Stats",
          "Thing": "Thing",
          "Thing not found": "Thing not found",
          "Things": "Things",
          "Time": "Time",
          "Time period": "Time period",
          "Type": "Type",
          "Username": "Username",
          "avg": "Average",
          "avgByHour": "Average by hour",
          "date": "Date",
          "day": "Day",
          "door-closed": "Door closed",
          "door-opened": "Door opened",
          "en": "English",
          "es": "Spanish",
          "event": "Event",
          "hour": "Hour",
          "humidity": "Humidity",
          "humidity-indoor": "Humidity indoor",
          "humidity-outdoor": "Humidity outdoor",
          "luminosity": "Luminosity",
          "max": "Maximum",
          "maxByHour": "Maximum by hour",
          "measurement": "Mesasurement",
          "min": "Minimum",
          "minByHour": "Minimum by hour",
          "minute": "Minute",
          "month": "Month",
          "second": "Second",
          "stdDev": "Standard deviation",
          "stdDevByHour": "Standard deviation by hour",
          "temperature": "Temperature",
          "temperature-indoor": "Temperature indoor",
          "temperature-outdoor": "Temperature outdoor",
          "thing": "Thing",
          "total": "Total",
          "week": "Week",
          "year": "Year",
        }
      }
      store={
        Object {
          "clearActions": [Function],
          "dispatch": [Function],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        }
      }
      storeSubscription={
        Subscription {
          "listeners": Object {
            "clear": [Function],
            "get": [Function],
            "notify": [Function],
            "subscribe": [Function],
          },
          "onStateChange": [Function],
          "parentSub": undefined,
          "store": Object {
            "clearActions": [Function],
            "dispatch": [Function],
            "getActions": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
          },
          "unsubscribe": [Function],
        }
      }
    >
      <IntlProvider
        key="en"
        locale="en"
        messages={
          Object {
            "Custom": "Custom",
            "Data": "Data",
            "Delete": "Delete",
            "End date": "End date",
            "Error": "Error",
            "Event stats": "Event stats",
            "Events:": "Events:",
            "Filters": "Filters",
            "Google maps": "Google maps",
            "Group by": "Group by",
            "IP address:": "IP address:",
            "IoT": "IoT",
            "Last observation:": "Last observation:",
            "Login": "Login",
            "Logout": "Logout",
            "MQTT topic:": "MQTT topic:",
            "Measurement stats": "Measurement stats",
            "Measurement type": "Measurement type",
            "Measurements:": "Measurements:",
            "Observation": "Observation",
            "Password": "Password",
            "Real time": "Real time",
            "Request failed": "Request failed",
            "Reset": "Reset",
            "Start date": "Start date",
            "Stats": "Stats",
            "Thing": "Thing",
            "Thing not found": "Thing not found",
            "Things": "Things",
            "Time": "Time",
            "Time period": "Time period",
            "Type": "Type",
            "Username": "Username",
            "avg": "Average",
            "avgByHour": "Average by hour",
            "date": "Date",
            "day": "Day",
            "door-closed": "Door closed",
            "door-opened": "Door opened",
            "en": "English",
            "es": "Spanish",
            "event": "Event",
            "hour": "Hour",
            "humidity": "Humidity",
            "humidity-indoor": "Humidity indoor",
            "humidity-outdoor": "Humidity outdoor",
            "luminosity": "Luminosity",
            "max": "Maximum",
            "maxByHour": "Maximum by hour",
            "measurement": "Mesasurement",
            "min": "Minimum",
            "minByHour": "Minimum by hour",
            "minute": "Minute",
            "month": "Month",
            "second": "Second",
            "stdDev": "Standard deviation",
            "stdDevByHour": "Standard deviation by hour",
            "temperature": "Temperature",
            "temperature-indoor": "Temperature indoor",
            "temperature-outdoor": "Temperature outdoor",
            "thing": "Thing",
            "total": "Total",
            "week": "Week",
            "year": "Year",
          }
        }
      >
        <MemoryRouter
          initialEntries={
            Array [
              "/stats",
            ]
          }
          keyLength={0}
        >
          <Router
            history={
              Object {
                "action": "POP",
                "block": [Function],
                "canGo": [Function],
                "createHref": [Function],
                "entries": Array [
                  Object {
                    "hash": "",
                    "pathname": "/stats",
                    "search": "",
                    "state": undefined,
                  },
                ],
                "go": [Function],
                "goBack": [Function],
                "goForward": [Function],
                "index": 0,
                "length": 1,
                "listen": [Function],
                "location": Object {
                  "hash": "",
                  "pathname": "/stats",
                  "search": "",
                  "state": undefined,
                },
                "push": [Function],
                "replace": [Function],
              }
            }
          >
            <Main>
              <div
                className="has-navbar-fixed-top"
              >
                <withRouter(Connect(Navbar))>
                  <Route>
                    <Connect(Navbar)
                      history={
                        Object {
                          "action": "POP",
                          "block": [Function],
                          "canGo": [Function],
                          "createHref": [Function],
                          "entries": Array [
                            Object {
                              "hash": "",
                              "pathname": "/stats",
                              "search": "",
                              "state": undefined,
                            },
                          ],
                          "go": [Function],
                          "goBack": [Function],
                          "goForward": [Function],
                          "index": 0,
                          "length": 1,
                          "listen": [Function],
                          "location": Object {
                            "hash": "",
                            "pathname": "/stats",
                            "search": "",
                            "state": undefined,
                          },
                          "push": [Function],
                          "replace": [Function],
                        }
                      }
                      location={
                        Object {
                          "hash": "",
                          "pathname": "/stats",
                          "search": "",
                          "state": undefined,
                        }
                      }
                      match={
                        Object {
                          "isExact": false,
                          "params": Object {},
                          "path": "/",
                          "url": "/",
                        }
                      }
                    >
                      <Navbar
                        history={
                          Object {
                            "action": "POP",
                            "block": [Function],
                            "canGo": [Function],
                            "createHref": [Function],
                            "entries": Array [
                              Object {
                                "hash": "",
                                "pathname": "/stats",
                                "search": "",
                                "state": undefined,
                              },
                            ],
                            "go": [Function],
                            "goBack": [Function],
                            "goForward": [Function],
                            "index": 0,
                            "length": 1,
                            "listen": [Function],
                            "location": Object {
                              "hash": "",
                              "pathname": "/stats",
                              "search": "",
                              "state": undefined,
                            },
                            "push": [Function],
                            "replace": [Function],
                          }
                        }
                        isHamburgerMenuExpanded={false}
                        location={
                          Object {
                            "hash": "",
                            "pathname": "/stats",
                            "search": "",
                            "state": undefined,
                          }
                        }
                        logout={[Function]}
                        match={
                          Object {
                            "isExact": false,
                            "params": Object {},
                            "path": "/",
                            "url": "/",
                          }
                        }
                        toggleHamburgerMenu={[Function]}
                      >
                        <nav
                          className="navbar has-shadow is-spaced"
                        >
                          <div
                            className="navbar-brand"
                          >
                            <NavLink
                              activeClassName="active"
                              aria-current="page"
                              className="navbar-item"
                              to="/"
                            >
                              <Route
                                path="\\\\/"
                              >
                                <Link
                                  aria-current="page"
                                  className="navbar-item active"
                                  replace={false}
                                  style={Object {}}
                                  to="/"
                                >
                                  <a
                                    aria-current="page"
                                    className="navbar-item active"
                                    href="/"
                                    onClick={[Function]}
                                    style={Object {}}
                                  >
                                    <FormattedMessage
                                      id="IoT"
                                      values={Object {}}
                                    >
                                      <h1
                                        className="title"
                                      >
                                        IoT
                                      </h1>
                                    </FormattedMessage>
                                  </a>
                                </Link>
                              </Route>
                            </NavLink>
                            <div
                              className="navbar-burger burger"
                              data-target="navbar-menu"
                              onClick={[Function]}
                              onKeyPress={[Function]}
                              role="button"
                              tabIndex={0}
                            >
                              <span />
                              <span />
                              <span />
                            </div>
                          </div>
                          <div
                            className="navbar-menu"
                            id="navbar-menu"
                          >
                            <div
                              className="navbar-start"
                            >
                              <NavLink
                                activeClassName="navbar-item-active"
                                aria-current="page"
                                className="navbar-item"
                                to="/things"
                              >
                                <Route
                                  path="\\\\/things"
                                >
                                  <Link
                                    aria-current={null}
                                    className="navbar-item"
                                    replace={false}
                                    to="/things"
                                  >
                                    <a
                                      aria-current={null}
                                      className="navbar-item"
                                      href="/things"
                                      onClick={[Function]}
                                    >
                                      <span
                                        className="icon"
                                      >
                                        <i
                                          className="fas fa-microchip"
                                        />
                                      </span>
                                      <FormattedMessage
                                        id="Things"
                                        values={Object {}}
                                      >
                                        <span>
                                          Things
                                        </span>
                                      </FormattedMessage>
                                    </a>
                                  </Link>
                                </Route>
                              </NavLink>
                              <NavLink
                                activeClassName="navbar-item-active"
                                aria-current="page"
                                className="navbar-item"
                                to="/stats"
                              >
                                <Route
                                  path="\\\\/stats"
                                >
                                  <Link
                                    aria-current="page"
                                    className="navbar-item navbar-item-active"
                                    replace={false}
                                    style={Object {}}
                                    to="/stats"
                                  >
                                    <a
                                      aria-current="page"
                                      className="navbar-item navbar-item-active"
                                      href="/stats"
                                      onClick={[Function]}
                                      style={Object {}}
                                    >
                                      <span
                                        className="icon"
                                      >
                                        <i
                                          className="fas fa-chart-bar"
                                        />
                                      </span>
                                      <FormattedMessage
                                        id="Stats"
                                        values={Object {}}
                                      >
                                        <span>
                                          Stats
                                        </span>
                                      </FormattedMessage>
                                    </a>
                                  </Link>
                                </Route>
                              </NavLink>
                              <NavLink
                                activeClassName="navbar-item-active"
                                aria-current="page"
                                className="navbar-item"
                                to="/data"
                              >
                                <Route
                                  path="\\\\/data"
                                >
                                  <Link
                                    aria-current={null}
                                    className="navbar-item"
                                    replace={false}
                                    to="/data"
                                  >
                                    <a
                                      aria-current={null}
                                      className="navbar-item"
                                      href="/data"
                                      onClick={[Function]}
                                    >
                                      <span
                                        className="icon"
                                      >
                                        <i
                                          className="fas fa-database"
                                        />
                                      </span>
                                      <FormattedMessage
                                        id="Data"
                                        values={Object {}}
                                      >
                                        <span>
                                          Data
                                        </span>
                                      </FormattedMessage>
                                    </a>
                                  </Link>
                                </Route>
                              </NavLink>
                              <NavLink
                                activeClassName="navbar-item-active"
                                aria-current="page"
                                className="navbar-item"
                                to="/real-time"
                              >
                                <Route
                                  path="\\\\/real-time"
                                >
                                  <Link
                                    aria-current={null}
                                    className="navbar-item"
                                    replace={false}
                                    to="/real-time"
                                  >
                                    <a
                                      aria-current={null}
                                      className="navbar-item"
                                      href="/real-time"
                                      onClick={[Function]}
                                    >
                                      <span
                                        className="icon"
                                      >
                                        <i
                                          className="fas fa-clock"
                                        />
                                      </span>
                                      <FormattedMessage
                                        id="Real time"
                                        values={Object {}}
                                      >
                                        <span>
                                          Real time
                                        </span>
                                      </FormattedMessage>
                                    </a>
                                  </Link>
                                </Route>
                              </NavLink>
                            </div>
                            <div
                              className="navbar-end"
                            >
                              <Connect(LanguageSelector)>
                                <LanguageSelector
                                  languages={
                                    Array [
                                      "en",
                                      "es",
                                    ]
                                  }
                                  selectedLanguage="en"
                                  updateLanguage={[Function]}
                                >
                                  <div
                                    className="navbar-item has-dropdown is-hoverable"
                                  >
                                    <button
                                      className="navbar-link button is-white"
                                    >
                                      <LanguageItem
                                        language="en"
                                      >
                                        <span
                                          className="icon is-medium"
                                        >
                                          <i
                                            className="flag-icon flag-icon-gb"
                                          />
                                        </span>
                                        <FormattedMessage
                                          id="en"
                                          values={Object {}}
                                        >
                                          <span>
                                            English
                                          </span>
                                        </FormattedMessage>
                                      </LanguageItem>
                                    </button>
                                    <div
                                      className="navbar-dropdown"
                                    >
                                      <button
                                        className="navbar-item button is-white"
                                        key="es"
                                        onClick={[Function]}
                                      >
                                        <LanguageItem
                                          language="es"
                                        >
                                          <span
                                            className="icon is-medium"
                                          >
                                            <i
                                              className="flag-icon flag-icon-es"
                                            />
                                          </span>
                                          <FormattedMessage
                                            id="es"
                                            values={Object {}}
                                          >
                                            <span>
                                              Spanish
                                            </span>
                                          </FormattedMessage>
                                        </LanguageItem>
                                      </button>
                                    </div>
                                  </div>
                                </LanguageSelector>
                              </Connect(LanguageSelector)>
                              <div
                                className="navbar-item"
                              >
                                <div
                                  className="field"
                                >
                                  <p
                                    className="control"
                                  >
                                    <button
                                      className="button is-primary"
                                      id="logout-button"
                                      onClick={[Function]}
                                    >
                                      <span
                                        className="icon"
                                      >
                                        <i
                                          className="fa fa-user"
                                        />
                                      </span>
                                      <FormattedMessage
                                        id="Logout"
                                        values={Object {}}
                                      >
                                        <span>
                                          Logout
                                        </span>
                                      </FormattedMessage>
                                    </button>
                                  </p>
                                </div>
                              </div>
                            </div>
                          </div>
                        </nav>
                      </Navbar>
                    </Connect(Navbar)>
                  </Route>
                </withRouter(Connect(Navbar))>
                <main>
                  <Switch>
                    <Route
                      component={[Function]}
                      computedMatch={
                        Object {
                          "isExact": true,
                          "params": Object {},
                          "path": "/stats",
                          "url": "/stats",
                        }
                      }
                      location={
                        Object {
                          "hash": "",
                          "pathname": "/stats",
                          "search": "",
                          "state": undefined,
                        }
                      }
                      path="/stats"
                    >
                      <Connect(Connect(ResetOnUnmount))
                        history={
                          Object {
                            "action": "POP",
                            "block": [Function],
                            "canGo": [Function],
                            "createHref": [Function],
                            "entries": Array [
                              Object {
                                "hash": "",
                                "pathname": "/stats",
                                "search": "",
                                "state": undefined,
                              },
                            ],
                            "go": [Function],
                            "goBack": [Function],
                            "goForward": [Function],
                            "index": 0,
                            "length": 1,
                            "listen": [Function],
                            "location": Object {
                              "hash": "",
                              "pathname": "/stats",
                              "search": "",
                              "state": undefined,
                            },
                            "push": [Function],
                            "replace": [Function],
                          }
                        }
                        location={
                          Object {
                            "hash": "",
                            "pathname": "/stats",
                            "search": "",
                            "state": undefined,
                          }
                        }
                        match={
                          Object {
                            "isExact": true,
                            "params": Object {},
                            "path": "/stats",
                            "url": "/stats",
                          }
                        }
                      >
                        <Connect(ResetOnUnmount)
                          addCustomTimePeriodFilter={[Function]}
                          addThingFilter={[Function]}
                          addTimePeriodFilter={[Function]}
                          hasError={false}
                          history={
                            Object {
                              "action": "POP",
                              "block": [Function],
                              "canGo": [Function],
                              "createHref": [Function],
                              "entries": Array [
                                Object {
                                  "hash": "",
                                  "pathname": "/stats",
                                  "search": "",
                                  "state": undefined,
                                },
                              ],
                              "go": [Function],
                              "goBack": [Function],
                              "goForward": [Function],
                              "index": 0,
                              "length": 1,
                              "listen": [Function],
                              "location": Object {
                                "hash": "",
                                "pathname": "/stats",
                                "search": "",
                                "state": undefined,
                              },
                              "push": [Function],
                              "replace": [Function],
                            }
                          }
                          location={
                            Object {
                              "hash": "",
                              "pathname": "/stats",
                              "search": "",
                              "state": undefined,
                            }
                          }
                          match={
                            Object {
                              "isExact": true,
                              "params": Object {},
                              "path": "/stats",
                              "url": "/stats",
                            }
                          }
                          updateParams={[Function]}
                        >
                          <ResetOnUnmount
                            addCustomTimePeriodFilter={[Function]}
                            addThingFilter={[Function]}
                            addTimePeriodFilter={[Function]}
                            hasError={false}
                            history={
                              Object {
                                "action": "POP",
                                "block": [Function],
                                "canGo": [Function],
                                "createHref": [Function],
                                "entries": Array [
                                  Object {
                                    "hash": "",
                                    "pathname": "/stats",
                                    "search": "",
                                    "state": undefined,
                                  },
                                ],
                                "go": [Function],
                                "goBack": [Function],
                                "goForward": [Function],
                                "index": 0,
                                "length": 1,
                                "listen": [Function],
                                "location": Object {
                                  "hash": "",
                                  "pathname": "/stats",
                                  "search": "",
                                  "state": undefined,
                                },
                                "push": [Function],
                                "replace": [Function],
                              }
                            }
                            location={
                              Object {
                                "hash": "",
                                "pathname": "/stats",
                                "search": "",
                                "state": undefined,
                              }
                            }
                            match={
                              Object {
                                "isExact": true,
                                "params": Object {},
                                "path": "/stats",
                                "url": "/stats",
                              }
                            }
                            reset={[Function]}
                            updateParams={[Function]}
                          >
                            <withRouter(DataParams)
                              addCustomTimePeriodFilter={[Function]}
                              addThingFilter={[Function]}
                              addTimePeriodFilter={[Function]}
                              hasError={false}
                              history={
                                Object {
                                  "action": "POP",
                                  "block": [Function],
                                  "canGo": [Function],
                                  "createHref": [Function],
                                  "entries": Array [
                                    Object {
                                      "hash": "",
                                      "pathname": "/stats",
                                      "search": "",
                                      "state": undefined,
                                    },
                                  ],
                                  "go": [Function],
                                  "goBack": [Function],
                                  "goForward": [Function],
                                  "index": 0,
                                  "length": 1,
                                  "listen": [Function],
                                  "location": Object {
                                    "hash": "",
                                    "pathname": "/stats",
                                    "search": "",
                                    "state": undefined,
                                  },
                                  "push": [Function],
                                  "replace": [Function],
                                }
                              }
                              location={
                                Object {
                                  "hash": "",
                                  "pathname": "/stats",
                                  "search": "",
                                  "state": undefined,
                                }
                              }
                              match={
                                Object {
                                  "isExact": true,
                                  "params": Object {},
                                  "path": "/stats",
                                  "url": "/stats",
                                }
                              }
                              reset={[Function]}
                              updateParams={[Function]}
                            >
                              <Route>
                                <DataParams
                                  addCustomTimePeriodFilter={[Function]}
                                  addThingFilter={[Function]}
                                  addTimePeriodFilter={[Function]}
                                  hasError={false}
                                  history={
                                    Object {
                                      "action": "POP",
                                      "block": [Function],
                                      "canGo": [Function],
                                      "createHref": [Function],
                                      "entries": Array [
                                        Object {
                                          "hash": "",
                                          "pathname": "/stats",
                                          "search": "",
                                          "state": undefined,
                                        },
                                      ],
                                      "go": [Function],
                                      "goBack": [Function],
                                      "goForward": [Function],
                                      "index": 0,
                                      "length": 1,
                                      "listen": [Function],
                                      "location": Object {
                                        "hash": "",
                                        "pathname": "/stats",
                                        "search": "",
                                        "state": undefined,
                                      },
                                      "push": [Function],
                                      "replace": [Function],
                                    }
                                  }
                                  location={
                                    Object {
                                      "hash": "",
                                      "pathname": "/stats",
                                      "search": "",
                                      "state": undefined,
                                    }
                                  }
                                  match={
                                    Object {
                                      "isExact": true,
                                      "params": Object {},
                                      "path": "/stats",
                                      "url": "/stats",
                                    }
                                  }
                                  reset={[Function]}
                                  updateParams={[Function]}
                                >
                                  <Stats
                                    addCustomTimePeriodFilter={[Function]}
                                    addThingFilter={[Function]}
                                    addTimePeriodFilter={[Function]}
                                    hasError={false}
                                    history={
                                      Object {
                                        "action": "POP",
                                        "block": [Function],
                                        "canGo": [Function],
                                        "createHref": [Function],
                                        "entries": Array [
                                          Object {
                                            "hash": "",
                                            "pathname": "/stats",
                                            "search": "",
                                            "state": undefined,
                                          },
                                        ],
                                        "go": [Function],
                                        "goBack": [Function],
                                        "goForward": [Function],
                                        "index": 0,
                                        "length": 1,
                                        "listen": [Function],
                                        "location": Object {
                                          "hash": "",
                                          "pathname": "/stats",
                                          "search": "",
                                          "state": undefined,
                                        },
                                        "push": [Function],
                                        "replace": [Function],
                                      }
                                    }
                                    location={
                                      Object {
                                        "hash": "",
                                        "pathname": "/stats",
                                        "search": "",
                                        "state": undefined,
                                      }
                                    }
                                    match={
                                      Object {
                                        "isExact": true,
                                        "params": Object {},
                                        "path": "/stats",
                                        "url": "/stats",
                                      }
                                    }
                                    onFiltersSelected={[Function]}
                                    onParamsSelected={[Function]}
                                    onReset={[Function]}
                                    reset={[Function]}
                                    updateParams={[Function]}
                                  >
                                    <div
                                      className="container is-fluid section"
                                    >
                                      <div
                                        className="columns"
                                      >
                                        <div
                                          className="column is-three-quarters"
                                        >
                                          <Connect(StatsParamsPanel)
                                            onParamsSelected={[Function]}
                                            onReset={[Function]}
                                          >
                                            <StatsParamsPanel
                                              isResetDisabled={true}
                                              observation={Object {}}
                                              onParamsSelected={[Function]}
                                              onReset={[Function]}
                                              selectGroupBy={[Function]}
                                              selectMeasurementType={[Function]}
                                              selectObservation={[Function]}
                                              selectThing={[Function]}
                                              selectType={[Function]}
                                              type={Object {}}
                                              updateGroupBy={[Function]}
                                              updateMeasurementType={[Function]}
                                              updateObservation={[Function]}
                                              updateParams={[Function]}
                                              updateThing={[Function]}
                                              updateType={[Function]}
                                            >
                                              <ParamsPanel
                                                params={
                                                  Array [
                                                    Object {
                                                      "isActive": false,
                                                      "isDisabled": false,
                                                      "isLoading": false,
                                                      "items": Array [],
                                                      "key": "type",
                                                      "label": "Type",
                                                      "onButtonClick": [Function],
                                                      "onItemClick": [Function],
                                                    },
                                                    Object {
                                                      "isActive": false,
                                                      "isDisabled": true,
                                                      "isLoading": false,
                                                      "items": Array [],
                                                      "key": "observation",
                                                      "label": "Observation",
                                                      "onButtonClick": [Function],
                                                      "onItemClick": [Function],
                                                    },
                                                  ]
                                                }
                                                reset={
                                                  Object {
                                                    "isDisabled": true,
                                                    "onReset": [Function],
                                                  }
                                                }
                                              >
                                                <div
                                                  className="box"
                                                >
                                                  <div
                                                    className="columns"
                                                  >
                                                    <div
                                                      className="column"
                                                      key="type"
                                                    >
                                                      <Dropdown
                                                        buttonStyle=""
                                                        iconStyle="fa-angle-down"
                                                        isActive={false}
                                                        isDisabled={false}
                                                        isLoading={false}
                                                        items={Array []}
                                                        label="Type"
                                                        onButtonClick={[Function]}
                                                        onItemClick={[Function]}
                                                      >
                                                        <div
                                                          className="dropdown"
                                                        >
                                                          <div
                                                            className="dropdown-trigger"
                                                          >
                                                            <button
                                                              aria-controls="dropdown-menu"
                                                              aria-haspopup="true"
                                                              className="button"
                                                              disabled={false}
                                                              onClick={[Function]}
                                                            >
                                                              <span>
                                                                <FormattedMessage
                                                                  defaultMessage="Type"
                                                                  id="Type"
                                                                  values={Object {}}
                                                                >
                                                                  <span>
                                                                    Type
                                                                  </span>
                                                                </FormattedMessage>
                                                              </span>
                                                              <span
                                                                className="icon is-small"
                                                              >
                                                                <i
                                                                  aria-hidden="true"
                                                                  className="fas fa-angle-down"
                                                                />
                                                              </span>
                                                            </button>
                                                          </div>
                                                          <div
                                                            className="dropdown-menu"
                                                            id="dropdown-menu"
                                                            role="menu"
                                                          >
                                                            <div
                                                              className="dropdown-content"
                                                            />
                                                          </div>
                                                        </div>
                                                      </Dropdown>
                                                    </div>
                                                    <div
                                                      className="column"
                                                      key="observation"
                                                    >
                                                      <Dropdown
                                                        buttonStyle=""
                                                        iconStyle="fa-angle-down"
                                                        isActive={false}
                                                        isDisabled={true}
                                                        isLoading={false}
                                                        items={Array []}
                                                        label="Observation"
                                                        onButtonClick={[Function]}
                                                        onItemClick={[Function]}
                                                      >
                                                        <div
                                                          className="dropdown"
                                                        >
                                                          <div
                                                            className="dropdown-trigger"
                                                          >
                                                            <button
                                                              aria-controls="dropdown-menu"
                                                              aria-haspopup="true"
                                                              className="button"
                                                              disabled={true}
                                                              onClick={[Function]}
                                                            >
                                                              <span>
                                                                <FormattedMessage
                                                                  defaultMessage="Observation"
                                                                  id="Observation"
                                                                  values={Object {}}
                                                                >
                                                                  <span>
                                                                    Observation
                                                                  </span>
                                                                </FormattedMessage>
                                                              </span>
                                                              <span
                                                                className="icon is-small"
                                                              >
                                                                <i
                                                                  aria-hidden="true"
                                                                  className="fas fa-angle-down"
                                                                />
                                                              </span>
                                                            </button>
                                                          </div>
                                                          <div
                                                            className="dropdown-menu"
                                                            id="dropdown-menu"
                                                            role="menu"
                                                          >
                                                            <div
                                                              className="dropdown-content"
                                                            />
                                                          </div>
                                                        </div>
                                                      </Dropdown>
                                                    </div>
                                                    <div
                                                      className="column is-2"
                                                    >
                                                      <button
                                                        className="button is-warning is-fullwidth"
                                                        disabled={true}
                                                        onClick={[Function]}
                                                      >
                                                        <FormattedMessage
                                                          id="Reset"
                                                          values={Object {}}
                                                        >
                                                          <span>
                                                            Reset
                                                          </span>
                                                        </FormattedMessage>
                                                        <span
                                                          className="icon is-small"
                                                        >
                                                          <i
                                                            aria-hidden="true"
                                                            className="fas fa-eraser"
                                                          />
                                                        </span>
                                                      </button>
                                                    </div>
                                                  </div>
                                                </div>
                                              </ParamsPanel>
                                            </StatsParamsPanel>
                                          </Connect(StatsParamsPanel)>
                                          <Connect(Charts)
                                            chartType="BARCHART"
                                          >
                                            <Charts
                                              chartType="BARCHART"
                                              dispatch={[Function]}
                                              isLoading={false}
                                              items={Array []}
                                              things={Array []}
                                            />
                                          </Connect(Charts)>
                                        </div>
                                        <div
                                          className="column is-one-quarter"
                                        >
                                          <Connect(FiltersPanelContainer)
                                            onFiltersSelected={[Function]}
                                          >
                                            <FiltersPanelContainer
                                              addCustomTimePeriodFilter={[Function]}
                                              addFilterType={[Function]}
                                              addThingFilter={[Function]}
                                              addTimePeriodFilter={[Function]}
                                              dateFilter={
                                                Object {
                                                  "custom": Object {
                                                    "endDate": null,
                                                    "startDate": null,
                                                  },
                                                  "isCustomSelected": false,
                                                  "timePeriod": Object {
                                                    "isActive": false,
                                                    "isDisabled": false,
                                                    "isLoading": false,
                                                    "items": Array [],
                                                    "selectedItem": null,
                                                  },
                                                }
                                              }
                                              deleteFilterType={[Function]}
                                              onFiltersSelected={[Function]}
                                              selectFilterType={[Function]}
                                              selectThingFilter={[Function]}
                                              selectTimePeriod={[Function]}
                                              selectedFilters={Array []}
                                              statsType={null}
                                              thingFilter={
                                                Object {
                                                  "isActive": false,
                                                  "isDisabled": false,
                                                  "isLoading": false,
                                                  "items": Array [],
                                                  "selectedItem": null,
                                                }
                                              }
                                              toggleDateFilterType={[Function]}
                                              type={
                                                Object {
                                                  "isActive": false,
                                                  "isDisabled": false,
                                                  "items": Array [
                                                    "thing",
                                                    "date",
                                                  ],
                                                }
                                              }
                                              updateEndDate={[Function]}
                                              updateStartDate={[Function]}
                                              updateThingFilter={[Function]}
                                              updateTimePeriod={[Function]}
                                            >
                                              <FiltersPanel
                                                dateFilter={
                                                  Object {
                                                    "custom": Object {
                                                      "endDate": Object {
                                                        "onChange": [Function],
                                                        "selected": null,
                                                      },
                                                      "startDate": Object {
                                                        "onChange": [Function],
                                                        "selected": null,
                                                      },
                                                    },
                                                    "isCustomSelected": false,
                                                    "onDelete": [Function],
                                                    "selector": Object {
                                                      "isCustomSelected": false,
                                                      "onChange": [Function],
                                                    },
                                                    "timePeriod": Object {
                                                      "isActive": false,
                                                      "isDisabled": false,
                                                      "isLoading": false,
                                                      "items": Array [],
                                                      "label": "Time period",
                                                      "onButtonClick": [Function],
                                                      "onItemClick": [Function],
                                                      "selectedItem": null,
                                                    },
                                                  }
                                                }
                                                selectedFilters={Array []}
                                                thingFilter={
                                                  Object {
                                                    "isActive": false,
                                                    "isDisabled": false,
                                                    "isLoading": false,
                                                    "items": Array [],
                                                    "label": "Thing",
                                                    "onButtonClick": [Function],
                                                    "onDelete": [Function],
                                                    "onItemClick": [Function],
                                                    "selectedItem": null,
                                                  }
                                                }
                                                type={
                                                  Object {
                                                    "isActive": false,
                                                    "isDisabled": false,
                                                    "items": Array [
                                                      "thing",
                                                      "date",
                                                    ],
                                                    "onButtonClick": [Function],
                                                    "onItemClick": [Function],
                                                  }
                                                }
                                              >
                                                <div
                                                  className="box"
                                                >
                                                  <div
                                                    className="columns"
                                                  >
                                                    <div
                                                      className="column"
                                                    >
                                                      <Dropdown
                                                        buttonStyle="is-primary"
                                                        iconStyle="fa-plus"
                                                        isActive={false}
                                                        isDisabled={false}
                                                        isLoading={false}
                                                        items={
                                                          Array [
                                                            "thing",
                                                            "date",
                                                          ]
                                                        }
                                                        label="Filters"
                                                        onButtonClick={[Function]}
                                                        onItemClick={[Function]}
                                                      >
                                                        <div
                                                          className="dropdown"
                                                        >
                                                          <div
                                                            className="dropdown-trigger"
                                                          >
                                                            <button
                                                              aria-controls="dropdown-menu"
                                                              aria-haspopup="true"
                                                              className="button is-primary"
                                                              disabled={false}
                                                              onClick={[Function]}
                                                            >
                                                              <span>
                                                                <FormattedMessage
                                                                  defaultMessage="Filters"
                                                                  id="Filters"
                                                                  values={Object {}}
                                                                >
                                                                  <span>
                                                                    Filters
                                                                  </span>
                                                                </FormattedMessage>
                                                              </span>
                                                              <span
                                                                className="icon is-small"
                                                              >
                                                                <i
                                                                  aria-hidden="true"
                                                                  className="fas fa-plus"
                                                                />
                                                              </span>
                                                            </button>
                                                          </div>
                                                          <div
                                                            className="dropdown-menu"
                                                            id="dropdown-menu"
                                                            role="menu"
                                                          >
                                                            <div
                                                              className="dropdown-content"
                                                            >
                                                              <div
                                                                className="dropdown-item"
                                                                key="thing"
                                                                onClick={[Function]}
                                                                onKeyPress={[Function]}
                                                                role="button"
                                                                tabIndex={0}
                                                              >
                                                                <FormattedMessage
                                                                  defaultMessage="thing"
                                                                  id="thing"
                                                                  values={Object {}}
                                                                >
                                                                  <span>
                                                                    Thing
                                                                  </span>
                                                                </FormattedMessage>
                                                              </div>
                                                              <div
                                                                className="dropdown-item"
                                                                key="date"
                                                                onClick={[Function]}
                                                                onKeyPress={[Function]}
                                                                role="button"
                                                                tabIndex={0}
                                                              >
                                                                <FormattedMessage
                                                                  defaultMessage="date"
                                                                  id="date"
                                                                  values={Object {}}
                                                                >
                                                                  <span>
                                                                    Date
                                                                  </span>
                                                                </FormattedMessage>
                                                              </div>
                                                            </div>
                                                          </div>
                                                        </div>
                                                      </Dropdown>
                                                    </div>
                                                  </div>
                                                </div>
                                              </FiltersPanel>
                                            </FiltersPanelContainer>
                                          </Connect(FiltersPanelContainer)>
                                        </div>
                                      </div>
                                    </div>
                                  </Stats>
                                </DataParams>
                              </Route>
                            </withRouter(DataParams)>
                          </ResetOnUnmount>
                        </Connect(ResetOnUnmount)>
                      </Connect(Connect(ResetOnUnmount))>
                    </Route>
                  </Switch>
                </main>
              </div>
            </Main>
          </Router>
        </MemoryRouter>
      </IntlProvider>
    </IntlProvider>
  </Connect(IntlProvider)>
</Provider>
`;

exports[`components/main renders a main in /things path 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <Connect(IntlProvider)
    store={
      Object {
        "clearActions": [Function],
        "dispatch": [Function],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      }
    }
  >
    <IntlProvider
      dispatch={[Function]}
      locale="en"
      messages={
        Object {
          "Custom": "Custom",
          "Data": "Data",
          "Delete": "Delete",
          "End date": "End date",
          "Error": "Error",
          "Event stats": "Event stats",
          "Events:": "Events:",
          "Filters": "Filters",
          "Google maps": "Google maps",
          "Group by": "Group by",
          "IP address:": "IP address:",
          "IoT": "IoT",
          "Last observation:": "Last observation:",
          "Login": "Login",
          "Logout": "Logout",
          "MQTT topic:": "MQTT topic:",
          "Measurement stats": "Measurement stats",
          "Measurement type": "Measurement type",
          "Measurements:": "Measurements:",
          "Observation": "Observation",
          "Password": "Password",
          "Real time": "Real time",
          "Request failed": "Request failed",
          "Reset": "Reset",
          "Start date": "Start date",
          "Stats": "Stats",
          "Thing": "Thing",
          "Thing not found": "Thing not found",
          "Things": "Things",
          "Time": "Time",
          "Time period": "Time period",
          "Type": "Type",
          "Username": "Username",
          "avg": "Average",
          "avgByHour": "Average by hour",
          "date": "Date",
          "day": "Day",
          "door-closed": "Door closed",
          "door-opened": "Door opened",
          "en": "English",
          "es": "Spanish",
          "event": "Event",
          "hour": "Hour",
          "humidity": "Humidity",
          "humidity-indoor": "Humidity indoor",
          "humidity-outdoor": "Humidity outdoor",
          "luminosity": "Luminosity",
          "max": "Maximum",
          "maxByHour": "Maximum by hour",
          "measurement": "Mesasurement",
          "min": "Minimum",
          "minByHour": "Minimum by hour",
          "minute": "Minute",
          "month": "Month",
          "second": "Second",
          "stdDev": "Standard deviation",
          "stdDevByHour": "Standard deviation by hour",
          "temperature": "Temperature",
          "temperature-indoor": "Temperature indoor",
          "temperature-outdoor": "Temperature outdoor",
          "thing": "Thing",
          "total": "Total",
          "week": "Week",
          "year": "Year",
        }
      }
      store={
        Object {
          "clearActions": [Function],
          "dispatch": [Function],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        }
      }
      storeSubscription={
        Subscription {
          "listeners": Object {
            "clear": [Function],
            "get": [Function],
            "notify": [Function],
            "subscribe": [Function],
          },
          "onStateChange": [Function],
          "parentSub": undefined,
          "store": Object {
            "clearActions": [Function],
            "dispatch": [Function],
            "getActions": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
          },
          "unsubscribe": [Function],
        }
      }
    >
      <IntlProvider
        key="en"
        locale="en"
        messages={
          Object {
            "Custom": "Custom",
            "Data": "Data",
            "Delete": "Delete",
            "End date": "End date",
            "Error": "Error",
            "Event stats": "Event stats",
            "Events:": "Events:",
            "Filters": "Filters",
            "Google maps": "Google maps",
            "Group by": "Group by",
            "IP address:": "IP address:",
            "IoT": "IoT",
            "Last observation:": "Last observation:",
            "Login": "Login",
            "Logout": "Logout",
            "MQTT topic:": "MQTT topic:",
            "Measurement stats": "Measurement stats",
            "Measurement type": "Measurement type",
            "Measurements:": "Measurements:",
            "Observation": "Observation",
            "Password": "Password",
            "Real time": "Real time",
            "Request failed": "Request failed",
            "Reset": "Reset",
            "Start date": "Start date",
            "Stats": "Stats",
            "Thing": "Thing",
            "Thing not found": "Thing not found",
            "Things": "Things",
            "Time": "Time",
            "Time period": "Time period",
            "Type": "Type",
            "Username": "Username",
            "avg": "Average",
            "avgByHour": "Average by hour",
            "date": "Date",
            "day": "Day",
            "door-closed": "Door closed",
            "door-opened": "Door opened",
            "en": "English",
            "es": "Spanish",
            "event": "Event",
            "hour": "Hour",
            "humidity": "Humidity",
            "humidity-indoor": "Humidity indoor",
            "humidity-outdoor": "Humidity outdoor",
            "luminosity": "Luminosity",
            "max": "Maximum",
            "maxByHour": "Maximum by hour",
            "measurement": "Mesasurement",
            "min": "Minimum",
            "minByHour": "Minimum by hour",
            "minute": "Minute",
            "month": "Month",
            "second": "Second",
            "stdDev": "Standard deviation",
            "stdDevByHour": "Standard deviation by hour",
            "temperature": "Temperature",
            "temperature-indoor": "Temperature indoor",
            "temperature-outdoor": "Temperature outdoor",
            "thing": "Thing",
            "total": "Total",
            "week": "Week",
            "year": "Year",
          }
        }
      >
        <MemoryRouter
          initialEntries={
            Array [
              "/things",
            ]
          }
          keyLength={0}
        >
          <Router
            history={
              Object {
                "action": "POP",
                "block": [Function],
                "canGo": [Function],
                "createHref": [Function],
                "entries": Array [
                  Object {
                    "hash": "",
                    "pathname": "/things",
                    "search": "",
                    "state": undefined,
                  },
                ],
                "go": [Function],
                "goBack": [Function],
                "goForward": [Function],
                "index": 0,
                "length": 1,
                "listen": [Function],
                "location": Object {
                  "hash": "",
                  "pathname": "/things",
                  "search": "",
                  "state": undefined,
                },
                "push": [Function],
                "replace": [Function],
              }
            }
          >
            <Main>
              <div
                className="has-navbar-fixed-top"
              >
                <withRouter(Connect(Navbar))>
                  <Route>
                    <Connect(Navbar)
                      history={
                        Object {
                          "action": "POP",
                          "block": [Function],
                          "canGo": [Function],
                          "createHref": [Function],
                          "entries": Array [
                            Object {
                              "hash": "",
                              "pathname": "/things",
                              "search": "",
                              "state": undefined,
                            },
                          ],
                          "go": [Function],
                          "goBack": [Function],
                          "goForward": [Function],
                          "index": 0,
                          "length": 1,
                          "listen": [Function],
                          "location": Object {
                            "hash": "",
                            "pathname": "/things",
                            "search": "",
                            "state": undefined,
                          },
                          "push": [Function],
                          "replace": [Function],
                        }
                      }
                      location={
                        Object {
                          "hash": "",
                          "pathname": "/things",
                          "search": "",
                          "state": undefined,
                        }
                      }
                      match={
                        Object {
                          "isExact": false,
                          "params": Object {},
                          "path": "/",
                          "url": "/",
                        }
                      }
                    >
                      <Navbar
                        history={
                          Object {
                            "action": "POP",
                            "block": [Function],
                            "canGo": [Function],
                            "createHref": [Function],
                            "entries": Array [
                              Object {
                                "hash": "",
                                "pathname": "/things",
                                "search": "",
                                "state": undefined,
                              },
                            ],
                            "go": [Function],
                            "goBack": [Function],
                            "goForward": [Function],
                            "index": 0,
                            "length": 1,
                            "listen": [Function],
                            "location": Object {
                              "hash": "",
                              "pathname": "/things",
                              "search": "",
                              "state": undefined,
                            },
                            "push": [Function],
                            "replace": [Function],
                          }
                        }
                        isHamburgerMenuExpanded={false}
                        location={
                          Object {
                            "hash": "",
                            "pathname": "/things",
                            "search": "",
                            "state": undefined,
                          }
                        }
                        logout={[Function]}
                        match={
                          Object {
                            "isExact": false,
                            "params": Object {},
                            "path": "/",
                            "url": "/",
                          }
                        }
                        toggleHamburgerMenu={[Function]}
                      >
                        <nav
                          className="navbar has-shadow is-spaced"
                        >
                          <div
                            className="navbar-brand"
                          >
                            <NavLink
                              activeClassName="active"
                              aria-current="page"
                              className="navbar-item"
                              to="/"
                            >
                              <Route
                                path="\\\\/"
                              >
                                <Link
                                  aria-current="page"
                                  className="navbar-item active"
                                  replace={false}
                                  style={Object {}}
                                  to="/"
                                >
                                  <a
                                    aria-current="page"
                                    className="navbar-item active"
                                    href="/"
                                    onClick={[Function]}
                                    style={Object {}}
                                  >
                                    <FormattedMessage
                                      id="IoT"
                                      values={Object {}}
                                    >
                                      <h1
                                        className="title"
                                      >
                                        IoT
                                      </h1>
                                    </FormattedMessage>
                                  </a>
                                </Link>
                              </Route>
                            </NavLink>
                            <div
                              className="navbar-burger burger"
                              data-target="navbar-menu"
                              onClick={[Function]}
                              onKeyPress={[Function]}
                              role="button"
                              tabIndex={0}
                            >
                              <span />
                              <span />
                              <span />
                            </div>
                          </div>
                          <div
                            className="navbar-menu"
                            id="navbar-menu"
                          >
                            <div
                              className="navbar-start"
                            >
                              <NavLink
                                activeClassName="navbar-item-active"
                                aria-current="page"
                                className="navbar-item"
                                to="/things"
                              >
                                <Route
                                  path="\\\\/things"
                                >
                                  <Link
                                    aria-current="page"
                                    className="navbar-item navbar-item-active"
                                    replace={false}
                                    style={Object {}}
                                    to="/things"
                                  >
                                    <a
                                      aria-current="page"
                                      className="navbar-item navbar-item-active"
                                      href="/things"
                                      onClick={[Function]}
                                      style={Object {}}
                                    >
                                      <span
                                        className="icon"
                                      >
                                        <i
                                          className="fas fa-microchip"
                                        />
                                      </span>
                                      <FormattedMessage
                                        id="Things"
                                        values={Object {}}
                                      >
                                        <span>
                                          Things
                                        </span>
                                      </FormattedMessage>
                                    </a>
                                  </Link>
                                </Route>
                              </NavLink>
                              <NavLink
                                activeClassName="navbar-item-active"
                                aria-current="page"
                                className="navbar-item"
                                to="/stats"
                              >
                                <Route
                                  path="\\\\/stats"
                                >
                                  <Link
                                    aria-current={null}
                                    className="navbar-item"
                                    replace={false}
                                    to="/stats"
                                  >
                                    <a
                                      aria-current={null}
                                      className="navbar-item"
                                      href="/stats"
                                      onClick={[Function]}
                                    >
                                      <span
                                        className="icon"
                                      >
                                        <i
                                          className="fas fa-chart-bar"
                                        />
                                      </span>
                                      <FormattedMessage
                                        id="Stats"
                                        values={Object {}}
                                      >
                                        <span>
                                          Stats
                                        </span>
                                      </FormattedMessage>
                                    </a>
                                  </Link>
                                </Route>
                              </NavLink>
                              <NavLink
                                activeClassName="navbar-item-active"
                                aria-current="page"
                                className="navbar-item"
                                to="/data"
                              >
                                <Route
                                  path="\\\\/data"
                                >
                                  <Link
                                    aria-current={null}
                                    className="navbar-item"
                                    replace={false}
                                    to="/data"
                                  >
                                    <a
                                      aria-current={null}
                                      className="navbar-item"
                                      href="/data"
                                      onClick={[Function]}
                                    >
                                      <span
                                        className="icon"
                                      >
                                        <i
                                          className="fas fa-database"
                                        />
                                      </span>
                                      <FormattedMessage
                                        id="Data"
                                        values={Object {}}
                                      >
                                        <span>
                                          Data
                                        </span>
                                      </FormattedMessage>
                                    </a>
                                  </Link>
                                </Route>
                              </NavLink>
                              <NavLink
                                activeClassName="navbar-item-active"
                                aria-current="page"
                                className="navbar-item"
                                to="/real-time"
                              >
                                <Route
                                  path="\\\\/real-time"
                                >
                                  <Link
                                    aria-current={null}
                                    className="navbar-item"
                                    replace={false}
                                    to="/real-time"
                                  >
                                    <a
                                      aria-current={null}
                                      className="navbar-item"
                                      href="/real-time"
                                      onClick={[Function]}
                                    >
                                      <span
                                        className="icon"
                                      >
                                        <i
                                          className="fas fa-clock"
                                        />
                                      </span>
                                      <FormattedMessage
                                        id="Real time"
                                        values={Object {}}
                                      >
                                        <span>
                                          Real time
                                        </span>
                                      </FormattedMessage>
                                    </a>
                                  </Link>
                                </Route>
                              </NavLink>
                            </div>
                            <div
                              className="navbar-end"
                            >
                              <Connect(LanguageSelector)>
                                <LanguageSelector
                                  languages={
                                    Array [
                                      "en",
                                      "es",
                                    ]
                                  }
                                  selectedLanguage="en"
                                  updateLanguage={[Function]}
                                >
                                  <div
                                    className="navbar-item has-dropdown is-hoverable"
                                  >
                                    <button
                                      className="navbar-link button is-white"
                                    >
                                      <LanguageItem
                                        language="en"
                                      >
                                        <span
                                          className="icon is-medium"
                                        >
                                          <i
                                            className="flag-icon flag-icon-gb"
                                          />
                                        </span>
                                        <FormattedMessage
                                          id="en"
                                          values={Object {}}
                                        >
                                          <span>
                                            English
                                          </span>
                                        </FormattedMessage>
                                      </LanguageItem>
                                    </button>
                                    <div
                                      className="navbar-dropdown"
                                    >
                                      <button
                                        className="navbar-item button is-white"
                                        key="es"
                                        onClick={[Function]}
                                      >
                                        <LanguageItem
                                          language="es"
                                        >
                                          <span
                                            className="icon is-medium"
                                          >
                                            <i
                                              className="flag-icon flag-icon-es"
                                            />
                                          </span>
                                          <FormattedMessage
                                            id="es"
                                            values={Object {}}
                                          >
                                            <span>
                                              Spanish
                                            </span>
                                          </FormattedMessage>
                                        </LanguageItem>
                                      </button>
                                    </div>
                                  </div>
                                </LanguageSelector>
                              </Connect(LanguageSelector)>
                              <div
                                className="navbar-item"
                              >
                                <div
                                  className="field"
                                >
                                  <p
                                    className="control"
                                  >
                                    <button
                                      className="button is-primary"
                                      id="logout-button"
                                      onClick={[Function]}
                                    >
                                      <span
                                        className="icon"
                                      >
                                        <i
                                          className="fa fa-user"
                                        />
                                      </span>
                                      <FormattedMessage
                                        id="Logout"
                                        values={Object {}}
                                      >
                                        <span>
                                          Logout
                                        </span>
                                      </FormattedMessage>
                                    </button>
                                  </p>
                                </div>
                              </div>
                            </div>
                          </div>
                        </nav>
                      </Navbar>
                    </Connect(Navbar)>
                  </Route>
                </withRouter(Connect(Navbar))>
                <main>
                  <Switch>
                    <Route
                      component={[Function]}
                      computedMatch={
                        Object {
                          "isExact": true,
                          "params": Object {},
                          "path": "/things",
                          "url": "/things",
                        }
                      }
                      location={
                        Object {
                          "hash": "",
                          "pathname": "/things",
                          "search": "",
                          "state": undefined,
                        }
                      }
                      path="/things"
                    >
                      <Connect(withRouter(Connect(ResetOnUnmount)))
                        history={
                          Object {
                            "action": "POP",
                            "block": [Function],
                            "canGo": [Function],
                            "createHref": [Function],
                            "entries": Array [
                              Object {
                                "hash": "",
                                "pathname": "/things",
                                "search": "",
                                "state": undefined,
                              },
                            ],
                            "go": [Function],
                            "goBack": [Function],
                            "goForward": [Function],
                            "index": 0,
                            "length": 1,
                            "listen": [Function],
                            "location": Object {
                              "hash": "",
                              "pathname": "/things",
                              "search": "",
                              "state": undefined,
                            },
                            "push": [Function],
                            "replace": [Function],
                          }
                        }
                        location={
                          Object {
                            "hash": "",
                            "pathname": "/things",
                            "search": "",
                            "state": undefined,
                          }
                        }
                        match={
                          Object {
                            "isExact": true,
                            "params": Object {},
                            "path": "/things",
                            "url": "/things",
                          }
                        }
                      >
                        <withRouter(Connect(ResetOnUnmount))
                          getThings={[Function]}
                          history={
                            Object {
                              "action": "POP",
                              "block": [Function],
                              "canGo": [Function],
                              "createHref": [Function],
                              "entries": Array [
                                Object {
                                  "hash": "",
                                  "pathname": "/things",
                                  "search": "",
                                  "state": undefined,
                                },
                              ],
                              "go": [Function],
                              "goBack": [Function],
                              "goForward": [Function],
                              "index": 0,
                              "length": 1,
                              "listen": [Function],
                              "location": Object {
                                "hash": "",
                                "pathname": "/things",
                                "search": "",
                                "state": undefined,
                              },
                              "push": [Function],
                              "replace": [Function],
                            }
                          }
                          isLoading={false}
                          location={
                            Object {
                              "hash": "",
                              "pathname": "/things",
                              "search": "",
                              "state": undefined,
                            }
                          }
                          match={
                            Object {
                              "isExact": true,
                              "params": Object {},
                              "path": "/things",
                              "url": "/things",
                            }
                          }
                          selectThing={[Function]}
                          selectedThing={null}
                          shouldShowNotFoundError={false}
                          showNotFoundError={[Function]}
                          things={Array []}
                        >
                          <Route>
                            <Connect(ResetOnUnmount)
                              getThings={[Function]}
                              history={
                                Object {
                                  "action": "POP",
                                  "block": [Function],
                                  "canGo": [Function],
                                  "createHref": [Function],
                                  "entries": Array [
                                    Object {
                                      "hash": "",
                                      "pathname": "/things",
                                      "search": "",
                                      "state": undefined,
                                    },
                                  ],
                                  "go": [Function],
                                  "goBack": [Function],
                                  "goForward": [Function],
                                  "index": 0,
                                  "length": 1,
                                  "listen": [Function],
                                  "location": Object {
                                    "hash": "",
                                    "pathname": "/things",
                                    "search": "",
                                    "state": undefined,
                                  },
                                  "push": [Function],
                                  "replace": [Function],
                                }
                              }
                              isLoading={false}
                              location={
                                Object {
                                  "hash": "",
                                  "pathname": "/things",
                                  "search": "",
                                  "state": undefined,
                                }
                              }
                              match={
                                Object {
                                  "isExact": true,
                                  "params": Object {},
                                  "path": "/things",
                                  "url": "/things",
                                }
                              }
                              selectThing={[Function]}
                              selectedThing={null}
                              shouldShowNotFoundError={false}
                              showNotFoundError={[Function]}
                              things={Array []}
                            >
                              <ResetOnUnmount
                                getThings={[Function]}
                                history={
                                  Object {
                                    "action": "POP",
                                    "block": [Function],
                                    "canGo": [Function],
                                    "createHref": [Function],
                                    "entries": Array [
                                      Object {
                                        "hash": "",
                                        "pathname": "/things",
                                        "search": "",
                                        "state": undefined,
                                      },
                                    ],
                                    "go": [Function],
                                    "goBack": [Function],
                                    "goForward": [Function],
                                    "index": 0,
                                    "length": 1,
                                    "listen": [Function],
                                    "location": Object {
                                      "hash": "",
                                      "pathname": "/things",
                                      "search": "",
                                      "state": undefined,
                                    },
                                    "push": [Function],
                                    "replace": [Function],
                                  }
                                }
                                isLoading={false}
                                location={
                                  Object {
                                    "hash": "",
                                    "pathname": "/things",
                                    "search": "",
                                    "state": undefined,
                                  }
                                }
                                match={
                                  Object {
                                    "isExact": true,
                                    "params": Object {},
                                    "path": "/things",
                                    "url": "/things",
                                  }
                                }
                                reset={[Function]}
                                selectThing={[Function]}
                                selectedThing={null}
                                shouldShowNotFoundError={false}
                                showNotFoundError={[Function]}
                                things={Array []}
                              >
                                <InjectIntl(Things)
                                  getThings={[Function]}
                                  history={
                                    Object {
                                      "action": "POP",
                                      "block": [Function],
                                      "canGo": [Function],
                                      "createHref": [Function],
                                      "entries": Array [
                                        Object {
                                          "hash": "",
                                          "pathname": "/things",
                                          "search": "",
                                          "state": undefined,
                                        },
                                      ],
                                      "go": [Function],
                                      "goBack": [Function],
                                      "goForward": [Function],
                                      "index": 0,
                                      "length": 1,
                                      "listen": [Function],
                                      "location": Object {
                                        "hash": "",
                                        "pathname": "/things",
                                        "search": "",
                                        "state": undefined,
                                      },
                                      "push": [Function],
                                      "replace": [Function],
                                    }
                                  }
                                  isLoading={false}
                                  location={
                                    Object {
                                      "hash": "",
                                      "pathname": "/things",
                                      "search": "",
                                      "state": undefined,
                                    }
                                  }
                                  match={
                                    Object {
                                      "isExact": true,
                                      "params": Object {},
                                      "path": "/things",
                                      "url": "/things",
                                    }
                                  }
                                  reset={[Function]}
                                  selectThing={[Function]}
                                  selectedThing={null}
                                  shouldShowNotFoundError={false}
                                  showNotFoundError={[Function]}
                                  things={Array []}
                                >
                                  <Things
                                    getThings={[Function]}
                                    history={
                                      Object {
                                        "action": "POP",
                                        "block": [Function],
                                        "canGo": [Function],
                                        "createHref": [Function],
                                        "entries": Array [
                                          Object {
                                            "hash": "",
                                            "pathname": "/things",
                                            "search": "",
                                            "state": undefined,
                                          },
                                        ],
                                        "go": [Function],
                                        "goBack": [Function],
                                        "goForward": [Function],
                                        "index": 0,
                                        "length": 1,
                                        "listen": [Function],
                                        "location": Object {
                                          "hash": "",
                                          "pathname": "/things",
                                          "search": "",
                                          "state": undefined,
                                        },
                                        "push": [Function],
                                        "replace": [Function],
                                      }
                                    }
                                    intl={
                                      Object {
                                        "defaultFormats": Object {},
                                        "defaultLocale": "en",
                                        "formatDate": [Function],
                                        "formatHTMLMessage": [Function],
                                        "formatMessage": [Function],
                                        "formatNumber": [Function],
                                        "formatPlural": [Function],
                                        "formatRelative": [Function],
                                        "formatTime": [Function],
                                        "formats": Object {},
                                        "formatters": Object {
                                          "getDateTimeFormat": [Function],
                                          "getMessageFormat": [Function],
                                          "getNumberFormat": [Function],
                                          "getPluralFormat": [Function],
                                          "getRelativeFormat": [Function],
                                        },
                                        "locale": "en",
                                        "messages": Object {
                                          "Custom": "Custom",
                                          "Data": "Data",
                                          "Delete": "Delete",
                                          "End date": "End date",
                                          "Error": "Error",
                                          "Event stats": "Event stats",
                                          "Events:": "Events:",
                                          "Filters": "Filters",
                                          "Google maps": "Google maps",
                                          "Group by": "Group by",
                                          "IP address:": "IP address:",
                                          "IoT": "IoT",
                                          "Last observation:": "Last observation:",
                                          "Login": "Login",
                                          "Logout": "Logout",
                                          "MQTT topic:": "MQTT topic:",
                                          "Measurement stats": "Measurement stats",
                                          "Measurement type": "Measurement type",
                                          "Measurements:": "Measurements:",
                                          "Observation": "Observation",
                                          "Password": "Password",
                                          "Real time": "Real time",
                                          "Request failed": "Request failed",
                                          "Reset": "Reset",
                                          "Start date": "Start date",
                                          "Stats": "Stats",
                                          "Thing": "Thing",
                                          "Thing not found": "Thing not found",
                                          "Things": "Things",
                                          "Time": "Time",
                                          "Time period": "Time period",
                                          "Type": "Type",
                                          "Username": "Username",
                                          "avg": "Average",
                                          "avgByHour": "Average by hour",
                                          "date": "Date",
                                          "day": "Day",
                                          "door-closed": "Door closed",
                                          "door-opened": "Door opened",
                                          "en": "English",
                                          "es": "Spanish",
                                          "event": "Event",
                                          "hour": "Hour",
                                          "humidity": "Humidity",
                                          "humidity-indoor": "Humidity indoor",
                                          "humidity-outdoor": "Humidity outdoor",
                                          "luminosity": "Luminosity",
                                          "max": "Maximum",
                                          "maxByHour": "Maximum by hour",
                                          "measurement": "Mesasurement",
                                          "min": "Minimum",
                                          "minByHour": "Minimum by hour",
                                          "minute": "Minute",
                                          "month": "Month",
                                          "second": "Second",
                                          "stdDev": "Standard deviation",
                                          "stdDevByHour": "Standard deviation by hour",
                                          "temperature": "Temperature",
                                          "temperature-indoor": "Temperature indoor",
                                          "temperature-outdoor": "Temperature outdoor",
                                          "thing": "Thing",
                                          "total": "Total",
                                          "week": "Week",
                                          "year": "Year",
                                        },
                                        "now": [Function],
                                        "onError": [Function],
                                        "textComponent": "span",
                                        "timeZone": null,
                                      }
                                    }
                                    isLoading={false}
                                    location={
                                      Object {
                                        "hash": "",
                                        "pathname": "/things",
                                        "search": "",
                                        "state": undefined,
                                      }
                                    }
                                    match={
                                      Object {
                                        "isExact": true,
                                        "params": Object {},
                                        "path": "/things",
                                        "url": "/things",
                                      }
                                    }
                                    reset={[Function]}
                                    selectThing={[Function]}
                                    selectedThing={null}
                                    shouldShowNotFoundError={false}
                                    showNotFoundError={[Function]}
                                    things={Array []}
                                  >
                                    <div>
                                      <div
                                        className="container is-fluid section"
                                      >
                                        <div
                                          className="columns"
                                        >
                                          <div
                                            className="column is-one-quarter"
                                          />
                                        </div>
                                      </div>
                                      <Modal
                                        isActive={false}
                                        messageStyle="is-danger"
                                        onCloseClick={[Function]}
                                        subTitle="Thing not found"
                                        title="Error"
                                      >
                                        <div
                                          className="modal"
                                        >
                                          <div
                                            className="modal-background"
                                            onClick={[Function]}
                                            onKeyPress={[Function]}
                                            role="button"
                                            tabIndex={0}
                                          />
                                          <div
                                            className="modal-content"
                                          >
                                            <article
                                              className="message is-medium is-danger"
                                            >
                                              <div
                                                className="message-header"
                                              >
                                                <p>
                                                  Error
                                                </p>
                                              </div>
                                              <div
                                                className="message-body has-text-centered"
                                              >
                                                Thing not found
                                              </div>
                                            </article>
                                          </div>
                                          <button
                                            aria-label="close"
                                            className="modal-close is-large"
                                            onClick={[Function]}
                                          />
                                        </div>
                                      </Modal>
                                    </div>
                                  </Things>
                                </InjectIntl(Things)>
                              </ResetOnUnmount>
                            </Connect(ResetOnUnmount)>
                          </Route>
                        </withRouter(Connect(ResetOnUnmount))>
                      </Connect(withRouter(Connect(ResetOnUnmount)))>
                    </Route>
                  </Switch>
                </main>
              </div>
            </Main>
          </Router>
        </MemoryRouter>
      </IntlProvider>
    </IntlProvider>
  </Connect(IntlProvider)>
</Provider>
`;
