// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`components/dropdown renders in active state 1`] = `
<Connect(IntlProvider)
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <IntlProvider
    dispatch={[Function]}
    locale="en"
    messages={
      Object {
        "Custom": "Custom",
        "Data": "Data",
        "Delete": "Delete",
        "End date": "End date",
        "Error": "Error",
        "Event stats": "Event stats",
        "Events:": "Events:",
        "Filters": "Filters",
        "Google maps": "Google maps",
        "Group by": "Group by",
        "IP address:": "IP address:",
        "IoT": "IoT",
        "Last observation:": "Last observation:",
        "Login": "Login",
        "Logout": "Logout",
        "MQTT topic:": "MQTT topic:",
        "Measurement stats": "Measurement stats",
        "Measurement type": "Measurement type",
        "Measurements:": "Measurements:",
        "Observation": "Observation",
        "Password": "Password",
        "Real time": "Real time",
        "Request failed": "Request failed",
        "Reset": "Reset",
        "Start date": "Start date",
        "Stats": "Stats",
        "Thing": "Thing",
        "Thing not found": "Thing not found",
        "Things": "Things",
        "Time": "Time",
        "Time period": "Time period",
        "Type": "Type",
        "Username": "Username",
        "avg": "Average",
        "avgByHour": "Average by hour",
        "date": "Date",
        "day": "Day",
        "door-closed": "Door closed",
        "door-opened": "Door opened",
        "en": "English",
        "es": "Spanish",
        "event": "Event",
        "hour": "Hour",
        "humidity": "Humidity",
        "humidity-indoor": "Humidity indoor",
        "humidity-outdoor": "Humidity outdoor",
        "luminosity": "Luminosity",
        "max": "Maximum",
        "maxByHour": "Maximum by hour",
        "measurement": "Mesasurement",
        "min": "Minimum",
        "minByHour": "Minimum by hour",
        "minute": "Minute",
        "month": "Month",
        "second": "Second",
        "stdDev": "Standard deviation",
        "stdDevByHour": "Standard deviation by hour",
        "temperature": "Temperature",
        "temperature-indoor": "Temperature indoor",
        "temperature-outdoor": "Temperature outdoor",
        "thing": "Thing",
        "total": "Total",
        "week": "Week",
        "year": "Year",
      }
    }
    store={
      Object {
        "clearActions": [Function],
        "dispatch": [Function],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      }
    }
    storeSubscription={
      Subscription {
        "listeners": Object {
          "clear": [Function],
          "get": [Function],
          "notify": [Function],
          "subscribe": [Function],
        },
        "onStateChange": [Function],
        "parentSub": undefined,
        "store": Object {
          "clearActions": [Function],
          "dispatch": [Function],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        },
        "unsubscribe": [Function],
      }
    }
  >
    <IntlProvider
      key="en"
      locale="en"
      messages={
        Object {
          "Custom": "Custom",
          "Data": "Data",
          "Delete": "Delete",
          "End date": "End date",
          "Error": "Error",
          "Event stats": "Event stats",
          "Events:": "Events:",
          "Filters": "Filters",
          "Google maps": "Google maps",
          "Group by": "Group by",
          "IP address:": "IP address:",
          "IoT": "IoT",
          "Last observation:": "Last observation:",
          "Login": "Login",
          "Logout": "Logout",
          "MQTT topic:": "MQTT topic:",
          "Measurement stats": "Measurement stats",
          "Measurement type": "Measurement type",
          "Measurements:": "Measurements:",
          "Observation": "Observation",
          "Password": "Password",
          "Real time": "Real time",
          "Request failed": "Request failed",
          "Reset": "Reset",
          "Start date": "Start date",
          "Stats": "Stats",
          "Thing": "Thing",
          "Thing not found": "Thing not found",
          "Things": "Things",
          "Time": "Time",
          "Time period": "Time period",
          "Type": "Type",
          "Username": "Username",
          "avg": "Average",
          "avgByHour": "Average by hour",
          "date": "Date",
          "day": "Day",
          "door-closed": "Door closed",
          "door-opened": "Door opened",
          "en": "English",
          "es": "Spanish",
          "event": "Event",
          "hour": "Hour",
          "humidity": "Humidity",
          "humidity-indoor": "Humidity indoor",
          "humidity-outdoor": "Humidity outdoor",
          "luminosity": "Luminosity",
          "max": "Maximum",
          "maxByHour": "Maximum by hour",
          "measurement": "Mesasurement",
          "min": "Minimum",
          "minByHour": "Minimum by hour",
          "minute": "Minute",
          "month": "Month",
          "second": "Second",
          "stdDev": "Standard deviation",
          "stdDevByHour": "Standard deviation by hour",
          "temperature": "Temperature",
          "temperature-indoor": "Temperature indoor",
          "temperature-outdoor": "Temperature outdoor",
          "thing": "Thing",
          "total": "Total",
          "week": "Week",
          "year": "Year",
        }
      }
    >
      <Dropdown
        buttonStyle=""
        iconStyle="fa-angle-down"
        isActive={true}
        isDisabled={false}
        isLoading={false}
        items={
          Array [
            "foo",
            "bar",
          ]
        }
        label="Select item"
        onButtonClick={[Function]}
        onItemClick={[Function]}
      >
        <div
          className="dropdown is-active"
        >
          <div
            className="dropdown-trigger"
          >
            <button
              aria-controls="dropdown-menu"
              aria-haspopup="true"
              className="button"
              disabled={false}
              onClick={[Function]}
            >
              <span>
                <FormattedMessage
                  defaultMessage="Select item"
                  id="Select item"
                  values={Object {}}
                >
                  <span>
                    Select item
                  </span>
                </FormattedMessage>
              </span>
              <span
                className="icon is-small"
              >
                <i
                  aria-hidden="true"
                  className="fas fa-angle-down"
                />
              </span>
            </button>
          </div>
          <div
            className="dropdown-menu"
            id="dropdown-menu"
            role="menu"
          >
            <div
              className="dropdown-content"
            >
              <div
                className="dropdown-item"
                key="foo"
                onClick={[Function]}
                onKeyPress={[Function]}
                role="button"
                tabIndex={0}
              >
                <FormattedMessage
                  defaultMessage="foo"
                  id="foo"
                  values={Object {}}
                >
                  <span>
                    foo
                  </span>
                </FormattedMessage>
              </div>
              <div
                className="dropdown-item"
                key="bar"
                onClick={[Function]}
                onKeyPress={[Function]}
                role="button"
                tabIndex={0}
              >
                <FormattedMessage
                  defaultMessage="bar"
                  id="bar"
                  values={Object {}}
                >
                  <span>
                    bar
                  </span>
                </FormattedMessage>
              </div>
            </div>
          </div>
        </div>
      </Dropdown>
    </IntlProvider>
  </IntlProvider>
</Connect(IntlProvider)>
`;

exports[`components/dropdown renders in disabled state 1`] = `
<Connect(IntlProvider)
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <IntlProvider
    dispatch={[Function]}
    locale="en"
    messages={
      Object {
        "Custom": "Custom",
        "Data": "Data",
        "Delete": "Delete",
        "End date": "End date",
        "Error": "Error",
        "Event stats": "Event stats",
        "Events:": "Events:",
        "Filters": "Filters",
        "Google maps": "Google maps",
        "Group by": "Group by",
        "IP address:": "IP address:",
        "IoT": "IoT",
        "Last observation:": "Last observation:",
        "Login": "Login",
        "Logout": "Logout",
        "MQTT topic:": "MQTT topic:",
        "Measurement stats": "Measurement stats",
        "Measurement type": "Measurement type",
        "Measurements:": "Measurements:",
        "Observation": "Observation",
        "Password": "Password",
        "Real time": "Real time",
        "Request failed": "Request failed",
        "Reset": "Reset",
        "Start date": "Start date",
        "Stats": "Stats",
        "Thing": "Thing",
        "Thing not found": "Thing not found",
        "Things": "Things",
        "Time": "Time",
        "Time period": "Time period",
        "Type": "Type",
        "Username": "Username",
        "avg": "Average",
        "avgByHour": "Average by hour",
        "date": "Date",
        "day": "Day",
        "door-closed": "Door closed",
        "door-opened": "Door opened",
        "en": "English",
        "es": "Spanish",
        "event": "Event",
        "hour": "Hour",
        "humidity": "Humidity",
        "humidity-indoor": "Humidity indoor",
        "humidity-outdoor": "Humidity outdoor",
        "luminosity": "Luminosity",
        "max": "Maximum",
        "maxByHour": "Maximum by hour",
        "measurement": "Mesasurement",
        "min": "Minimum",
        "minByHour": "Minimum by hour",
        "minute": "Minute",
        "month": "Month",
        "second": "Second",
        "stdDev": "Standard deviation",
        "stdDevByHour": "Standard deviation by hour",
        "temperature": "Temperature",
        "temperature-indoor": "Temperature indoor",
        "temperature-outdoor": "Temperature outdoor",
        "thing": "Thing",
        "total": "Total",
        "week": "Week",
        "year": "Year",
      }
    }
    store={
      Object {
        "clearActions": [Function],
        "dispatch": [Function],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      }
    }
    storeSubscription={
      Subscription {
        "listeners": Object {
          "clear": [Function],
          "get": [Function],
          "notify": [Function],
          "subscribe": [Function],
        },
        "onStateChange": [Function],
        "parentSub": undefined,
        "store": Object {
          "clearActions": [Function],
          "dispatch": [Function],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        },
        "unsubscribe": [Function],
      }
    }
  >
    <IntlProvider
      key="en"
      locale="en"
      messages={
        Object {
          "Custom": "Custom",
          "Data": "Data",
          "Delete": "Delete",
          "End date": "End date",
          "Error": "Error",
          "Event stats": "Event stats",
          "Events:": "Events:",
          "Filters": "Filters",
          "Google maps": "Google maps",
          "Group by": "Group by",
          "IP address:": "IP address:",
          "IoT": "IoT",
          "Last observation:": "Last observation:",
          "Login": "Login",
          "Logout": "Logout",
          "MQTT topic:": "MQTT topic:",
          "Measurement stats": "Measurement stats",
          "Measurement type": "Measurement type",
          "Measurements:": "Measurements:",
          "Observation": "Observation",
          "Password": "Password",
          "Real time": "Real time",
          "Request failed": "Request failed",
          "Reset": "Reset",
          "Start date": "Start date",
          "Stats": "Stats",
          "Thing": "Thing",
          "Thing not found": "Thing not found",
          "Things": "Things",
          "Time": "Time",
          "Time period": "Time period",
          "Type": "Type",
          "Username": "Username",
          "avg": "Average",
          "avgByHour": "Average by hour",
          "date": "Date",
          "day": "Day",
          "door-closed": "Door closed",
          "door-opened": "Door opened",
          "en": "English",
          "es": "Spanish",
          "event": "Event",
          "hour": "Hour",
          "humidity": "Humidity",
          "humidity-indoor": "Humidity indoor",
          "humidity-outdoor": "Humidity outdoor",
          "luminosity": "Luminosity",
          "max": "Maximum",
          "maxByHour": "Maximum by hour",
          "measurement": "Mesasurement",
          "min": "Minimum",
          "minByHour": "Minimum by hour",
          "minute": "Minute",
          "month": "Month",
          "second": "Second",
          "stdDev": "Standard deviation",
          "stdDevByHour": "Standard deviation by hour",
          "temperature": "Temperature",
          "temperature-indoor": "Temperature indoor",
          "temperature-outdoor": "Temperature outdoor",
          "thing": "Thing",
          "total": "Total",
          "week": "Week",
          "year": "Year",
        }
      }
    >
      <Dropdown
        buttonStyle=""
        iconStyle="fa-angle-down"
        isActive={false}
        isDisabled={true}
        isLoading={false}
        items={
          Array [
            "foo",
            "bar",
          ]
        }
        label="Select item"
        onButtonClick={[Function]}
        onItemClick={[Function]}
      >
        <div
          className="dropdown"
        >
          <div
            className="dropdown-trigger"
          >
            <button
              aria-controls="dropdown-menu"
              aria-haspopup="true"
              className="button"
              disabled={true}
              onClick={[Function]}
            >
              <span>
                <FormattedMessage
                  defaultMessage="Select item"
                  id="Select item"
                  values={Object {}}
                >
                  <span>
                    Select item
                  </span>
                </FormattedMessage>
              </span>
              <span
                className="icon is-small"
              >
                <i
                  aria-hidden="true"
                  className="fas fa-angle-down"
                />
              </span>
            </button>
          </div>
          <div
            className="dropdown-menu"
            id="dropdown-menu"
            role="menu"
          >
            <div
              className="dropdown-content"
            >
              <div
                className="dropdown-item"
                key="foo"
                onClick={[Function]}
                onKeyPress={[Function]}
                role="button"
                tabIndex={0}
              >
                <FormattedMessage
                  defaultMessage="foo"
                  id="foo"
                  values={Object {}}
                >
                  <span>
                    foo
                  </span>
                </FormattedMessage>
              </div>
              <div
                className="dropdown-item"
                key="bar"
                onClick={[Function]}
                onKeyPress={[Function]}
                role="button"
                tabIndex={0}
              >
                <FormattedMessage
                  defaultMessage="bar"
                  id="bar"
                  values={Object {}}
                >
                  <span>
                    bar
                  </span>
                </FormattedMessage>
              </div>
            </div>
          </div>
        </div>
      </Dropdown>
    </IntlProvider>
  </IntlProvider>
</Connect(IntlProvider)>
`;

exports[`components/dropdown renders in initial state 1`] = `
<Connect(IntlProvider)
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <IntlProvider
    dispatch={[Function]}
    locale="en"
    messages={
      Object {
        "Custom": "Custom",
        "Data": "Data",
        "Delete": "Delete",
        "End date": "End date",
        "Error": "Error",
        "Event stats": "Event stats",
        "Events:": "Events:",
        "Filters": "Filters",
        "Google maps": "Google maps",
        "Group by": "Group by",
        "IP address:": "IP address:",
        "IoT": "IoT",
        "Last observation:": "Last observation:",
        "Login": "Login",
        "Logout": "Logout",
        "MQTT topic:": "MQTT topic:",
        "Measurement stats": "Measurement stats",
        "Measurement type": "Measurement type",
        "Measurements:": "Measurements:",
        "Observation": "Observation",
        "Password": "Password",
        "Real time": "Real time",
        "Request failed": "Request failed",
        "Reset": "Reset",
        "Start date": "Start date",
        "Stats": "Stats",
        "Thing": "Thing",
        "Thing not found": "Thing not found",
        "Things": "Things",
        "Time": "Time",
        "Time period": "Time period",
        "Type": "Type",
        "Username": "Username",
        "avg": "Average",
        "avgByHour": "Average by hour",
        "date": "Date",
        "day": "Day",
        "door-closed": "Door closed",
        "door-opened": "Door opened",
        "en": "English",
        "es": "Spanish",
        "event": "Event",
        "hour": "Hour",
        "humidity": "Humidity",
        "humidity-indoor": "Humidity indoor",
        "humidity-outdoor": "Humidity outdoor",
        "luminosity": "Luminosity",
        "max": "Maximum",
        "maxByHour": "Maximum by hour",
        "measurement": "Mesasurement",
        "min": "Minimum",
        "minByHour": "Minimum by hour",
        "minute": "Minute",
        "month": "Month",
        "second": "Second",
        "stdDev": "Standard deviation",
        "stdDevByHour": "Standard deviation by hour",
        "temperature": "Temperature",
        "temperature-indoor": "Temperature indoor",
        "temperature-outdoor": "Temperature outdoor",
        "thing": "Thing",
        "total": "Total",
        "week": "Week",
        "year": "Year",
      }
    }
    store={
      Object {
        "clearActions": [Function],
        "dispatch": [Function],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      }
    }
    storeSubscription={
      Subscription {
        "listeners": Object {
          "clear": [Function],
          "get": [Function],
          "notify": [Function],
          "subscribe": [Function],
        },
        "onStateChange": [Function],
        "parentSub": undefined,
        "store": Object {
          "clearActions": [Function],
          "dispatch": [Function],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        },
        "unsubscribe": [Function],
      }
    }
  >
    <IntlProvider
      key="en"
      locale="en"
      messages={
        Object {
          "Custom": "Custom",
          "Data": "Data",
          "Delete": "Delete",
          "End date": "End date",
          "Error": "Error",
          "Event stats": "Event stats",
          "Events:": "Events:",
          "Filters": "Filters",
          "Google maps": "Google maps",
          "Group by": "Group by",
          "IP address:": "IP address:",
          "IoT": "IoT",
          "Last observation:": "Last observation:",
          "Login": "Login",
          "Logout": "Logout",
          "MQTT topic:": "MQTT topic:",
          "Measurement stats": "Measurement stats",
          "Measurement type": "Measurement type",
          "Measurements:": "Measurements:",
          "Observation": "Observation",
          "Password": "Password",
          "Real time": "Real time",
          "Request failed": "Request failed",
          "Reset": "Reset",
          "Start date": "Start date",
          "Stats": "Stats",
          "Thing": "Thing",
          "Thing not found": "Thing not found",
          "Things": "Things",
          "Time": "Time",
          "Time period": "Time period",
          "Type": "Type",
          "Username": "Username",
          "avg": "Average",
          "avgByHour": "Average by hour",
          "date": "Date",
          "day": "Day",
          "door-closed": "Door closed",
          "door-opened": "Door opened",
          "en": "English",
          "es": "Spanish",
          "event": "Event",
          "hour": "Hour",
          "humidity": "Humidity",
          "humidity-indoor": "Humidity indoor",
          "humidity-outdoor": "Humidity outdoor",
          "luminosity": "Luminosity",
          "max": "Maximum",
          "maxByHour": "Maximum by hour",
          "measurement": "Mesasurement",
          "min": "Minimum",
          "minByHour": "Minimum by hour",
          "minute": "Minute",
          "month": "Month",
          "second": "Second",
          "stdDev": "Standard deviation",
          "stdDevByHour": "Standard deviation by hour",
          "temperature": "Temperature",
          "temperature-indoor": "Temperature indoor",
          "temperature-outdoor": "Temperature outdoor",
          "thing": "Thing",
          "total": "Total",
          "week": "Week",
          "year": "Year",
        }
      }
    >
      <Dropdown
        buttonStyle=""
        iconStyle="fa-angle-down"
        isActive={false}
        isDisabled={false}
        isLoading={false}
        items={
          Array [
            "foo",
            "bar",
          ]
        }
        label="Select item"
        onButtonClick={[Function]}
        onItemClick={[Function]}
      >
        <div
          className="dropdown"
        >
          <div
            className="dropdown-trigger"
          >
            <button
              aria-controls="dropdown-menu"
              aria-haspopup="true"
              className="button"
              disabled={false}
              onClick={[Function]}
            >
              <span>
                <FormattedMessage
                  defaultMessage="Select item"
                  id="Select item"
                  values={Object {}}
                >
                  <span>
                    Select item
                  </span>
                </FormattedMessage>
              </span>
              <span
                className="icon is-small"
              >
                <i
                  aria-hidden="true"
                  className="fas fa-angle-down"
                />
              </span>
            </button>
          </div>
          <div
            className="dropdown-menu"
            id="dropdown-menu"
            role="menu"
          >
            <div
              className="dropdown-content"
            >
              <div
                className="dropdown-item"
                key="foo"
                onClick={[Function]}
                onKeyPress={[Function]}
                role="button"
                tabIndex={0}
              >
                <FormattedMessage
                  defaultMessage="foo"
                  id="foo"
                  values={Object {}}
                >
                  <span>
                    foo
                  </span>
                </FormattedMessage>
              </div>
              <div
                className="dropdown-item"
                key="bar"
                onClick={[Function]}
                onKeyPress={[Function]}
                role="button"
                tabIndex={0}
              >
                <FormattedMessage
                  defaultMessage="bar"
                  id="bar"
                  values={Object {}}
                >
                  <span>
                    bar
                  </span>
                </FormattedMessage>
              </div>
            </div>
          </div>
        </div>
      </Dropdown>
    </IntlProvider>
  </IntlProvider>
</Connect(IntlProvider)>
`;

exports[`components/dropdown renders in loading state 1`] = `
<Connect(IntlProvider)
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <IntlProvider
    dispatch={[Function]}
    locale="en"
    messages={
      Object {
        "Custom": "Custom",
        "Data": "Data",
        "Delete": "Delete",
        "End date": "End date",
        "Error": "Error",
        "Event stats": "Event stats",
        "Events:": "Events:",
        "Filters": "Filters",
        "Google maps": "Google maps",
        "Group by": "Group by",
        "IP address:": "IP address:",
        "IoT": "IoT",
        "Last observation:": "Last observation:",
        "Login": "Login",
        "Logout": "Logout",
        "MQTT topic:": "MQTT topic:",
        "Measurement stats": "Measurement stats",
        "Measurement type": "Measurement type",
        "Measurements:": "Measurements:",
        "Observation": "Observation",
        "Password": "Password",
        "Real time": "Real time",
        "Request failed": "Request failed",
        "Reset": "Reset",
        "Start date": "Start date",
        "Stats": "Stats",
        "Thing": "Thing",
        "Thing not found": "Thing not found",
        "Things": "Things",
        "Time": "Time",
        "Time period": "Time period",
        "Type": "Type",
        "Username": "Username",
        "avg": "Average",
        "avgByHour": "Average by hour",
        "date": "Date",
        "day": "Day",
        "door-closed": "Door closed",
        "door-opened": "Door opened",
        "en": "English",
        "es": "Spanish",
        "event": "Event",
        "hour": "Hour",
        "humidity": "Humidity",
        "humidity-indoor": "Humidity indoor",
        "humidity-outdoor": "Humidity outdoor",
        "luminosity": "Luminosity",
        "max": "Maximum",
        "maxByHour": "Maximum by hour",
        "measurement": "Mesasurement",
        "min": "Minimum",
        "minByHour": "Minimum by hour",
        "minute": "Minute",
        "month": "Month",
        "second": "Second",
        "stdDev": "Standard deviation",
        "stdDevByHour": "Standard deviation by hour",
        "temperature": "Temperature",
        "temperature-indoor": "Temperature indoor",
        "temperature-outdoor": "Temperature outdoor",
        "thing": "Thing",
        "total": "Total",
        "week": "Week",
        "year": "Year",
      }
    }
    store={
      Object {
        "clearActions": [Function],
        "dispatch": [Function],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      }
    }
    storeSubscription={
      Subscription {
        "listeners": Object {
          "clear": [Function],
          "get": [Function],
          "notify": [Function],
          "subscribe": [Function],
        },
        "onStateChange": [Function],
        "parentSub": undefined,
        "store": Object {
          "clearActions": [Function],
          "dispatch": [Function],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        },
        "unsubscribe": [Function],
      }
    }
  >
    <IntlProvider
      key="en"
      locale="en"
      messages={
        Object {
          "Custom": "Custom",
          "Data": "Data",
          "Delete": "Delete",
          "End date": "End date",
          "Error": "Error",
          "Event stats": "Event stats",
          "Events:": "Events:",
          "Filters": "Filters",
          "Google maps": "Google maps",
          "Group by": "Group by",
          "IP address:": "IP address:",
          "IoT": "IoT",
          "Last observation:": "Last observation:",
          "Login": "Login",
          "Logout": "Logout",
          "MQTT topic:": "MQTT topic:",
          "Measurement stats": "Measurement stats",
          "Measurement type": "Measurement type",
          "Measurements:": "Measurements:",
          "Observation": "Observation",
          "Password": "Password",
          "Real time": "Real time",
          "Request failed": "Request failed",
          "Reset": "Reset",
          "Start date": "Start date",
          "Stats": "Stats",
          "Thing": "Thing",
          "Thing not found": "Thing not found",
          "Things": "Things",
          "Time": "Time",
          "Time period": "Time period",
          "Type": "Type",
          "Username": "Username",
          "avg": "Average",
          "avgByHour": "Average by hour",
          "date": "Date",
          "day": "Day",
          "door-closed": "Door closed",
          "door-opened": "Door opened",
          "en": "English",
          "es": "Spanish",
          "event": "Event",
          "hour": "Hour",
          "humidity": "Humidity",
          "humidity-indoor": "Humidity indoor",
          "humidity-outdoor": "Humidity outdoor",
          "luminosity": "Luminosity",
          "max": "Maximum",
          "maxByHour": "Maximum by hour",
          "measurement": "Mesasurement",
          "min": "Minimum",
          "minByHour": "Minimum by hour",
          "minute": "Minute",
          "month": "Month",
          "second": "Second",
          "stdDev": "Standard deviation",
          "stdDevByHour": "Standard deviation by hour",
          "temperature": "Temperature",
          "temperature-indoor": "Temperature indoor",
          "temperature-outdoor": "Temperature outdoor",
          "thing": "Thing",
          "total": "Total",
          "week": "Week",
          "year": "Year",
        }
      }
    >
      <Dropdown
        buttonStyle=""
        iconStyle="fa-angle-down"
        isActive={false}
        isDisabled={false}
        isLoading={true}
        items={
          Array [
            "foo",
            "bar",
          ]
        }
        label="Select item"
        onButtonClick={[Function]}
        onItemClick={[Function]}
      >
        <div
          className="dropdown"
        >
          <div
            className="dropdown-trigger"
          >
            <button
              aria-controls="dropdown-menu"
              aria-haspopup="true"
              className="button is-loading"
              disabled={false}
              onClick={[Function]}
            >
              <span>
                <FormattedMessage
                  defaultMessage="Select item"
                  id="Select item"
                  values={Object {}}
                >
                  <span>
                    Select item
                  </span>
                </FormattedMessage>
              </span>
              <span
                className="icon is-small"
              >
                <i
                  aria-hidden="true"
                  className="fas fa-angle-down"
                />
              </span>
            </button>
          </div>
          <div
            className="dropdown-menu"
            id="dropdown-menu"
            role="menu"
          >
            <div
              className="dropdown-content"
            >
              <div
                className="dropdown-item"
                key="foo"
                onClick={[Function]}
                onKeyPress={[Function]}
                role="button"
                tabIndex={0}
              >
                <FormattedMessage
                  defaultMessage="foo"
                  id="foo"
                  values={Object {}}
                >
                  <span>
                    foo
                  </span>
                </FormattedMessage>
              </div>
              <div
                className="dropdown-item"
                key="bar"
                onClick={[Function]}
                onKeyPress={[Function]}
                role="button"
                tabIndex={0}
              >
                <FormattedMessage
                  defaultMessage="bar"
                  id="bar"
                  values={Object {}}
                >
                  <span>
                    bar
                  </span>
                </FormattedMessage>
              </div>
            </div>
          </div>
        </div>
      </Dropdown>
    </IntlProvider>
  </IntlProvider>
</Connect(IntlProvider)>
`;
