// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`containers/things renders things in initial state and unmounts 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <Connect(IntlProvider)
    store={
      Object {
        "clearActions": [Function],
        "dispatch": [Function],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      }
    }
  >
    <IntlProvider
      dispatch={[Function]}
      locale="en"
      messages={
        Object {
          "Custom": "Custom",
          "Data": "Data",
          "Delete": "Delete",
          "End date": "End date",
          "Error": "Error",
          "Event stats": "Event stats",
          "Events:": "Events:",
          "Filters": "Filters",
          "Google maps": "Google maps",
          "Group by": "Group by",
          "IP address:": "IP address:",
          "IoT": "IoT",
          "Last observation:": "Last observation:",
          "Login": "Login",
          "Logout": "Logout",
          "MQTT topic:": "MQTT topic:",
          "Measurement stats": "Measurement stats",
          "Measurement type": "Measurement type",
          "Measurements:": "Measurements:",
          "Observation": "Observation",
          "Password": "Password",
          "Real time": "Real time",
          "Request failed": "Request failed",
          "Reset": "Reset",
          "Start date": "Start date",
          "Stats": "Stats",
          "Thing": "Thing",
          "Thing not found": "Thing not found",
          "Things": "Things",
          "Time": "Time",
          "Time period": "Time period",
          "Type": "Type",
          "Username": "Username",
          "avg": "Average",
          "avgByHour": "Average by hour",
          "date": "Date",
          "day": "Day",
          "door-closed": "Door closed",
          "door-opened": "Door opened",
          "en": "English",
          "es": "Spanish",
          "event": "Event",
          "hour": "Hour",
          "humidity": "Humidity",
          "humidity-indoor": "Humidity indoor",
          "humidity-outdoor": "Humidity outdoor",
          "luminosity": "Luminosity",
          "max": "Maximum",
          "maxByHour": "Maximum by hour",
          "measurement": "Mesasurement",
          "min": "Minimum",
          "minByHour": "Minimum by hour",
          "minute": "Minute",
          "month": "Month",
          "second": "Second",
          "stdDev": "Standard deviation",
          "stdDevByHour": "Standard deviation by hour",
          "temperature": "Temperature",
          "temperature-indoor": "Temperature indoor",
          "temperature-outdoor": "Temperature outdoor",
          "thing": "Thing",
          "total": "Total",
          "week": "Week",
          "year": "Year",
        }
      }
      store={
        Object {
          "clearActions": [Function],
          "dispatch": [Function],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        }
      }
      storeSubscription={
        Subscription {
          "listeners": Object {
            "clear": [Function],
            "get": [Function],
            "notify": [Function],
            "subscribe": [Function],
          },
          "onStateChange": [Function],
          "parentSub": undefined,
          "store": Object {
            "clearActions": [Function],
            "dispatch": [Function],
            "getActions": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
          },
          "unsubscribe": [Function],
        }
      }
    >
      <IntlProvider
        key="en"
        locale="en"
        messages={
          Object {
            "Custom": "Custom",
            "Data": "Data",
            "Delete": "Delete",
            "End date": "End date",
            "Error": "Error",
            "Event stats": "Event stats",
            "Events:": "Events:",
            "Filters": "Filters",
            "Google maps": "Google maps",
            "Group by": "Group by",
            "IP address:": "IP address:",
            "IoT": "IoT",
            "Last observation:": "Last observation:",
            "Login": "Login",
            "Logout": "Logout",
            "MQTT topic:": "MQTT topic:",
            "Measurement stats": "Measurement stats",
            "Measurement type": "Measurement type",
            "Measurements:": "Measurements:",
            "Observation": "Observation",
            "Password": "Password",
            "Real time": "Real time",
            "Request failed": "Request failed",
            "Reset": "Reset",
            "Start date": "Start date",
            "Stats": "Stats",
            "Thing": "Thing",
            "Thing not found": "Thing not found",
            "Things": "Things",
            "Time": "Time",
            "Time period": "Time period",
            "Type": "Type",
            "Username": "Username",
            "avg": "Average",
            "avgByHour": "Average by hour",
            "date": "Date",
            "day": "Day",
            "door-closed": "Door closed",
            "door-opened": "Door opened",
            "en": "English",
            "es": "Spanish",
            "event": "Event",
            "hour": "Hour",
            "humidity": "Humidity",
            "humidity-indoor": "Humidity indoor",
            "humidity-outdoor": "Humidity outdoor",
            "luminosity": "Luminosity",
            "max": "Maximum",
            "maxByHour": "Maximum by hour",
            "measurement": "Mesasurement",
            "min": "Minimum",
            "minByHour": "Minimum by hour",
            "minute": "Minute",
            "month": "Month",
            "second": "Second",
            "stdDev": "Standard deviation",
            "stdDevByHour": "Standard deviation by hour",
            "temperature": "Temperature",
            "temperature-indoor": "Temperature indoor",
            "temperature-outdoor": "Temperature outdoor",
            "thing": "Thing",
            "total": "Total",
            "week": "Week",
            "year": "Year",
          }
        }
      >
        <MemoryRouter
          initialEntries={
            Array [
              "/",
            ]
          }
          keyLength={0}
        >
          <Router
            history={
              Object {
                "action": "POP",
                "block": [Function],
                "canGo": [Function],
                "createHref": [Function],
                "entries": Array [
                  Object {
                    "hash": "",
                    "pathname": "/",
                    "search": "",
                    "state": undefined,
                  },
                ],
                "go": [Function],
                "goBack": [Function],
                "goForward": [Function],
                "index": 0,
                "length": 1,
                "listen": [Function],
                "location": Object {
                  "hash": "",
                  "pathname": "/",
                  "search": "",
                  "state": undefined,
                },
                "push": [Function],
                "replace": [Function],
              }
            }
          >
            <Connect(withRouter(Connect(ResetOnUnmount)))>
              <withRouter(Connect(ResetOnUnmount))
                getThings={[Function]}
                isLoading={false}
                selectThing={[Function]}
                selectedThing={null}
                shouldShowNotFoundError={false}
                showNotFoundError={[Function]}
                things={Array []}
              >
                <Route>
                  <Connect(ResetOnUnmount)
                    getThings={[Function]}
                    history={
                      Object {
                        "action": "POP",
                        "block": [Function],
                        "canGo": [Function],
                        "createHref": [Function],
                        "entries": Array [
                          Object {
                            "hash": "",
                            "pathname": "/",
                            "search": "",
                            "state": undefined,
                          },
                        ],
                        "go": [Function],
                        "goBack": [Function],
                        "goForward": [Function],
                        "index": 0,
                        "length": 1,
                        "listen": [Function],
                        "location": Object {
                          "hash": "",
                          "pathname": "/",
                          "search": "",
                          "state": undefined,
                        },
                        "push": [Function],
                        "replace": [Function],
                      }
                    }
                    isLoading={false}
                    location={
                      Object {
                        "hash": "",
                        "pathname": "/",
                        "search": "",
                        "state": undefined,
                      }
                    }
                    match={
                      Object {
                        "isExact": true,
                        "params": Object {},
                        "path": "/",
                        "url": "/",
                      }
                    }
                    selectThing={[Function]}
                    selectedThing={null}
                    shouldShowNotFoundError={false}
                    showNotFoundError={[Function]}
                    things={Array []}
                  >
                    <ResetOnUnmount
                      getThings={[Function]}
                      history={
                        Object {
                          "action": "POP",
                          "block": [Function],
                          "canGo": [Function],
                          "createHref": [Function],
                          "entries": Array [
                            Object {
                              "hash": "",
                              "pathname": "/",
                              "search": "",
                              "state": undefined,
                            },
                          ],
                          "go": [Function],
                          "goBack": [Function],
                          "goForward": [Function],
                          "index": 0,
                          "length": 1,
                          "listen": [Function],
                          "location": Object {
                            "hash": "",
                            "pathname": "/",
                            "search": "",
                            "state": undefined,
                          },
                          "push": [Function],
                          "replace": [Function],
                        }
                      }
                      isLoading={false}
                      location={
                        Object {
                          "hash": "",
                          "pathname": "/",
                          "search": "",
                          "state": undefined,
                        }
                      }
                      match={
                        Object {
                          "isExact": true,
                          "params": Object {},
                          "path": "/",
                          "url": "/",
                        }
                      }
                      reset={[Function]}
                      selectThing={[Function]}
                      selectedThing={null}
                      shouldShowNotFoundError={false}
                      showNotFoundError={[Function]}
                      things={Array []}
                    >
                      <InjectIntl(Things)
                        getThings={[Function]}
                        history={
                          Object {
                            "action": "POP",
                            "block": [Function],
                            "canGo": [Function],
                            "createHref": [Function],
                            "entries": Array [
                              Object {
                                "hash": "",
                                "pathname": "/",
                                "search": "",
                                "state": undefined,
                              },
                            ],
                            "go": [Function],
                            "goBack": [Function],
                            "goForward": [Function],
                            "index": 0,
                            "length": 1,
                            "listen": [Function],
                            "location": Object {
                              "hash": "",
                              "pathname": "/",
                              "search": "",
                              "state": undefined,
                            },
                            "push": [Function],
                            "replace": [Function],
                          }
                        }
                        isLoading={false}
                        location={
                          Object {
                            "hash": "",
                            "pathname": "/",
                            "search": "",
                            "state": undefined,
                          }
                        }
                        match={
                          Object {
                            "isExact": true,
                            "params": Object {},
                            "path": "/",
                            "url": "/",
                          }
                        }
                        reset={[Function]}
                        selectThing={[Function]}
                        selectedThing={null}
                        shouldShowNotFoundError={false}
                        showNotFoundError={[Function]}
                        things={Array []}
                      >
                        <Things
                          getThings={[Function]}
                          history={
                            Object {
                              "action": "POP",
                              "block": [Function],
                              "canGo": [Function],
                              "createHref": [Function],
                              "entries": Array [
                                Object {
                                  "hash": "",
                                  "pathname": "/",
                                  "search": "",
                                  "state": undefined,
                                },
                              ],
                              "go": [Function],
                              "goBack": [Function],
                              "goForward": [Function],
                              "index": 0,
                              "length": 1,
                              "listen": [Function],
                              "location": Object {
                                "hash": "",
                                "pathname": "/",
                                "search": "",
                                "state": undefined,
                              },
                              "push": [Function],
                              "replace": [Function],
                            }
                          }
                          intl={
                            Object {
                              "defaultFormats": Object {},
                              "defaultLocale": "en",
                              "formatDate": [Function],
                              "formatHTMLMessage": [Function],
                              "formatMessage": [Function],
                              "formatNumber": [Function],
                              "formatPlural": [Function],
                              "formatRelative": [Function],
                              "formatTime": [Function],
                              "formats": Object {},
                              "formatters": Object {
                                "getDateTimeFormat": [Function],
                                "getMessageFormat": [Function],
                                "getNumberFormat": [Function],
                                "getPluralFormat": [Function],
                                "getRelativeFormat": [Function],
                              },
                              "locale": "en",
                              "messages": Object {
                                "Custom": "Custom",
                                "Data": "Data",
                                "Delete": "Delete",
                                "End date": "End date",
                                "Error": "Error",
                                "Event stats": "Event stats",
                                "Events:": "Events:",
                                "Filters": "Filters",
                                "Google maps": "Google maps",
                                "Group by": "Group by",
                                "IP address:": "IP address:",
                                "IoT": "IoT",
                                "Last observation:": "Last observation:",
                                "Login": "Login",
                                "Logout": "Logout",
                                "MQTT topic:": "MQTT topic:",
                                "Measurement stats": "Measurement stats",
                                "Measurement type": "Measurement type",
                                "Measurements:": "Measurements:",
                                "Observation": "Observation",
                                "Password": "Password",
                                "Real time": "Real time",
                                "Request failed": "Request failed",
                                "Reset": "Reset",
                                "Start date": "Start date",
                                "Stats": "Stats",
                                "Thing": "Thing",
                                "Thing not found": "Thing not found",
                                "Things": "Things",
                                "Time": "Time",
                                "Time period": "Time period",
                                "Type": "Type",
                                "Username": "Username",
                                "avg": "Average",
                                "avgByHour": "Average by hour",
                                "date": "Date",
                                "day": "Day",
                                "door-closed": "Door closed",
                                "door-opened": "Door opened",
                                "en": "English",
                                "es": "Spanish",
                                "event": "Event",
                                "hour": "Hour",
                                "humidity": "Humidity",
                                "humidity-indoor": "Humidity indoor",
                                "humidity-outdoor": "Humidity outdoor",
                                "luminosity": "Luminosity",
                                "max": "Maximum",
                                "maxByHour": "Maximum by hour",
                                "measurement": "Mesasurement",
                                "min": "Minimum",
                                "minByHour": "Minimum by hour",
                                "minute": "Minute",
                                "month": "Month",
                                "second": "Second",
                                "stdDev": "Standard deviation",
                                "stdDevByHour": "Standard deviation by hour",
                                "temperature": "Temperature",
                                "temperature-indoor": "Temperature indoor",
                                "temperature-outdoor": "Temperature outdoor",
                                "thing": "Thing",
                                "total": "Total",
                                "week": "Week",
                                "year": "Year",
                              },
                              "now": [Function],
                              "onError": [Function],
                              "textComponent": "span",
                              "timeZone": null,
                            }
                          }
                          isLoading={false}
                          location={
                            Object {
                              "hash": "",
                              "pathname": "/",
                              "search": "",
                              "state": undefined,
                            }
                          }
                          match={
                            Object {
                              "isExact": true,
                              "params": Object {},
                              "path": "/",
                              "url": "/",
                            }
                          }
                          reset={[Function]}
                          selectThing={[Function]}
                          selectedThing={null}
                          shouldShowNotFoundError={false}
                          showNotFoundError={[Function]}
                          things={Array []}
                        >
                          <div>
                            <div
                              className="container is-fluid section"
                            >
                              <div
                                className="columns"
                              >
                                <div
                                  className="column is-one-quarter"
                                />
                              </div>
                            </div>
                            <Modal
                              isActive={false}
                              messageStyle="is-danger"
                              onCloseClick={[Function]}
                              subTitle="Thing not found"
                              title="Error"
                            >
                              <div
                                className="modal"
                              >
                                <div
                                  className="modal-background"
                                  onClick={[Function]}
                                  onKeyPress={[Function]}
                                  role="button"
                                  tabIndex={0}
                                />
                                <div
                                  className="modal-content"
                                >
                                  <article
                                    className="message is-medium is-danger"
                                  >
                                    <div
                                      className="message-header"
                                    >
                                      <p>
                                        Error
                                      </p>
                                    </div>
                                    <div
                                      className="message-body has-text-centered"
                                    >
                                      Thing not found
                                    </div>
                                  </article>
                                </div>
                                <button
                                  aria-label="close"
                                  className="modal-close is-large"
                                  onClick={[Function]}
                                />
                              </div>
                            </Modal>
                          </div>
                        </Things>
                      </InjectIntl(Things)>
                    </ResetOnUnmount>
                  </Connect(ResetOnUnmount)>
                </Route>
              </withRouter(Connect(ResetOnUnmount))>
            </Connect(withRouter(Connect(ResetOnUnmount)))>
          </Router>
        </MemoryRouter>
      </IntlProvider>
    </IntlProvider>
  </Connect(IntlProvider)>
</Provider>
`;

exports[`containers/things renders things in loading state 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <Connect(IntlProvider)
    store={
      Object {
        "clearActions": [Function],
        "dispatch": [Function],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      }
    }
  >
    <IntlProvider
      dispatch={[Function]}
      locale="en"
      messages={
        Object {
          "Custom": "Custom",
          "Data": "Data",
          "Delete": "Delete",
          "End date": "End date",
          "Error": "Error",
          "Event stats": "Event stats",
          "Events:": "Events:",
          "Filters": "Filters",
          "Google maps": "Google maps",
          "Group by": "Group by",
          "IP address:": "IP address:",
          "IoT": "IoT",
          "Last observation:": "Last observation:",
          "Login": "Login",
          "Logout": "Logout",
          "MQTT topic:": "MQTT topic:",
          "Measurement stats": "Measurement stats",
          "Measurement type": "Measurement type",
          "Measurements:": "Measurements:",
          "Observation": "Observation",
          "Password": "Password",
          "Real time": "Real time",
          "Request failed": "Request failed",
          "Reset": "Reset",
          "Start date": "Start date",
          "Stats": "Stats",
          "Thing": "Thing",
          "Thing not found": "Thing not found",
          "Things": "Things",
          "Time": "Time",
          "Time period": "Time period",
          "Type": "Type",
          "Username": "Username",
          "avg": "Average",
          "avgByHour": "Average by hour",
          "date": "Date",
          "day": "Day",
          "door-closed": "Door closed",
          "door-opened": "Door opened",
          "en": "English",
          "es": "Spanish",
          "event": "Event",
          "hour": "Hour",
          "humidity": "Humidity",
          "humidity-indoor": "Humidity indoor",
          "humidity-outdoor": "Humidity outdoor",
          "luminosity": "Luminosity",
          "max": "Maximum",
          "maxByHour": "Maximum by hour",
          "measurement": "Mesasurement",
          "min": "Minimum",
          "minByHour": "Minimum by hour",
          "minute": "Minute",
          "month": "Month",
          "second": "Second",
          "stdDev": "Standard deviation",
          "stdDevByHour": "Standard deviation by hour",
          "temperature": "Temperature",
          "temperature-indoor": "Temperature indoor",
          "temperature-outdoor": "Temperature outdoor",
          "thing": "Thing",
          "total": "Total",
          "week": "Week",
          "year": "Year",
        }
      }
      store={
        Object {
          "clearActions": [Function],
          "dispatch": [Function],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        }
      }
      storeSubscription={
        Subscription {
          "listeners": Object {
            "clear": [Function],
            "get": [Function],
            "notify": [Function],
            "subscribe": [Function],
          },
          "onStateChange": [Function],
          "parentSub": undefined,
          "store": Object {
            "clearActions": [Function],
            "dispatch": [Function],
            "getActions": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
          },
          "unsubscribe": [Function],
        }
      }
    >
      <IntlProvider
        key="en"
        locale="en"
        messages={
          Object {
            "Custom": "Custom",
            "Data": "Data",
            "Delete": "Delete",
            "End date": "End date",
            "Error": "Error",
            "Event stats": "Event stats",
            "Events:": "Events:",
            "Filters": "Filters",
            "Google maps": "Google maps",
            "Group by": "Group by",
            "IP address:": "IP address:",
            "IoT": "IoT",
            "Last observation:": "Last observation:",
            "Login": "Login",
            "Logout": "Logout",
            "MQTT topic:": "MQTT topic:",
            "Measurement stats": "Measurement stats",
            "Measurement type": "Measurement type",
            "Measurements:": "Measurements:",
            "Observation": "Observation",
            "Password": "Password",
            "Real time": "Real time",
            "Request failed": "Request failed",
            "Reset": "Reset",
            "Start date": "Start date",
            "Stats": "Stats",
            "Thing": "Thing",
            "Thing not found": "Thing not found",
            "Things": "Things",
            "Time": "Time",
            "Time period": "Time period",
            "Type": "Type",
            "Username": "Username",
            "avg": "Average",
            "avgByHour": "Average by hour",
            "date": "Date",
            "day": "Day",
            "door-closed": "Door closed",
            "door-opened": "Door opened",
            "en": "English",
            "es": "Spanish",
            "event": "Event",
            "hour": "Hour",
            "humidity": "Humidity",
            "humidity-indoor": "Humidity indoor",
            "humidity-outdoor": "Humidity outdoor",
            "luminosity": "Luminosity",
            "max": "Maximum",
            "maxByHour": "Maximum by hour",
            "measurement": "Mesasurement",
            "min": "Minimum",
            "minByHour": "Minimum by hour",
            "minute": "Minute",
            "month": "Month",
            "second": "Second",
            "stdDev": "Standard deviation",
            "stdDevByHour": "Standard deviation by hour",
            "temperature": "Temperature",
            "temperature-indoor": "Temperature indoor",
            "temperature-outdoor": "Temperature outdoor",
            "thing": "Thing",
            "total": "Total",
            "week": "Week",
            "year": "Year",
          }
        }
      >
        <MemoryRouter
          initialEntries={
            Array [
              "/",
            ]
          }
          keyLength={0}
        >
          <Router
            history={
              Object {
                "action": "POP",
                "block": [Function],
                "canGo": [Function],
                "createHref": [Function],
                "entries": Array [
                  Object {
                    "hash": "",
                    "pathname": "/",
                    "search": "",
                    "state": undefined,
                  },
                ],
                "go": [Function],
                "goBack": [Function],
                "goForward": [Function],
                "index": 0,
                "length": 1,
                "listen": [Function],
                "location": Object {
                  "hash": "",
                  "pathname": "/",
                  "search": "",
                  "state": undefined,
                },
                "push": [Function],
                "replace": [Function],
              }
            }
          >
            <Connect(withRouter(Connect(ResetOnUnmount)))>
              <withRouter(Connect(ResetOnUnmount))
                getThings={[Function]}
                isLoading={true}
                selectThing={[Function]}
                selectedThing={null}
                shouldShowNotFoundError={false}
                showNotFoundError={[Function]}
                things={Array []}
              >
                <Route>
                  <Connect(ResetOnUnmount)
                    getThings={[Function]}
                    history={
                      Object {
                        "action": "POP",
                        "block": [Function],
                        "canGo": [Function],
                        "createHref": [Function],
                        "entries": Array [
                          Object {
                            "hash": "",
                            "pathname": "/",
                            "search": "",
                            "state": undefined,
                          },
                        ],
                        "go": [Function],
                        "goBack": [Function],
                        "goForward": [Function],
                        "index": 0,
                        "length": 1,
                        "listen": [Function],
                        "location": Object {
                          "hash": "",
                          "pathname": "/",
                          "search": "",
                          "state": undefined,
                        },
                        "push": [Function],
                        "replace": [Function],
                      }
                    }
                    isLoading={true}
                    location={
                      Object {
                        "hash": "",
                        "pathname": "/",
                        "search": "",
                        "state": undefined,
                      }
                    }
                    match={
                      Object {
                        "isExact": true,
                        "params": Object {},
                        "path": "/",
                        "url": "/",
                      }
                    }
                    selectThing={[Function]}
                    selectedThing={null}
                    shouldShowNotFoundError={false}
                    showNotFoundError={[Function]}
                    things={Array []}
                  >
                    <ResetOnUnmount
                      getThings={[Function]}
                      history={
                        Object {
                          "action": "POP",
                          "block": [Function],
                          "canGo": [Function],
                          "createHref": [Function],
                          "entries": Array [
                            Object {
                              "hash": "",
                              "pathname": "/",
                              "search": "",
                              "state": undefined,
                            },
                          ],
                          "go": [Function],
                          "goBack": [Function],
                          "goForward": [Function],
                          "index": 0,
                          "length": 1,
                          "listen": [Function],
                          "location": Object {
                            "hash": "",
                            "pathname": "/",
                            "search": "",
                            "state": undefined,
                          },
                          "push": [Function],
                          "replace": [Function],
                        }
                      }
                      isLoading={true}
                      location={
                        Object {
                          "hash": "",
                          "pathname": "/",
                          "search": "",
                          "state": undefined,
                        }
                      }
                      match={
                        Object {
                          "isExact": true,
                          "params": Object {},
                          "path": "/",
                          "url": "/",
                        }
                      }
                      reset={[Function]}
                      selectThing={[Function]}
                      selectedThing={null}
                      shouldShowNotFoundError={false}
                      showNotFoundError={[Function]}
                      things={Array []}
                    >
                      <InjectIntl(Things)
                        getThings={[Function]}
                        history={
                          Object {
                            "action": "POP",
                            "block": [Function],
                            "canGo": [Function],
                            "createHref": [Function],
                            "entries": Array [
                              Object {
                                "hash": "",
                                "pathname": "/",
                                "search": "",
                                "state": undefined,
                              },
                            ],
                            "go": [Function],
                            "goBack": [Function],
                            "goForward": [Function],
                            "index": 0,
                            "length": 1,
                            "listen": [Function],
                            "location": Object {
                              "hash": "",
                              "pathname": "/",
                              "search": "",
                              "state": undefined,
                            },
                            "push": [Function],
                            "replace": [Function],
                          }
                        }
                        isLoading={true}
                        location={
                          Object {
                            "hash": "",
                            "pathname": "/",
                            "search": "",
                            "state": undefined,
                          }
                        }
                        match={
                          Object {
                            "isExact": true,
                            "params": Object {},
                            "path": "/",
                            "url": "/",
                          }
                        }
                        reset={[Function]}
                        selectThing={[Function]}
                        selectedThing={null}
                        shouldShowNotFoundError={false}
                        showNotFoundError={[Function]}
                        things={Array []}
                      >
                        <Things
                          getThings={[Function]}
                          history={
                            Object {
                              "action": "POP",
                              "block": [Function],
                              "canGo": [Function],
                              "createHref": [Function],
                              "entries": Array [
                                Object {
                                  "hash": "",
                                  "pathname": "/",
                                  "search": "",
                                  "state": undefined,
                                },
                              ],
                              "go": [Function],
                              "goBack": [Function],
                              "goForward": [Function],
                              "index": 0,
                              "length": 1,
                              "listen": [Function],
                              "location": Object {
                                "hash": "",
                                "pathname": "/",
                                "search": "",
                                "state": undefined,
                              },
                              "push": [Function],
                              "replace": [Function],
                            }
                          }
                          intl={
                            Object {
                              "defaultFormats": Object {},
                              "defaultLocale": "en",
                              "formatDate": [Function],
                              "formatHTMLMessage": [Function],
                              "formatMessage": [Function],
                              "formatNumber": [Function],
                              "formatPlural": [Function],
                              "formatRelative": [Function],
                              "formatTime": [Function],
                              "formats": Object {},
                              "formatters": Object {
                                "getDateTimeFormat": [Function],
                                "getMessageFormat": [Function],
                                "getNumberFormat": [Function],
                                "getPluralFormat": [Function],
                                "getRelativeFormat": [Function],
                              },
                              "locale": "en",
                              "messages": Object {
                                "Custom": "Custom",
                                "Data": "Data",
                                "Delete": "Delete",
                                "End date": "End date",
                                "Error": "Error",
                                "Event stats": "Event stats",
                                "Events:": "Events:",
                                "Filters": "Filters",
                                "Google maps": "Google maps",
                                "Group by": "Group by",
                                "IP address:": "IP address:",
                                "IoT": "IoT",
                                "Last observation:": "Last observation:",
                                "Login": "Login",
                                "Logout": "Logout",
                                "MQTT topic:": "MQTT topic:",
                                "Measurement stats": "Measurement stats",
                                "Measurement type": "Measurement type",
                                "Measurements:": "Measurements:",
                                "Observation": "Observation",
                                "Password": "Password",
                                "Real time": "Real time",
                                "Request failed": "Request failed",
                                "Reset": "Reset",
                                "Start date": "Start date",
                                "Stats": "Stats",
                                "Thing": "Thing",
                                "Thing not found": "Thing not found",
                                "Things": "Things",
                                "Time": "Time",
                                "Time period": "Time period",
                                "Type": "Type",
                                "Username": "Username",
                                "avg": "Average",
                                "avgByHour": "Average by hour",
                                "date": "Date",
                                "day": "Day",
                                "door-closed": "Door closed",
                                "door-opened": "Door opened",
                                "en": "English",
                                "es": "Spanish",
                                "event": "Event",
                                "hour": "Hour",
                                "humidity": "Humidity",
                                "humidity-indoor": "Humidity indoor",
                                "humidity-outdoor": "Humidity outdoor",
                                "luminosity": "Luminosity",
                                "max": "Maximum",
                                "maxByHour": "Maximum by hour",
                                "measurement": "Mesasurement",
                                "min": "Minimum",
                                "minByHour": "Minimum by hour",
                                "minute": "Minute",
                                "month": "Month",
                                "second": "Second",
                                "stdDev": "Standard deviation",
                                "stdDevByHour": "Standard deviation by hour",
                                "temperature": "Temperature",
                                "temperature-indoor": "Temperature indoor",
                                "temperature-outdoor": "Temperature outdoor",
                                "thing": "Thing",
                                "total": "Total",
                                "week": "Week",
                                "year": "Year",
                              },
                              "now": [Function],
                              "onError": [Function],
                              "textComponent": "span",
                              "timeZone": null,
                            }
                          }
                          isLoading={true}
                          location={
                            Object {
                              "hash": "",
                              "pathname": "/",
                              "search": "",
                              "state": undefined,
                            }
                          }
                          match={
                            Object {
                              "isExact": true,
                              "params": Object {},
                              "path": "/",
                              "url": "/",
                            }
                          }
                          reset={[Function]}
                          selectThing={[Function]}
                          selectedThing={null}
                          shouldShowNotFoundError={false}
                          showNotFoundError={[Function]}
                          things={Array []}
                        >
                          <Loader>
                            <div
                              className="is-horizontal-center"
                            >
                              <figure
                                className="image is-128x128"
                              >
                                <img
                                  alt="Loader"
                                  src="test-file-stub"
                                />
                              </figure>
                            </div>
                          </Loader>
                        </Things>
                      </InjectIntl(Things)>
                    </ResetOnUnmount>
                  </Connect(ResetOnUnmount)>
                </Route>
              </withRouter(Connect(ResetOnUnmount))>
            </Connect(withRouter(Connect(ResetOnUnmount)))>
          </Router>
        </MemoryRouter>
      </IntlProvider>
    </IntlProvider>
  </Connect(IntlProvider)>
</Provider>
`;

exports[`containers/things renders things with loaded things 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <Connect(IntlProvider)
    store={
      Object {
        "clearActions": [Function],
        "dispatch": [Function],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      }
    }
  >
    <IntlProvider
      dispatch={[Function]}
      locale="en"
      messages={
        Object {
          "Custom": "Custom",
          "Data": "Data",
          "Delete": "Delete",
          "End date": "End date",
          "Error": "Error",
          "Event stats": "Event stats",
          "Events:": "Events:",
          "Filters": "Filters",
          "Google maps": "Google maps",
          "Group by": "Group by",
          "IP address:": "IP address:",
          "IoT": "IoT",
          "Last observation:": "Last observation:",
          "Login": "Login",
          "Logout": "Logout",
          "MQTT topic:": "MQTT topic:",
          "Measurement stats": "Measurement stats",
          "Measurement type": "Measurement type",
          "Measurements:": "Measurements:",
          "Observation": "Observation",
          "Password": "Password",
          "Real time": "Real time",
          "Request failed": "Request failed",
          "Reset": "Reset",
          "Start date": "Start date",
          "Stats": "Stats",
          "Thing": "Thing",
          "Thing not found": "Thing not found",
          "Things": "Things",
          "Time": "Time",
          "Time period": "Time period",
          "Type": "Type",
          "Username": "Username",
          "avg": "Average",
          "avgByHour": "Average by hour",
          "date": "Date",
          "day": "Day",
          "door-closed": "Door closed",
          "door-opened": "Door opened",
          "en": "English",
          "es": "Spanish",
          "event": "Event",
          "hour": "Hour",
          "humidity": "Humidity",
          "humidity-indoor": "Humidity indoor",
          "humidity-outdoor": "Humidity outdoor",
          "luminosity": "Luminosity",
          "max": "Maximum",
          "maxByHour": "Maximum by hour",
          "measurement": "Mesasurement",
          "min": "Minimum",
          "minByHour": "Minimum by hour",
          "minute": "Minute",
          "month": "Month",
          "second": "Second",
          "stdDev": "Standard deviation",
          "stdDevByHour": "Standard deviation by hour",
          "temperature": "Temperature",
          "temperature-indoor": "Temperature indoor",
          "temperature-outdoor": "Temperature outdoor",
          "thing": "Thing",
          "total": "Total",
          "week": "Week",
          "year": "Year",
        }
      }
      store={
        Object {
          "clearActions": [Function],
          "dispatch": [Function],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        }
      }
      storeSubscription={
        Subscription {
          "listeners": Object {
            "clear": [Function],
            "get": [Function],
            "notify": [Function],
            "subscribe": [Function],
          },
          "onStateChange": [Function],
          "parentSub": undefined,
          "store": Object {
            "clearActions": [Function],
            "dispatch": [Function],
            "getActions": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
          },
          "unsubscribe": [Function],
        }
      }
    >
      <IntlProvider
        key="en"
        locale="en"
        messages={
          Object {
            "Custom": "Custom",
            "Data": "Data",
            "Delete": "Delete",
            "End date": "End date",
            "Error": "Error",
            "Event stats": "Event stats",
            "Events:": "Events:",
            "Filters": "Filters",
            "Google maps": "Google maps",
            "Group by": "Group by",
            "IP address:": "IP address:",
            "IoT": "IoT",
            "Last observation:": "Last observation:",
            "Login": "Login",
            "Logout": "Logout",
            "MQTT topic:": "MQTT topic:",
            "Measurement stats": "Measurement stats",
            "Measurement type": "Measurement type",
            "Measurements:": "Measurements:",
            "Observation": "Observation",
            "Password": "Password",
            "Real time": "Real time",
            "Request failed": "Request failed",
            "Reset": "Reset",
            "Start date": "Start date",
            "Stats": "Stats",
            "Thing": "Thing",
            "Thing not found": "Thing not found",
            "Things": "Things",
            "Time": "Time",
            "Time period": "Time period",
            "Type": "Type",
            "Username": "Username",
            "avg": "Average",
            "avgByHour": "Average by hour",
            "date": "Date",
            "day": "Day",
            "door-closed": "Door closed",
            "door-opened": "Door opened",
            "en": "English",
            "es": "Spanish",
            "event": "Event",
            "hour": "Hour",
            "humidity": "Humidity",
            "humidity-indoor": "Humidity indoor",
            "humidity-outdoor": "Humidity outdoor",
            "luminosity": "Luminosity",
            "max": "Maximum",
            "maxByHour": "Maximum by hour",
            "measurement": "Mesasurement",
            "min": "Minimum",
            "minByHour": "Minimum by hour",
            "minute": "Minute",
            "month": "Month",
            "second": "Second",
            "stdDev": "Standard deviation",
            "stdDevByHour": "Standard deviation by hour",
            "temperature": "Temperature",
            "temperature-indoor": "Temperature indoor",
            "temperature-outdoor": "Temperature outdoor",
            "thing": "Thing",
            "total": "Total",
            "week": "Week",
            "year": "Year",
          }
        }
      >
        <MemoryRouter
          initialEntries={
            Array [
              "/",
            ]
          }
          keyLength={0}
        >
          <Router
            history={
              Object {
                "action": "POP",
                "block": [Function],
                "canGo": [Function],
                "createHref": [Function],
                "entries": Array [
                  Object {
                    "hash": "",
                    "pathname": "/",
                    "search": "",
                    "state": undefined,
                  },
                ],
                "go": [Function],
                "goBack": [Function],
                "goForward": [Function],
                "index": 0,
                "length": 1,
                "listen": [Function],
                "location": Object {
                  "hash": "",
                  "pathname": "/",
                  "search": "",
                  "state": undefined,
                },
                "push": [Function],
                "replace": [Function],
              }
            }
          >
            <Connect(withRouter(Connect(ResetOnUnmount)))>
              <withRouter(Connect(ResetOnUnmount))
                getThings={[Function]}
                isLoading={false}
                selectThing={[Function]}
                selectedThing={null}
                showNotFoundError={[Function]}
                things={
                  Array [
                    Object {
                      "geometry": Object {
                        "coordinates": Array [
                          -40.58457,
                          40.21339,
                        ],
                        "type": "Point",
                      },
                      "googleMapsUrl": "https://www.google.es/maps",
                      "ip": "http://192.168.0.20",
                      "lastObservation": "2018-08-18T10:30:04.158Z",
                      "name": "foo",
                      "supportedObservationTypes": Object {
                        "event": Array [
                          "foo",
                          "bar",
                        ],
                        "measurement": Array [
                          "bar",
                          "foo",
                        ],
                      },
                      "topic": "bar",
                    },
                  ]
                }
              >
                <Route>
                  <Connect(ResetOnUnmount)
                    getThings={[Function]}
                    history={
                      Object {
                        "action": "POP",
                        "block": [Function],
                        "canGo": [Function],
                        "createHref": [Function],
                        "entries": Array [
                          Object {
                            "hash": "",
                            "pathname": "/",
                            "search": "",
                            "state": undefined,
                          },
                        ],
                        "go": [Function],
                        "goBack": [Function],
                        "goForward": [Function],
                        "index": 0,
                        "length": 1,
                        "listen": [Function],
                        "location": Object {
                          "hash": "",
                          "pathname": "/",
                          "search": "",
                          "state": undefined,
                        },
                        "push": [Function],
                        "replace": [Function],
                      }
                    }
                    isLoading={false}
                    location={
                      Object {
                        "hash": "",
                        "pathname": "/",
                        "search": "",
                        "state": undefined,
                      }
                    }
                    match={
                      Object {
                        "isExact": true,
                        "params": Object {},
                        "path": "/",
                        "url": "/",
                      }
                    }
                    selectThing={[Function]}
                    selectedThing={null}
                    showNotFoundError={[Function]}
                    things={
                      Array [
                        Object {
                          "geometry": Object {
                            "coordinates": Array [
                              -40.58457,
                              40.21339,
                            ],
                            "type": "Point",
                          },
                          "googleMapsUrl": "https://www.google.es/maps",
                          "ip": "http://192.168.0.20",
                          "lastObservation": "2018-08-18T10:30:04.158Z",
                          "name": "foo",
                          "supportedObservationTypes": Object {
                            "event": Array [
                              "foo",
                              "bar",
                            ],
                            "measurement": Array [
                              "bar",
                              "foo",
                            ],
                          },
                          "topic": "bar",
                        },
                      ]
                    }
                  >
                    <ResetOnUnmount
                      getThings={[Function]}
                      history={
                        Object {
                          "action": "POP",
                          "block": [Function],
                          "canGo": [Function],
                          "createHref": [Function],
                          "entries": Array [
                            Object {
                              "hash": "",
                              "pathname": "/",
                              "search": "",
                              "state": undefined,
                            },
                          ],
                          "go": [Function],
                          "goBack": [Function],
                          "goForward": [Function],
                          "index": 0,
                          "length": 1,
                          "listen": [Function],
                          "location": Object {
                            "hash": "",
                            "pathname": "/",
                            "search": "",
                            "state": undefined,
                          },
                          "push": [Function],
                          "replace": [Function],
                        }
                      }
                      isLoading={false}
                      location={
                        Object {
                          "hash": "",
                          "pathname": "/",
                          "search": "",
                          "state": undefined,
                        }
                      }
                      match={
                        Object {
                          "isExact": true,
                          "params": Object {},
                          "path": "/",
                          "url": "/",
                        }
                      }
                      reset={[Function]}
                      selectThing={[Function]}
                      selectedThing={null}
                      showNotFoundError={[Function]}
                      things={
                        Array [
                          Object {
                            "geometry": Object {
                              "coordinates": Array [
                                -40.58457,
                                40.21339,
                              ],
                              "type": "Point",
                            },
                            "googleMapsUrl": "https://www.google.es/maps",
                            "ip": "http://192.168.0.20",
                            "lastObservation": "2018-08-18T10:30:04.158Z",
                            "name": "foo",
                            "supportedObservationTypes": Object {
                              "event": Array [
                                "foo",
                                "bar",
                              ],
                              "measurement": Array [
                                "bar",
                                "foo",
                              ],
                            },
                            "topic": "bar",
                          },
                        ]
                      }
                    >
                      <InjectIntl(Things)
                        getThings={[Function]}
                        history={
                          Object {
                            "action": "POP",
                            "block": [Function],
                            "canGo": [Function],
                            "createHref": [Function],
                            "entries": Array [
                              Object {
                                "hash": "",
                                "pathname": "/",
                                "search": "",
                                "state": undefined,
                              },
                            ],
                            "go": [Function],
                            "goBack": [Function],
                            "goForward": [Function],
                            "index": 0,
                            "length": 1,
                            "listen": [Function],
                            "location": Object {
                              "hash": "",
                              "pathname": "/",
                              "search": "",
                              "state": undefined,
                            },
                            "push": [Function],
                            "replace": [Function],
                          }
                        }
                        isLoading={false}
                        location={
                          Object {
                            "hash": "",
                            "pathname": "/",
                            "search": "",
                            "state": undefined,
                          }
                        }
                        match={
                          Object {
                            "isExact": true,
                            "params": Object {},
                            "path": "/",
                            "url": "/",
                          }
                        }
                        reset={[Function]}
                        selectThing={[Function]}
                        selectedThing={null}
                        showNotFoundError={[Function]}
                        things={
                          Array [
                            Object {
                              "geometry": Object {
                                "coordinates": Array [
                                  -40.58457,
                                  40.21339,
                                ],
                                "type": "Point",
                              },
                              "googleMapsUrl": "https://www.google.es/maps",
                              "ip": "http://192.168.0.20",
                              "lastObservation": "2018-08-18T10:30:04.158Z",
                              "name": "foo",
                              "supportedObservationTypes": Object {
                                "event": Array [
                                  "foo",
                                  "bar",
                                ],
                                "measurement": Array [
                                  "bar",
                                  "foo",
                                ],
                              },
                              "topic": "bar",
                            },
                          ]
                        }
                      >
                        <Things
                          getThings={[Function]}
                          history={
                            Object {
                              "action": "POP",
                              "block": [Function],
                              "canGo": [Function],
                              "createHref": [Function],
                              "entries": Array [
                                Object {
                                  "hash": "",
                                  "pathname": "/",
                                  "search": "",
                                  "state": undefined,
                                },
                              ],
                              "go": [Function],
                              "goBack": [Function],
                              "goForward": [Function],
                              "index": 0,
                              "length": 1,
                              "listen": [Function],
                              "location": Object {
                                "hash": "",
                                "pathname": "/",
                                "search": "",
                                "state": undefined,
                              },
                              "push": [Function],
                              "replace": [Function],
                            }
                          }
                          intl={
                            Object {
                              "defaultFormats": Object {},
                              "defaultLocale": "en",
                              "formatDate": [Function],
                              "formatHTMLMessage": [Function],
                              "formatMessage": [Function],
                              "formatNumber": [Function],
                              "formatPlural": [Function],
                              "formatRelative": [Function],
                              "formatTime": [Function],
                              "formats": Object {},
                              "formatters": Object {
                                "getDateTimeFormat": [Function],
                                "getMessageFormat": [Function],
                                "getNumberFormat": [Function],
                                "getPluralFormat": [Function],
                                "getRelativeFormat": [Function],
                              },
                              "locale": "en",
                              "messages": Object {
                                "Custom": "Custom",
                                "Data": "Data",
                                "Delete": "Delete",
                                "End date": "End date",
                                "Error": "Error",
                                "Event stats": "Event stats",
                                "Events:": "Events:",
                                "Filters": "Filters",
                                "Google maps": "Google maps",
                                "Group by": "Group by",
                                "IP address:": "IP address:",
                                "IoT": "IoT",
                                "Last observation:": "Last observation:",
                                "Login": "Login",
                                "Logout": "Logout",
                                "MQTT topic:": "MQTT topic:",
                                "Measurement stats": "Measurement stats",
                                "Measurement type": "Measurement type",
                                "Measurements:": "Measurements:",
                                "Observation": "Observation",
                                "Password": "Password",
                                "Real time": "Real time",
                                "Request failed": "Request failed",
                                "Reset": "Reset",
                                "Start date": "Start date",
                                "Stats": "Stats",
                                "Thing": "Thing",
                                "Thing not found": "Thing not found",
                                "Things": "Things",
                                "Time": "Time",
                                "Time period": "Time period",
                                "Type": "Type",
                                "Username": "Username",
                                "avg": "Average",
                                "avgByHour": "Average by hour",
                                "date": "Date",
                                "day": "Day",
                                "door-closed": "Door closed",
                                "door-opened": "Door opened",
                                "en": "English",
                                "es": "Spanish",
                                "event": "Event",
                                "hour": "Hour",
                                "humidity": "Humidity",
                                "humidity-indoor": "Humidity indoor",
                                "humidity-outdoor": "Humidity outdoor",
                                "luminosity": "Luminosity",
                                "max": "Maximum",
                                "maxByHour": "Maximum by hour",
                                "measurement": "Mesasurement",
                                "min": "Minimum",
                                "minByHour": "Minimum by hour",
                                "minute": "Minute",
                                "month": "Month",
                                "second": "Second",
                                "stdDev": "Standard deviation",
                                "stdDevByHour": "Standard deviation by hour",
                                "temperature": "Temperature",
                                "temperature-indoor": "Temperature indoor",
                                "temperature-outdoor": "Temperature outdoor",
                                "thing": "Thing",
                                "total": "Total",
                                "week": "Week",
                                "year": "Year",
                              },
                              "now": [Function],
                              "onError": [Function],
                              "textComponent": "span",
                              "timeZone": null,
                            }
                          }
                          isLoading={false}
                          location={
                            Object {
                              "hash": "",
                              "pathname": "/",
                              "search": "",
                              "state": undefined,
                            }
                          }
                          match={
                            Object {
                              "isExact": true,
                              "params": Object {},
                              "path": "/",
                              "url": "/",
                            }
                          }
                          reset={[Function]}
                          selectThing={[Function]}
                          selectedThing={null}
                          shouldShowNotFoundError={false}
                          showNotFoundError={[Function]}
                          things={
                            Array [
                              Object {
                                "geometry": Object {
                                  "coordinates": Array [
                                    -40.58457,
                                    40.21339,
                                  ],
                                  "type": "Point",
                                },
                                "googleMapsUrl": "https://www.google.es/maps",
                                "ip": "http://192.168.0.20",
                                "lastObservation": "2018-08-18T10:30:04.158Z",
                                "name": "foo",
                                "supportedObservationTypes": Object {
                                  "event": Array [
                                    "foo",
                                    "bar",
                                  ],
                                  "measurement": Array [
                                    "bar",
                                    "foo",
                                  ],
                                },
                                "topic": "bar",
                              },
                            ]
                          }
                        >
                          <div>
                            <div
                              className="container is-fluid section"
                            >
                              <div
                                className="columns"
                              >
                                <div
                                  className="column is-one-quarter"
                                >
                                  <ThingItem
                                    isSelected={false}
                                    key="foo"
                                    name="foo"
                                    onClick={[Function]}
                                  >
                                    <div
                                      className="thing-item-card"
                                      onClick={[Function]}
                                      onKeyPress={[Function]}
                                      role="button"
                                      tabIndex={0}
                                    >
                                      <div
                                        className="card-content"
                                      >
                                        <div
                                          className="content"
                                        >
                                          <p
                                            className="title is-6"
                                          >
                                            foo
                                          </p>
                                        </div>
                                      </div>
                                    </div>
                                  </ThingItem>
                                </div>
                              </div>
                            </div>
                            <Modal
                              isActive={false}
                              messageStyle="is-danger"
                              onCloseClick={[Function]}
                              subTitle="Thing not found"
                              title="Error"
                            >
                              <div
                                className="modal"
                              >
                                <div
                                  className="modal-background"
                                  onClick={[Function]}
                                  onKeyPress={[Function]}
                                  role="button"
                                  tabIndex={0}
                                />
                                <div
                                  className="modal-content"
                                >
                                  <article
                                    className="message is-medium is-danger"
                                  >
                                    <div
                                      className="message-header"
                                    >
                                      <p>
                                        Error
                                      </p>
                                    </div>
                                    <div
                                      className="message-body has-text-centered"
                                    >
                                      Thing not found
                                    </div>
                                  </article>
                                </div>
                                <button
                                  aria-label="close"
                                  className="modal-close is-large"
                                  onClick={[Function]}
                                />
                              </div>
                            </Modal>
                          </div>
                        </Things>
                      </InjectIntl(Things)>
                    </ResetOnUnmount>
                  </Connect(ResetOnUnmount)>
                </Route>
              </withRouter(Connect(ResetOnUnmount))>
            </Connect(withRouter(Connect(ResetOnUnmount)))>
          </Router>
        </MemoryRouter>
      </IntlProvider>
    </IntlProvider>
  </Connect(IntlProvider)>
</Provider>
`;

exports[`containers/things renders things with loaded things and selected thing 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <Connect(IntlProvider)
    store={
      Object {
        "clearActions": [Function],
        "dispatch": [Function],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      }
    }
  >
    <IntlProvider
      dispatch={[Function]}
      locale="en"
      messages={
        Object {
          "Custom": "Custom",
          "Data": "Data",
          "Delete": "Delete",
          "End date": "End date",
          "Error": "Error",
          "Event stats": "Event stats",
          "Events:": "Events:",
          "Filters": "Filters",
          "Google maps": "Google maps",
          "Group by": "Group by",
          "IP address:": "IP address:",
          "IoT": "IoT",
          "Last observation:": "Last observation:",
          "Login": "Login",
          "Logout": "Logout",
          "MQTT topic:": "MQTT topic:",
          "Measurement stats": "Measurement stats",
          "Measurement type": "Measurement type",
          "Measurements:": "Measurements:",
          "Observation": "Observation",
          "Password": "Password",
          "Real time": "Real time",
          "Request failed": "Request failed",
          "Reset": "Reset",
          "Start date": "Start date",
          "Stats": "Stats",
          "Thing": "Thing",
          "Thing not found": "Thing not found",
          "Things": "Things",
          "Time": "Time",
          "Time period": "Time period",
          "Type": "Type",
          "Username": "Username",
          "avg": "Average",
          "avgByHour": "Average by hour",
          "date": "Date",
          "day": "Day",
          "door-closed": "Door closed",
          "door-opened": "Door opened",
          "en": "English",
          "es": "Spanish",
          "event": "Event",
          "hour": "Hour",
          "humidity": "Humidity",
          "humidity-indoor": "Humidity indoor",
          "humidity-outdoor": "Humidity outdoor",
          "luminosity": "Luminosity",
          "max": "Maximum",
          "maxByHour": "Maximum by hour",
          "measurement": "Mesasurement",
          "min": "Minimum",
          "minByHour": "Minimum by hour",
          "minute": "Minute",
          "month": "Month",
          "second": "Second",
          "stdDev": "Standard deviation",
          "stdDevByHour": "Standard deviation by hour",
          "temperature": "Temperature",
          "temperature-indoor": "Temperature indoor",
          "temperature-outdoor": "Temperature outdoor",
          "thing": "Thing",
          "total": "Total",
          "week": "Week",
          "year": "Year",
        }
      }
      store={
        Object {
          "clearActions": [Function],
          "dispatch": [Function],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        }
      }
      storeSubscription={
        Subscription {
          "listeners": Object {
            "clear": [Function],
            "get": [Function],
            "notify": [Function],
            "subscribe": [Function],
          },
          "onStateChange": [Function],
          "parentSub": undefined,
          "store": Object {
            "clearActions": [Function],
            "dispatch": [Function],
            "getActions": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
          },
          "unsubscribe": [Function],
        }
      }
    >
      <IntlProvider
        key="en"
        locale="en"
        messages={
          Object {
            "Custom": "Custom",
            "Data": "Data",
            "Delete": "Delete",
            "End date": "End date",
            "Error": "Error",
            "Event stats": "Event stats",
            "Events:": "Events:",
            "Filters": "Filters",
            "Google maps": "Google maps",
            "Group by": "Group by",
            "IP address:": "IP address:",
            "IoT": "IoT",
            "Last observation:": "Last observation:",
            "Login": "Login",
            "Logout": "Logout",
            "MQTT topic:": "MQTT topic:",
            "Measurement stats": "Measurement stats",
            "Measurement type": "Measurement type",
            "Measurements:": "Measurements:",
            "Observation": "Observation",
            "Password": "Password",
            "Real time": "Real time",
            "Request failed": "Request failed",
            "Reset": "Reset",
            "Start date": "Start date",
            "Stats": "Stats",
            "Thing": "Thing",
            "Thing not found": "Thing not found",
            "Things": "Things",
            "Time": "Time",
            "Time period": "Time period",
            "Type": "Type",
            "Username": "Username",
            "avg": "Average",
            "avgByHour": "Average by hour",
            "date": "Date",
            "day": "Day",
            "door-closed": "Door closed",
            "door-opened": "Door opened",
            "en": "English",
            "es": "Spanish",
            "event": "Event",
            "hour": "Hour",
            "humidity": "Humidity",
            "humidity-indoor": "Humidity indoor",
            "humidity-outdoor": "Humidity outdoor",
            "luminosity": "Luminosity",
            "max": "Maximum",
            "maxByHour": "Maximum by hour",
            "measurement": "Mesasurement",
            "min": "Minimum",
            "minByHour": "Minimum by hour",
            "minute": "Minute",
            "month": "Month",
            "second": "Second",
            "stdDev": "Standard deviation",
            "stdDevByHour": "Standard deviation by hour",
            "temperature": "Temperature",
            "temperature-indoor": "Temperature indoor",
            "temperature-outdoor": "Temperature outdoor",
            "thing": "Thing",
            "total": "Total",
            "week": "Week",
            "year": "Year",
          }
        }
      >
        <MemoryRouter
          initialEntries={
            Array [
              "/",
            ]
          }
          keyLength={0}
        >
          <Router
            history={
              Object {
                "action": "POP",
                "block": [Function],
                "canGo": [Function],
                "createHref": [Function],
                "entries": Array [
                  Object {
                    "hash": "",
                    "pathname": "/",
                    "search": "",
                    "state": undefined,
                  },
                ],
                "go": [Function],
                "goBack": [Function],
                "goForward": [Function],
                "index": 0,
                "length": 1,
                "listen": [Function],
                "location": Object {
                  "hash": "",
                  "pathname": "/",
                  "search": "",
                  "state": undefined,
                },
                "push": [Function],
                "replace": [Function],
              }
            }
          >
            <Connect(withRouter(Connect(ResetOnUnmount)))>
              <withRouter(Connect(ResetOnUnmount))
                getThings={[Function]}
                isLoading={false}
                selectThing={[Function]}
                selectedThing={
                  Object {
                    "geometry": Object {
                      "coordinates": Array [
                        -40.58457,
                        40.21339,
                      ],
                      "type": "Point",
                    },
                    "googleMapsUrl": "https://www.google.es/maps",
                    "ip": "http://192.168.0.20",
                    "lastObservation": "2018-08-18T10:30:04.158Z",
                    "name": "foo",
                    "supportedObservationTypes": Object {
                      "event": Array [
                        "foo",
                        "bar",
                      ],
                      "measurement": Array [
                        "bar",
                        "foo",
                      ],
                    },
                    "topic": "bar",
                  }
                }
                showNotFoundError={[Function]}
                things={
                  Array [
                    Object {
                      "geometry": Object {
                        "coordinates": Array [
                          -40.58457,
                          40.21339,
                        ],
                        "type": "Point",
                      },
                      "googleMapsUrl": "https://www.google.es/maps",
                      "ip": "http://192.168.0.20",
                      "lastObservation": "2018-08-18T10:30:04.158Z",
                      "name": "foo",
                      "supportedObservationTypes": Object {
                        "event": Array [
                          "foo",
                          "bar",
                        ],
                        "measurement": Array [
                          "bar",
                          "foo",
                        ],
                      },
                      "topic": "bar",
                    },
                  ]
                }
              >
                <Route>
                  <Connect(ResetOnUnmount)
                    getThings={[Function]}
                    history={
                      Object {
                        "action": "POP",
                        "block": [Function],
                        "canGo": [Function],
                        "createHref": [Function],
                        "entries": Array [
                          Object {
                            "hash": "",
                            "pathname": "/",
                            "search": "",
                            "state": undefined,
                          },
                        ],
                        "go": [Function],
                        "goBack": [Function],
                        "goForward": [Function],
                        "index": 0,
                        "length": 1,
                        "listen": [Function],
                        "location": Object {
                          "hash": "",
                          "pathname": "/",
                          "search": "",
                          "state": undefined,
                        },
                        "push": [Function],
                        "replace": [Function],
                      }
                    }
                    isLoading={false}
                    location={
                      Object {
                        "hash": "",
                        "pathname": "/",
                        "search": "",
                        "state": undefined,
                      }
                    }
                    match={
                      Object {
                        "isExact": true,
                        "params": Object {},
                        "path": "/",
                        "url": "/",
                      }
                    }
                    selectThing={[Function]}
                    selectedThing={
                      Object {
                        "geometry": Object {
                          "coordinates": Array [
                            -40.58457,
                            40.21339,
                          ],
                          "type": "Point",
                        },
                        "googleMapsUrl": "https://www.google.es/maps",
                        "ip": "http://192.168.0.20",
                        "lastObservation": "2018-08-18T10:30:04.158Z",
                        "name": "foo",
                        "supportedObservationTypes": Object {
                          "event": Array [
                            "foo",
                            "bar",
                          ],
                          "measurement": Array [
                            "bar",
                            "foo",
                          ],
                        },
                        "topic": "bar",
                      }
                    }
                    showNotFoundError={[Function]}
                    things={
                      Array [
                        Object {
                          "geometry": Object {
                            "coordinates": Array [
                              -40.58457,
                              40.21339,
                            ],
                            "type": "Point",
                          },
                          "googleMapsUrl": "https://www.google.es/maps",
                          "ip": "http://192.168.0.20",
                          "lastObservation": "2018-08-18T10:30:04.158Z",
                          "name": "foo",
                          "supportedObservationTypes": Object {
                            "event": Array [
                              "foo",
                              "bar",
                            ],
                            "measurement": Array [
                              "bar",
                              "foo",
                            ],
                          },
                          "topic": "bar",
                        },
                      ]
                    }
                  >
                    <ResetOnUnmount
                      getThings={[Function]}
                      history={
                        Object {
                          "action": "POP",
                          "block": [Function],
                          "canGo": [Function],
                          "createHref": [Function],
                          "entries": Array [
                            Object {
                              "hash": "",
                              "pathname": "/",
                              "search": "",
                              "state": undefined,
                            },
                          ],
                          "go": [Function],
                          "goBack": [Function],
                          "goForward": [Function],
                          "index": 0,
                          "length": 1,
                          "listen": [Function],
                          "location": Object {
                            "hash": "",
                            "pathname": "/",
                            "search": "",
                            "state": undefined,
                          },
                          "push": [Function],
                          "replace": [Function],
                        }
                      }
                      isLoading={false}
                      location={
                        Object {
                          "hash": "",
                          "pathname": "/",
                          "search": "",
                          "state": undefined,
                        }
                      }
                      match={
                        Object {
                          "isExact": true,
                          "params": Object {},
                          "path": "/",
                          "url": "/",
                        }
                      }
                      reset={[Function]}
                      selectThing={[Function]}
                      selectedThing={
                        Object {
                          "geometry": Object {
                            "coordinates": Array [
                              -40.58457,
                              40.21339,
                            ],
                            "type": "Point",
                          },
                          "googleMapsUrl": "https://www.google.es/maps",
                          "ip": "http://192.168.0.20",
                          "lastObservation": "2018-08-18T10:30:04.158Z",
                          "name": "foo",
                          "supportedObservationTypes": Object {
                            "event": Array [
                              "foo",
                              "bar",
                            ],
                            "measurement": Array [
                              "bar",
                              "foo",
                            ],
                          },
                          "topic": "bar",
                        }
                      }
                      showNotFoundError={[Function]}
                      things={
                        Array [
                          Object {
                            "geometry": Object {
                              "coordinates": Array [
                                -40.58457,
                                40.21339,
                              ],
                              "type": "Point",
                            },
                            "googleMapsUrl": "https://www.google.es/maps",
                            "ip": "http://192.168.0.20",
                            "lastObservation": "2018-08-18T10:30:04.158Z",
                            "name": "foo",
                            "supportedObservationTypes": Object {
                              "event": Array [
                                "foo",
                                "bar",
                              ],
                              "measurement": Array [
                                "bar",
                                "foo",
                              ],
                            },
                            "topic": "bar",
                          },
                        ]
                      }
                    >
                      <InjectIntl(Things)
                        getThings={[Function]}
                        history={
                          Object {
                            "action": "POP",
                            "block": [Function],
                            "canGo": [Function],
                            "createHref": [Function],
                            "entries": Array [
                              Object {
                                "hash": "",
                                "pathname": "/",
                                "search": "",
                                "state": undefined,
                              },
                            ],
                            "go": [Function],
                            "goBack": [Function],
                            "goForward": [Function],
                            "index": 0,
                            "length": 1,
                            "listen": [Function],
                            "location": Object {
                              "hash": "",
                              "pathname": "/",
                              "search": "",
                              "state": undefined,
                            },
                            "push": [Function],
                            "replace": [Function],
                          }
                        }
                        isLoading={false}
                        location={
                          Object {
                            "hash": "",
                            "pathname": "/",
                            "search": "",
                            "state": undefined,
                          }
                        }
                        match={
                          Object {
                            "isExact": true,
                            "params": Object {},
                            "path": "/",
                            "url": "/",
                          }
                        }
                        reset={[Function]}
                        selectThing={[Function]}
                        selectedThing={
                          Object {
                            "geometry": Object {
                              "coordinates": Array [
                                -40.58457,
                                40.21339,
                              ],
                              "type": "Point",
                            },
                            "googleMapsUrl": "https://www.google.es/maps",
                            "ip": "http://192.168.0.20",
                            "lastObservation": "2018-08-18T10:30:04.158Z",
                            "name": "foo",
                            "supportedObservationTypes": Object {
                              "event": Array [
                                "foo",
                                "bar",
                              ],
                              "measurement": Array [
                                "bar",
                                "foo",
                              ],
                            },
                            "topic": "bar",
                          }
                        }
                        showNotFoundError={[Function]}
                        things={
                          Array [
                            Object {
                              "geometry": Object {
                                "coordinates": Array [
                                  -40.58457,
                                  40.21339,
                                ],
                                "type": "Point",
                              },
                              "googleMapsUrl": "https://www.google.es/maps",
                              "ip": "http://192.168.0.20",
                              "lastObservation": "2018-08-18T10:30:04.158Z",
                              "name": "foo",
                              "supportedObservationTypes": Object {
                                "event": Array [
                                  "foo",
                                  "bar",
                                ],
                                "measurement": Array [
                                  "bar",
                                  "foo",
                                ],
                              },
                              "topic": "bar",
                            },
                          ]
                        }
                      >
                        <Things
                          getThings={[Function]}
                          history={
                            Object {
                              "action": "POP",
                              "block": [Function],
                              "canGo": [Function],
                              "createHref": [Function],
                              "entries": Array [
                                Object {
                                  "hash": "",
                                  "pathname": "/",
                                  "search": "",
                                  "state": undefined,
                                },
                              ],
                              "go": [Function],
                              "goBack": [Function],
                              "goForward": [Function],
                              "index": 0,
                              "length": 1,
                              "listen": [Function],
                              "location": Object {
                                "hash": "",
                                "pathname": "/",
                                "search": "",
                                "state": undefined,
                              },
                              "push": [Function],
                              "replace": [Function],
                            }
                          }
                          intl={
                            Object {
                              "defaultFormats": Object {},
                              "defaultLocale": "en",
                              "formatDate": [Function],
                              "formatHTMLMessage": [Function],
                              "formatMessage": [Function],
                              "formatNumber": [Function],
                              "formatPlural": [Function],
                              "formatRelative": [Function],
                              "formatTime": [Function],
                              "formats": Object {},
                              "formatters": Object {
                                "getDateTimeFormat": [Function],
                                "getMessageFormat": [Function],
                                "getNumberFormat": [Function],
                                "getPluralFormat": [Function],
                                "getRelativeFormat": [Function],
                              },
                              "locale": "en",
                              "messages": Object {
                                "Custom": "Custom",
                                "Data": "Data",
                                "Delete": "Delete",
                                "End date": "End date",
                                "Error": "Error",
                                "Event stats": "Event stats",
                                "Events:": "Events:",
                                "Filters": "Filters",
                                "Google maps": "Google maps",
                                "Group by": "Group by",
                                "IP address:": "IP address:",
                                "IoT": "IoT",
                                "Last observation:": "Last observation:",
                                "Login": "Login",
                                "Logout": "Logout",
                                "MQTT topic:": "MQTT topic:",
                                "Measurement stats": "Measurement stats",
                                "Measurement type": "Measurement type",
                                "Measurements:": "Measurements:",
                                "Observation": "Observation",
                                "Password": "Password",
                                "Real time": "Real time",
                                "Request failed": "Request failed",
                                "Reset": "Reset",
                                "Start date": "Start date",
                                "Stats": "Stats",
                                "Thing": "Thing",
                                "Thing not found": "Thing not found",
                                "Things": "Things",
                                "Time": "Time",
                                "Time period": "Time period",
                                "Type": "Type",
                                "Username": "Username",
                                "avg": "Average",
                                "avgByHour": "Average by hour",
                                "date": "Date",
                                "day": "Day",
                                "door-closed": "Door closed",
                                "door-opened": "Door opened",
                                "en": "English",
                                "es": "Spanish",
                                "event": "Event",
                                "hour": "Hour",
                                "humidity": "Humidity",
                                "humidity-indoor": "Humidity indoor",
                                "humidity-outdoor": "Humidity outdoor",
                                "luminosity": "Luminosity",
                                "max": "Maximum",
                                "maxByHour": "Maximum by hour",
                                "measurement": "Mesasurement",
                                "min": "Minimum",
                                "minByHour": "Minimum by hour",
                                "minute": "Minute",
                                "month": "Month",
                                "second": "Second",
                                "stdDev": "Standard deviation",
                                "stdDevByHour": "Standard deviation by hour",
                                "temperature": "Temperature",
                                "temperature-indoor": "Temperature indoor",
                                "temperature-outdoor": "Temperature outdoor",
                                "thing": "Thing",
                                "total": "Total",
                                "week": "Week",
                                "year": "Year",
                              },
                              "now": [Function],
                              "onError": [Function],
                              "textComponent": "span",
                              "timeZone": null,
                            }
                          }
                          isLoading={false}
                          location={
                            Object {
                              "hash": "",
                              "pathname": "/",
                              "search": "",
                              "state": undefined,
                            }
                          }
                          match={
                            Object {
                              "isExact": true,
                              "params": Object {},
                              "path": "/",
                              "url": "/",
                            }
                          }
                          reset={[Function]}
                          selectThing={[Function]}
                          selectedThing={
                            Object {
                              "geometry": Object {
                                "coordinates": Array [
                                  -40.58457,
                                  40.21339,
                                ],
                                "type": "Point",
                              },
                              "googleMapsUrl": "https://www.google.es/maps",
                              "ip": "http://192.168.0.20",
                              "lastObservation": "2018-08-18T10:30:04.158Z",
                              "name": "foo",
                              "supportedObservationTypes": Object {
                                "event": Array [
                                  "foo",
                                  "bar",
                                ],
                                "measurement": Array [
                                  "bar",
                                  "foo",
                                ],
                              },
                              "topic": "bar",
                            }
                          }
                          shouldShowNotFoundError={false}
                          showNotFoundError={[Function]}
                          things={
                            Array [
                              Object {
                                "geometry": Object {
                                  "coordinates": Array [
                                    -40.58457,
                                    40.21339,
                                  ],
                                  "type": "Point",
                                },
                                "googleMapsUrl": "https://www.google.es/maps",
                                "ip": "http://192.168.0.20",
                                "lastObservation": "2018-08-18T10:30:04.158Z",
                                "name": "foo",
                                "supportedObservationTypes": Object {
                                  "event": Array [
                                    "foo",
                                    "bar",
                                  ],
                                  "measurement": Array [
                                    "bar",
                                    "foo",
                                  ],
                                },
                                "topic": "bar",
                              },
                            ]
                          }
                        >
                          <div>
                            <div
                              className="container is-fluid section"
                            >
                              <div
                                className="columns"
                              >
                                <div
                                  className="column is-one-quarter"
                                >
                                  <ThingItem
                                    isSelected={true}
                                    key="foo"
                                    name="foo"
                                    onClick={[Function]}
                                  >
                                    <div
                                      className="thing-item-card is-selected"
                                      onClick={[Function]}
                                      onKeyPress={[Function]}
                                      role="button"
                                      tabIndex={0}
                                    >
                                      <div
                                        className="card-content"
                                      >
                                        <div
                                          className="content"
                                        >
                                          <p
                                            className="title is-6"
                                          >
                                            foo
                                          </p>
                                        </div>
                                      </div>
                                    </div>
                                  </ThingItem>
                                </div>
                                <div
                                  className="column is-three-quarters"
                                >
                                  <InjectIntl(ThingDetail)
                                    onDataClick={[Function]}
                                    onStatsClick={[Function]}
                                    thing={
                                      Object {
                                        "geometry": Object {
                                          "coordinates": Array [
                                            -40.58457,
                                            40.21339,
                                          ],
                                          "type": "Point",
                                        },
                                        "googleMapsUrl": "https://www.google.es/maps",
                                        "ip": "http://192.168.0.20",
                                        "lastObservation": "2018-08-18T10:30:04.158Z",
                                        "name": "foo",
                                        "supportedObservationTypes": Object {
                                          "event": Array [
                                            "foo",
                                            "bar",
                                          ],
                                          "measurement": Array [
                                            "bar",
                                            "foo",
                                          ],
                                        },
                                        "topic": "bar",
                                      }
                                    }
                                  >
                                    <ThingDetail
                                      intl={
                                        Object {
                                          "defaultFormats": Object {},
                                          "defaultLocale": "en",
                                          "formatDate": [Function],
                                          "formatHTMLMessage": [Function],
                                          "formatMessage": [Function],
                                          "formatNumber": [Function],
                                          "formatPlural": [Function],
                                          "formatRelative": [Function],
                                          "formatTime": [Function],
                                          "formats": Object {},
                                          "formatters": Object {
                                            "getDateTimeFormat": [Function],
                                            "getMessageFormat": [Function],
                                            "getNumberFormat": [Function],
                                            "getPluralFormat": [Function],
                                            "getRelativeFormat": [Function],
                                          },
                                          "locale": "en",
                                          "messages": Object {
                                            "Custom": "Custom",
                                            "Data": "Data",
                                            "Delete": "Delete",
                                            "End date": "End date",
                                            "Error": "Error",
                                            "Event stats": "Event stats",
                                            "Events:": "Events:",
                                            "Filters": "Filters",
                                            "Google maps": "Google maps",
                                            "Group by": "Group by",
                                            "IP address:": "IP address:",
                                            "IoT": "IoT",
                                            "Last observation:": "Last observation:",
                                            "Login": "Login",
                                            "Logout": "Logout",
                                            "MQTT topic:": "MQTT topic:",
                                            "Measurement stats": "Measurement stats",
                                            "Measurement type": "Measurement type",
                                            "Measurements:": "Measurements:",
                                            "Observation": "Observation",
                                            "Password": "Password",
                                            "Real time": "Real time",
                                            "Request failed": "Request failed",
                                            "Reset": "Reset",
                                            "Start date": "Start date",
                                            "Stats": "Stats",
                                            "Thing": "Thing",
                                            "Thing not found": "Thing not found",
                                            "Things": "Things",
                                            "Time": "Time",
                                            "Time period": "Time period",
                                            "Type": "Type",
                                            "Username": "Username",
                                            "avg": "Average",
                                            "avgByHour": "Average by hour",
                                            "date": "Date",
                                            "day": "Day",
                                            "door-closed": "Door closed",
                                            "door-opened": "Door opened",
                                            "en": "English",
                                            "es": "Spanish",
                                            "event": "Event",
                                            "hour": "Hour",
                                            "humidity": "Humidity",
                                            "humidity-indoor": "Humidity indoor",
                                            "humidity-outdoor": "Humidity outdoor",
                                            "luminosity": "Luminosity",
                                            "max": "Maximum",
                                            "maxByHour": "Maximum by hour",
                                            "measurement": "Mesasurement",
                                            "min": "Minimum",
                                            "minByHour": "Minimum by hour",
                                            "minute": "Minute",
                                            "month": "Month",
                                            "second": "Second",
                                            "stdDev": "Standard deviation",
                                            "stdDevByHour": "Standard deviation by hour",
                                            "temperature": "Temperature",
                                            "temperature-indoor": "Temperature indoor",
                                            "temperature-outdoor": "Temperature outdoor",
                                            "thing": "Thing",
                                            "total": "Total",
                                            "week": "Week",
                                            "year": "Year",
                                          },
                                          "now": [Function],
                                          "onError": [Function],
                                          "textComponent": "span",
                                          "timeZone": null,
                                        }
                                      }
                                      onDataClick={[Function]}
                                      onStatsClick={[Function]}
                                      thing={
                                        Object {
                                          "geometry": Object {
                                            "coordinates": Array [
                                              -40.58457,
                                              40.21339,
                                            ],
                                            "type": "Point",
                                          },
                                          "googleMapsUrl": "https://www.google.es/maps",
                                          "ip": "http://192.168.0.20",
                                          "lastObservation": "2018-08-18T10:30:04.158Z",
                                          "name": "foo",
                                          "supportedObservationTypes": Object {
                                            "event": Array [
                                              "foo",
                                              "bar",
                                            ],
                                            "measurement": Array [
                                              "bar",
                                              "foo",
                                            ],
                                          },
                                          "topic": "bar",
                                        }
                                      }
                                    >
                                      <div
                                        className="card"
                                      >
                                        <div
                                          className="card-content"
                                        >
                                          <div
                                            className="columns"
                                          >
                                            <div
                                              className="column is-three-fifths has-text-centered"
                                            >
                                              <p
                                                className="title is-3 has-text-primary is-spaced"
                                              >
                                                foo
                                              </p>
                                              <p
                                                className="title is-6"
                                              >
                                                <FormattedMessage
                                                  id="IP address:"
                                                  values={Object {}}
                                                >
                                                  <strong>
                                                    IP address:
                                                  </strong>
                                                </FormattedMessage>
                                                 
                                                <a
                                                  href="http://http://192.168.0.20"
                                                  rel="noopener noreferrer"
                                                  target="_blank"
                                                >
                                                  http://192.168.0.20
                                                </a>
                                              </p>
                                              <p
                                                className="title is-6"
                                              >
                                                <FormattedMessage
                                                  id="MQTT topic:"
                                                  values={Object {}}
                                                >
                                                  <strong>
                                                    MQTT topic:
                                                  </strong>
                                                </FormattedMessage>
                                                 
                                                <span
                                                  className="has-text-info"
                                                >
                                                  bar
                                                </span>
                                              </p>
                                              <p
                                                className="title is-6"
                                              >
                                                <FormattedMessage
                                                  id="Last observation:"
                                                  values={Object {}}
                                                >
                                                  <strong>
                                                    Last observation:
                                                  </strong>
                                                </FormattedMessage>
                                                 
                                                <span
                                                  className="has-text-info"
                                                >
                                                  Mock Date
                                                </span>
                                              </p>
                                              <TagList
                                                label="Events:"
                                                onTagClick={[Function]}
                                                tagStyle="is-warning"
                                                tags={
                                                  Array [
                                                    "foo",
                                                    "bar",
                                                  ]
                                                }
                                              >
                                                <div
                                                  className="tag-list"
                                                >
                                                  <p
                                                    className="tag-list-label is-6"
                                                  >
                                                    <FormattedMessage
                                                      id="Events:"
                                                      values={Object {}}
                                                    >
                                                      <strong>
                                                        Events:
                                                      </strong>
                                                    </FormattedMessage>
                                                  </p>
                                                  <div
                                                    className="tags"
                                                  >
                                                    <FormattedMessage
                                                      defaultMessage="foo"
                                                      id="foo"
                                                      key="foo"
                                                      values={Object {}}
                                                    >
                                                      <a
                                                        className="tag is-warning"
                                                        onClick={[Function]}
                                                        onKeyPress={[Function]}
                                                        role="link"
                                                        tabIndex={0}
                                                      >
                                                        foo
                                                      </a>
                                                    </FormattedMessage>
                                                    <FormattedMessage
                                                      defaultMessage="bar"
                                                      id="bar"
                                                      key="bar"
                                                      values={Object {}}
                                                    >
                                                      <a
                                                        className="tag is-warning"
                                                        onClick={[Function]}
                                                        onKeyPress={[Function]}
                                                        role="link"
                                                        tabIndex={0}
                                                      >
                                                        bar
                                                      </a>
                                                    </FormattedMessage>
                                                  </div>
                                                </div>
                                              </TagList>
                                              <TagList
                                                label="Measurements:"
                                                onTagClick={[Function]}
                                                tagStyle="is-warning"
                                                tags={
                                                  Array [
                                                    "bar",
                                                    "foo",
                                                  ]
                                                }
                                              >
                                                <div
                                                  className="tag-list"
                                                >
                                                  <p
                                                    className="tag-list-label is-6"
                                                  >
                                                    <FormattedMessage
                                                      id="Measurements:"
                                                      values={Object {}}
                                                    >
                                                      <strong>
                                                        Measurements:
                                                      </strong>
                                                    </FormattedMessage>
                                                  </p>
                                                  <div
                                                    className="tags"
                                                  >
                                                    <FormattedMessage
                                                      defaultMessage="bar"
                                                      id="bar"
                                                      key="bar"
                                                      values={Object {}}
                                                    >
                                                      <a
                                                        className="tag is-warning"
                                                        onClick={[Function]}
                                                        onKeyPress={[Function]}
                                                        role="link"
                                                        tabIndex={0}
                                                      >
                                                        bar
                                                      </a>
                                                    </FormattedMessage>
                                                    <FormattedMessage
                                                      defaultMessage="foo"
                                                      id="foo"
                                                      key="foo"
                                                      values={Object {}}
                                                    >
                                                      <a
                                                        className="tag is-warning"
                                                        onClick={[Function]}
                                                        onKeyPress={[Function]}
                                                        role="link"
                                                        tabIndex={0}
                                                      >
                                                        foo
                                                      </a>
                                                    </FormattedMessage>
                                                  </div>
                                                </div>
                                              </TagList>
                                              <ThingActions
                                                onStatsClick={[Function]}
                                                thing={
                                                  Object {
                                                    "geometry": Object {
                                                      "coordinates": Array [
                                                        -40.58457,
                                                        40.21339,
                                                      ],
                                                      "type": "Point",
                                                    },
                                                    "googleMapsUrl": "https://www.google.es/maps",
                                                    "ip": "http://192.168.0.20",
                                                    "lastObservation": "2018-08-18T10:30:04.158Z",
                                                    "name": "foo",
                                                    "supportedObservationTypes": Object {
                                                      "event": Array [
                                                        "foo",
                                                        "bar",
                                                      ],
                                                      "measurement": Array [
                                                        "bar",
                                                        "foo",
                                                      ],
                                                    },
                                                    "topic": "bar",
                                                  }
                                                }
                                              >
                                                <p
                                                  className="buttons is-horizontal-center"
                                                >
                                                  <a
                                                    className="button"
                                                    href="https://www.google.es/maps"
                                                    id="google-maps-link"
                                                    rel="noopener noreferrer"
                                                    target="_blank"
                                                  >
                                                    <span
                                                      className="icon"
                                                    >
                                                      <i
                                                        className="fas fa-map-marked"
                                                      />
                                                    </span>
                                                    <FormattedMessage
                                                      id="Google maps"
                                                      values={Object {}}
                                                    >
                                                      <span>
                                                        Google maps
                                                      </span>
                                                    </FormattedMessage>
                                                  </a>
                                                  <button
                                                    className="button"
                                                    id="event-stats-button"
                                                    onClick={[Function]}
                                                  >
                                                    <span
                                                      className="icon"
                                                    >
                                                      <i
                                                        className="fas fa-chart-bar"
                                                      />
                                                    </span>
                                                    <FormattedMessage
                                                      id="Event stats"
                                                      values={Object {}}
                                                    >
                                                      <span>
                                                        Event stats
                                                      </span>
                                                    </FormattedMessage>
                                                  </button>
                                                  <button
                                                    className="button"
                                                    id="measurement-stats-button"
                                                    onClick={[Function]}
                                                  >
                                                    <span
                                                      className="icon"
                                                    >
                                                      <i
                                                        className="fas fa-chart-bar"
                                                      />
                                                    </span>
                                                    <FormattedMessage
                                                      id="Measurement stats"
                                                      values={Object {}}
                                                    >
                                                      <span>
                                                        Measurement stats
                                                      </span>
                                                    </FormattedMessage>
                                                  </button>
                                                </p>
                                              </ThingActions>
                                            </div>
                                            <div
                                              className="column is-two-fifths"
                                            >
                                              <Connect(withProps(withScriptjs(withGoogleMap(Map))))
                                                marker={
                                                  Object {
                                                    "label": "foo",
                                                    "point": Object {
                                                      "lat": 40.21339,
                                                      "lng": -40.58457,
                                                    },
                                                  }
                                                }
                                              >
                                                <withProps(withScriptjs(withGoogleMap(Map)))
                                                  isDialogOpened={false}
                                                  marker={
                                                    Object {
                                                      "label": "foo",
                                                      "point": Object {
                                                        "lat": 40.21339,
                                                        "lng": -40.58457,
                                                      },
                                                    }
                                                  }
                                                  toggleDialog={[Function]}
                                                >
                                                  <withScriptjs(withGoogleMap(Map))
                                                    center={
                                                      Object {
                                                        "lat": 40.21339,
                                                        "lng": -40.58457,
                                                      }
                                                    }
                                                    containerElement={
                                                      <div
                                                        className="map"
                                                      />
                                                    }
                                                    googleMapURL="https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=geometry,drawing,places"
                                                    isDialogOpened={false}
                                                    label="foo"
                                                    loadingElement={
                                                      <div
                                                        style={
                                                          Object {
                                                            "height": "100%",
                                                          }
                                                        }
                                                      />
                                                    }
                                                    mapElement={
                                                      <div
                                                        style={
                                                          Object {
                                                            "height": "100%",
                                                          }
                                                        }
                                                      />
                                                    }
                                                    marker={
                                                      Object {
                                                        "label": "foo",
                                                        "point": Object {
                                                          "lat": 40.21339,
                                                          "lng": -40.58457,
                                                        },
                                                      }
                                                    }
                                                    point={
                                                      Object {
                                                        "lat": 40.21339,
                                                        "lng": -40.58457,
                                                      }
                                                    }
                                                    toggleDialog={[Function]}
                                                    zoom={12}
                                                  >
                                                    <div
                                                      style={
                                                        Object {
                                                          "height": "100%",
                                                        }
                                                      }
                                                    />
                                                  </withScriptjs(withGoogleMap(Map))>
                                                </withProps(withScriptjs(withGoogleMap(Map)))>
                                              </Connect(withProps(withScriptjs(withGoogleMap(Map))))>
                                            </div>
                                          </div>
                                        </div>
                                      </div>
                                    </ThingDetail>
                                  </InjectIntl(ThingDetail)>
                                </div>
                              </div>
                            </div>
                            <Modal
                              isActive={false}
                              messageStyle="is-danger"
                              onCloseClick={[Function]}
                              subTitle="Thing not found"
                              title="Error"
                            >
                              <div
                                className="modal"
                              >
                                <div
                                  className="modal-background"
                                  onClick={[Function]}
                                  onKeyPress={[Function]}
                                  role="button"
                                  tabIndex={0}
                                />
                                <div
                                  className="modal-content"
                                >
                                  <article
                                    className="message is-medium is-danger"
                                  >
                                    <div
                                      className="message-header"
                                    >
                                      <p>
                                        Error
                                      </p>
                                    </div>
                                    <div
                                      className="message-body has-text-centered"
                                    >
                                      Thing not found
                                    </div>
                                  </article>
                                </div>
                                <button
                                  aria-label="close"
                                  className="modal-close is-large"
                                  onClick={[Function]}
                                />
                              </div>
                            </Modal>
                          </div>
                        </Things>
                      </InjectIntl(Things)>
                    </ResetOnUnmount>
                  </Connect(ResetOnUnmount)>
                </Route>
              </withRouter(Connect(ResetOnUnmount))>
            </Connect(withRouter(Connect(ResetOnUnmount)))>
          </Router>
        </MemoryRouter>
      </IntlProvider>
    </IntlProvider>
  </Connect(IntlProvider)>
</Provider>
`;

exports[`containers/things simulates a click in a thing and in its actions 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <Connect(IntlProvider)
    store={
      Object {
        "clearActions": [Function],
        "dispatch": [Function],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      }
    }
  >
    <IntlProvider
      dispatch={[Function]}
      locale="en"
      messages={
        Object {
          "Custom": "Custom",
          "Data": "Data",
          "Delete": "Delete",
          "End date": "End date",
          "Error": "Error",
          "Event stats": "Event stats",
          "Events:": "Events:",
          "Filters": "Filters",
          "Google maps": "Google maps",
          "Group by": "Group by",
          "IP address:": "IP address:",
          "IoT": "IoT",
          "Last observation:": "Last observation:",
          "Login": "Login",
          "Logout": "Logout",
          "MQTT topic:": "MQTT topic:",
          "Measurement stats": "Measurement stats",
          "Measurement type": "Measurement type",
          "Measurements:": "Measurements:",
          "Observation": "Observation",
          "Password": "Password",
          "Real time": "Real time",
          "Request failed": "Request failed",
          "Reset": "Reset",
          "Start date": "Start date",
          "Stats": "Stats",
          "Thing": "Thing",
          "Thing not found": "Thing not found",
          "Things": "Things",
          "Time": "Time",
          "Time period": "Time period",
          "Type": "Type",
          "Username": "Username",
          "avg": "Average",
          "avgByHour": "Average by hour",
          "date": "Date",
          "day": "Day",
          "door-closed": "Door closed",
          "door-opened": "Door opened",
          "en": "English",
          "es": "Spanish",
          "event": "Event",
          "hour": "Hour",
          "humidity": "Humidity",
          "humidity-indoor": "Humidity indoor",
          "humidity-outdoor": "Humidity outdoor",
          "luminosity": "Luminosity",
          "max": "Maximum",
          "maxByHour": "Maximum by hour",
          "measurement": "Mesasurement",
          "min": "Minimum",
          "minByHour": "Minimum by hour",
          "minute": "Minute",
          "month": "Month",
          "second": "Second",
          "stdDev": "Standard deviation",
          "stdDevByHour": "Standard deviation by hour",
          "temperature": "Temperature",
          "temperature-indoor": "Temperature indoor",
          "temperature-outdoor": "Temperature outdoor",
          "thing": "Thing",
          "total": "Total",
          "week": "Week",
          "year": "Year",
        }
      }
      store={
        Object {
          "clearActions": [Function],
          "dispatch": [Function],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        }
      }
      storeSubscription={
        Subscription {
          "listeners": Object {
            "clear": [Function],
            "get": [Function],
            "notify": [Function],
            "subscribe": [Function],
          },
          "onStateChange": [Function],
          "parentSub": undefined,
          "store": Object {
            "clearActions": [Function],
            "dispatch": [Function],
            "getActions": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
          },
          "unsubscribe": [Function],
        }
      }
    >
      <IntlProvider
        key="en"
        locale="en"
        messages={
          Object {
            "Custom": "Custom",
            "Data": "Data",
            "Delete": "Delete",
            "End date": "End date",
            "Error": "Error",
            "Event stats": "Event stats",
            "Events:": "Events:",
            "Filters": "Filters",
            "Google maps": "Google maps",
            "Group by": "Group by",
            "IP address:": "IP address:",
            "IoT": "IoT",
            "Last observation:": "Last observation:",
            "Login": "Login",
            "Logout": "Logout",
            "MQTT topic:": "MQTT topic:",
            "Measurement stats": "Measurement stats",
            "Measurement type": "Measurement type",
            "Measurements:": "Measurements:",
            "Observation": "Observation",
            "Password": "Password",
            "Real time": "Real time",
            "Request failed": "Request failed",
            "Reset": "Reset",
            "Start date": "Start date",
            "Stats": "Stats",
            "Thing": "Thing",
            "Thing not found": "Thing not found",
            "Things": "Things",
            "Time": "Time",
            "Time period": "Time period",
            "Type": "Type",
            "Username": "Username",
            "avg": "Average",
            "avgByHour": "Average by hour",
            "date": "Date",
            "day": "Day",
            "door-closed": "Door closed",
            "door-opened": "Door opened",
            "en": "English",
            "es": "Spanish",
            "event": "Event",
            "hour": "Hour",
            "humidity": "Humidity",
            "humidity-indoor": "Humidity indoor",
            "humidity-outdoor": "Humidity outdoor",
            "luminosity": "Luminosity",
            "max": "Maximum",
            "maxByHour": "Maximum by hour",
            "measurement": "Mesasurement",
            "min": "Minimum",
            "minByHour": "Minimum by hour",
            "minute": "Minute",
            "month": "Month",
            "second": "Second",
            "stdDev": "Standard deviation",
            "stdDevByHour": "Standard deviation by hour",
            "temperature": "Temperature",
            "temperature-indoor": "Temperature indoor",
            "temperature-outdoor": "Temperature outdoor",
            "thing": "Thing",
            "total": "Total",
            "week": "Week",
            "year": "Year",
          }
        }
      >
        <MemoryRouter
          initialEntries={
            Array [
              "/",
            ]
          }
          keyLength={0}
        >
          <Router
            history={
              Object {
                "action": "PUSH",
                "block": [Function],
                "canGo": [Function],
                "createHref": [Function],
                "entries": Array [
                  Object {
                    "hash": "",
                    "pathname": "/",
                    "search": "",
                    "state": undefined,
                  },
                  Object {
                    "hash": "",
                    "pathname": "/things",
                    "search": "",
                    "state": undefined,
                  },
                ],
                "go": [Function],
                "goBack": [Function],
                "goForward": [Function],
                "index": 1,
                "length": 2,
                "listen": [Function],
                "location": Object {
                  "hash": "",
                  "pathname": "/things",
                  "search": "",
                  "state": undefined,
                },
                "push": [Function],
                "replace": [Function],
              }
            }
          >
            <Connect(withRouter(Connect(ResetOnUnmount)))>
              <withRouter(Connect(ResetOnUnmount))
                getThings={[Function]}
                isLoading={false}
                selectThing={[Function]}
                selectedThing={
                  Object {
                    "geometry": Object {
                      "coordinates": Array [
                        -40.58457,
                        40.21339,
                      ],
                      "type": "Point",
                    },
                    "googleMapsUrl": "https://www.google.es/maps",
                    "ip": "http://192.168.0.20",
                    "lastObservation": "2018-08-18T10:30:04.158Z",
                    "name": "foo",
                    "supportedObservationTypes": Object {
                      "event": Array [
                        "foo",
                        "bar",
                      ],
                      "measurement": Array [
                        "bar",
                        "foo",
                      ],
                    },
                    "topic": "bar",
                  }
                }
                showNotFoundError={[Function]}
                things={
                  Array [
                    Object {
                      "geometry": Object {
                        "coordinates": Array [
                          -40.58457,
                          40.21339,
                        ],
                        "type": "Point",
                      },
                      "googleMapsUrl": "https://www.google.es/maps",
                      "ip": "http://192.168.0.20",
                      "lastObservation": "2018-08-18T10:30:04.158Z",
                      "name": "foo",
                      "supportedObservationTypes": Object {
                        "event": Array [
                          "foo",
                          "bar",
                        ],
                        "measurement": Array [
                          "bar",
                          "foo",
                        ],
                      },
                      "topic": "bar",
                    },
                  ]
                }
              >
                <Route>
                  <Connect(ResetOnUnmount)
                    getThings={[Function]}
                    history={
                      Object {
                        "action": "PUSH",
                        "block": [Function],
                        "canGo": [Function],
                        "createHref": [Function],
                        "entries": Array [
                          Object {
                            "hash": "",
                            "pathname": "/",
                            "search": "",
                            "state": undefined,
                          },
                          Object {
                            "hash": "",
                            "pathname": "/things",
                            "search": "",
                            "state": undefined,
                          },
                        ],
                        "go": [Function],
                        "goBack": [Function],
                        "goForward": [Function],
                        "index": 1,
                        "length": 2,
                        "listen": [Function],
                        "location": Object {
                          "hash": "",
                          "pathname": "/things",
                          "search": "",
                          "state": undefined,
                        },
                        "push": [Function],
                        "replace": [Function],
                      }
                    }
                    isLoading={false}
                    location={
                      Object {
                        "hash": "",
                        "pathname": "/",
                        "search": "",
                        "state": undefined,
                      }
                    }
                    match={
                      Object {
                        "isExact": true,
                        "params": Object {},
                        "path": "/",
                        "url": "/",
                      }
                    }
                    selectThing={[Function]}
                    selectedThing={
                      Object {
                        "geometry": Object {
                          "coordinates": Array [
                            -40.58457,
                            40.21339,
                          ],
                          "type": "Point",
                        },
                        "googleMapsUrl": "https://www.google.es/maps",
                        "ip": "http://192.168.0.20",
                        "lastObservation": "2018-08-18T10:30:04.158Z",
                        "name": "foo",
                        "supportedObservationTypes": Object {
                          "event": Array [
                            "foo",
                            "bar",
                          ],
                          "measurement": Array [
                            "bar",
                            "foo",
                          ],
                        },
                        "topic": "bar",
                      }
                    }
                    showNotFoundError={[Function]}
                    things={
                      Array [
                        Object {
                          "geometry": Object {
                            "coordinates": Array [
                              -40.58457,
                              40.21339,
                            ],
                            "type": "Point",
                          },
                          "googleMapsUrl": "https://www.google.es/maps",
                          "ip": "http://192.168.0.20",
                          "lastObservation": "2018-08-18T10:30:04.158Z",
                          "name": "foo",
                          "supportedObservationTypes": Object {
                            "event": Array [
                              "foo",
                              "bar",
                            ],
                            "measurement": Array [
                              "bar",
                              "foo",
                            ],
                          },
                          "topic": "bar",
                        },
                      ]
                    }
                  >
                    <ResetOnUnmount
                      getThings={[Function]}
                      history={
                        Object {
                          "action": "PUSH",
                          "block": [Function],
                          "canGo": [Function],
                          "createHref": [Function],
                          "entries": Array [
                            Object {
                              "hash": "",
                              "pathname": "/",
                              "search": "",
                              "state": undefined,
                            },
                            Object {
                              "hash": "",
                              "pathname": "/things",
                              "search": "",
                              "state": undefined,
                            },
                          ],
                          "go": [Function],
                          "goBack": [Function],
                          "goForward": [Function],
                          "index": 1,
                          "length": 2,
                          "listen": [Function],
                          "location": Object {
                            "hash": "",
                            "pathname": "/things",
                            "search": "",
                            "state": undefined,
                          },
                          "push": [Function],
                          "replace": [Function],
                        }
                      }
                      isLoading={false}
                      location={
                        Object {
                          "hash": "",
                          "pathname": "/",
                          "search": "",
                          "state": undefined,
                        }
                      }
                      match={
                        Object {
                          "isExact": true,
                          "params": Object {},
                          "path": "/",
                          "url": "/",
                        }
                      }
                      reset={[Function]}
                      selectThing={[Function]}
                      selectedThing={
                        Object {
                          "geometry": Object {
                            "coordinates": Array [
                              -40.58457,
                              40.21339,
                            ],
                            "type": "Point",
                          },
                          "googleMapsUrl": "https://www.google.es/maps",
                          "ip": "http://192.168.0.20",
                          "lastObservation": "2018-08-18T10:30:04.158Z",
                          "name": "foo",
                          "supportedObservationTypes": Object {
                            "event": Array [
                              "foo",
                              "bar",
                            ],
                            "measurement": Array [
                              "bar",
                              "foo",
                            ],
                          },
                          "topic": "bar",
                        }
                      }
                      showNotFoundError={[Function]}
                      things={
                        Array [
                          Object {
                            "geometry": Object {
                              "coordinates": Array [
                                -40.58457,
                                40.21339,
                              ],
                              "type": "Point",
                            },
                            "googleMapsUrl": "https://www.google.es/maps",
                            "ip": "http://192.168.0.20",
                            "lastObservation": "2018-08-18T10:30:04.158Z",
                            "name": "foo",
                            "supportedObservationTypes": Object {
                              "event": Array [
                                "foo",
                                "bar",
                              ],
                              "measurement": Array [
                                "bar",
                                "foo",
                              ],
                            },
                            "topic": "bar",
                          },
                        ]
                      }
                    >
                      <InjectIntl(Things)
                        getThings={[Function]}
                        history={
                          Object {
                            "action": "PUSH",
                            "block": [Function],
                            "canGo": [Function],
                            "createHref": [Function],
                            "entries": Array [
                              Object {
                                "hash": "",
                                "pathname": "/",
                                "search": "",
                                "state": undefined,
                              },
                              Object {
                                "hash": "",
                                "pathname": "/things",
                                "search": "",
                                "state": undefined,
                              },
                            ],
                            "go": [Function],
                            "goBack": [Function],
                            "goForward": [Function],
                            "index": 1,
                            "length": 2,
                            "listen": [Function],
                            "location": Object {
                              "hash": "",
                              "pathname": "/things",
                              "search": "",
                              "state": undefined,
                            },
                            "push": [Function],
                            "replace": [Function],
                          }
                        }
                        isLoading={false}
                        location={
                          Object {
                            "hash": "",
                            "pathname": "/",
                            "search": "",
                            "state": undefined,
                          }
                        }
                        match={
                          Object {
                            "isExact": true,
                            "params": Object {},
                            "path": "/",
                            "url": "/",
                          }
                        }
                        reset={[Function]}
                        selectThing={[Function]}
                        selectedThing={
                          Object {
                            "geometry": Object {
                              "coordinates": Array [
                                -40.58457,
                                40.21339,
                              ],
                              "type": "Point",
                            },
                            "googleMapsUrl": "https://www.google.es/maps",
                            "ip": "http://192.168.0.20",
                            "lastObservation": "2018-08-18T10:30:04.158Z",
                            "name": "foo",
                            "supportedObservationTypes": Object {
                              "event": Array [
                                "foo",
                                "bar",
                              ],
                              "measurement": Array [
                                "bar",
                                "foo",
                              ],
                            },
                            "topic": "bar",
                          }
                        }
                        showNotFoundError={[Function]}
                        things={
                          Array [
                            Object {
                              "geometry": Object {
                                "coordinates": Array [
                                  -40.58457,
                                  40.21339,
                                ],
                                "type": "Point",
                              },
                              "googleMapsUrl": "https://www.google.es/maps",
                              "ip": "http://192.168.0.20",
                              "lastObservation": "2018-08-18T10:30:04.158Z",
                              "name": "foo",
                              "supportedObservationTypes": Object {
                                "event": Array [
                                  "foo",
                                  "bar",
                                ],
                                "measurement": Array [
                                  "bar",
                                  "foo",
                                ],
                              },
                              "topic": "bar",
                            },
                          ]
                        }
                      >
                        <Things
                          getThings={[Function]}
                          history={
                            Object {
                              "action": "PUSH",
                              "block": [Function],
                              "canGo": [Function],
                              "createHref": [Function],
                              "entries": Array [
                                Object {
                                  "hash": "",
                                  "pathname": "/",
                                  "search": "",
                                  "state": undefined,
                                },
                                Object {
                                  "hash": "",
                                  "pathname": "/things",
                                  "search": "",
                                  "state": undefined,
                                },
                              ],
                              "go": [Function],
                              "goBack": [Function],
                              "goForward": [Function],
                              "index": 1,
                              "length": 2,
                              "listen": [Function],
                              "location": Object {
                                "hash": "",
                                "pathname": "/things",
                                "search": "",
                                "state": undefined,
                              },
                              "push": [Function],
                              "replace": [Function],
                            }
                          }
                          intl={
                            Object {
                              "defaultFormats": Object {},
                              "defaultLocale": "en",
                              "formatDate": [Function],
                              "formatHTMLMessage": [Function],
                              "formatMessage": [Function],
                              "formatNumber": [Function],
                              "formatPlural": [Function],
                              "formatRelative": [Function],
                              "formatTime": [Function],
                              "formats": Object {},
                              "formatters": Object {
                                "getDateTimeFormat": [Function],
                                "getMessageFormat": [Function],
                                "getNumberFormat": [Function],
                                "getPluralFormat": [Function],
                                "getRelativeFormat": [Function],
                              },
                              "locale": "en",
                              "messages": Object {
                                "Custom": "Custom",
                                "Data": "Data",
                                "Delete": "Delete",
                                "End date": "End date",
                                "Error": "Error",
                                "Event stats": "Event stats",
                                "Events:": "Events:",
                                "Filters": "Filters",
                                "Google maps": "Google maps",
                                "Group by": "Group by",
                                "IP address:": "IP address:",
                                "IoT": "IoT",
                                "Last observation:": "Last observation:",
                                "Login": "Login",
                                "Logout": "Logout",
                                "MQTT topic:": "MQTT topic:",
                                "Measurement stats": "Measurement stats",
                                "Measurement type": "Measurement type",
                                "Measurements:": "Measurements:",
                                "Observation": "Observation",
                                "Password": "Password",
                                "Real time": "Real time",
                                "Request failed": "Request failed",
                                "Reset": "Reset",
                                "Start date": "Start date",
                                "Stats": "Stats",
                                "Thing": "Thing",
                                "Thing not found": "Thing not found",
                                "Things": "Things",
                                "Time": "Time",
                                "Time period": "Time period",
                                "Type": "Type",
                                "Username": "Username",
                                "avg": "Average",
                                "avgByHour": "Average by hour",
                                "date": "Date",
                                "day": "Day",
                                "door-closed": "Door closed",
                                "door-opened": "Door opened",
                                "en": "English",
                                "es": "Spanish",
                                "event": "Event",
                                "hour": "Hour",
                                "humidity": "Humidity",
                                "humidity-indoor": "Humidity indoor",
                                "humidity-outdoor": "Humidity outdoor",
                                "luminosity": "Luminosity",
                                "max": "Maximum",
                                "maxByHour": "Maximum by hour",
                                "measurement": "Mesasurement",
                                "min": "Minimum",
                                "minByHour": "Minimum by hour",
                                "minute": "Minute",
                                "month": "Month",
                                "second": "Second",
                                "stdDev": "Standard deviation",
                                "stdDevByHour": "Standard deviation by hour",
                                "temperature": "Temperature",
                                "temperature-indoor": "Temperature indoor",
                                "temperature-outdoor": "Temperature outdoor",
                                "thing": "Thing",
                                "total": "Total",
                                "week": "Week",
                                "year": "Year",
                              },
                              "now": [Function],
                              "onError": [Function],
                              "textComponent": "span",
                              "timeZone": null,
                            }
                          }
                          isLoading={false}
                          location={
                            Object {
                              "hash": "",
                              "pathname": "/",
                              "search": "",
                              "state": undefined,
                            }
                          }
                          match={
                            Object {
                              "isExact": true,
                              "params": Object {},
                              "path": "/",
                              "url": "/",
                            }
                          }
                          reset={[Function]}
                          selectThing={[Function]}
                          selectedThing={
                            Object {
                              "geometry": Object {
                                "coordinates": Array [
                                  -40.58457,
                                  40.21339,
                                ],
                                "type": "Point",
                              },
                              "googleMapsUrl": "https://www.google.es/maps",
                              "ip": "http://192.168.0.20",
                              "lastObservation": "2018-08-18T10:30:04.158Z",
                              "name": "foo",
                              "supportedObservationTypes": Object {
                                "event": Array [
                                  "foo",
                                  "bar",
                                ],
                                "measurement": Array [
                                  "bar",
                                  "foo",
                                ],
                              },
                              "topic": "bar",
                            }
                          }
                          shouldShowNotFoundError={false}
                          showNotFoundError={[Function]}
                          things={
                            Array [
                              Object {
                                "geometry": Object {
                                  "coordinates": Array [
                                    -40.58457,
                                    40.21339,
                                  ],
                                  "type": "Point",
                                },
                                "googleMapsUrl": "https://www.google.es/maps",
                                "ip": "http://192.168.0.20",
                                "lastObservation": "2018-08-18T10:30:04.158Z",
                                "name": "foo",
                                "supportedObservationTypes": Object {
                                  "event": Array [
                                    "foo",
                                    "bar",
                                  ],
                                  "measurement": Array [
                                    "bar",
                                    "foo",
                                  ],
                                },
                                "topic": "bar",
                              },
                            ]
                          }
                        >
                          <div>
                            <div
                              className="container is-fluid section"
                            >
                              <div
                                className="columns"
                              >
                                <div
                                  className="column is-one-quarter"
                                >
                                  <ThingItem
                                    isSelected={true}
                                    key="foo"
                                    name="foo"
                                    onClick={[Function]}
                                  >
                                    <div
                                      className="thing-item-card is-selected"
                                      onClick={[Function]}
                                      onKeyPress={[Function]}
                                      role="button"
                                      tabIndex={0}
                                    >
                                      <div
                                        className="card-content"
                                      >
                                        <div
                                          className="content"
                                        >
                                          <p
                                            className="title is-6"
                                          >
                                            foo
                                          </p>
                                        </div>
                                      </div>
                                    </div>
                                  </ThingItem>
                                </div>
                                <div
                                  className="column is-three-quarters"
                                >
                                  <InjectIntl(ThingDetail)
                                    onDataClick={[Function]}
                                    onStatsClick={[Function]}
                                    thing={
                                      Object {
                                        "geometry": Object {
                                          "coordinates": Array [
                                            -40.58457,
                                            40.21339,
                                          ],
                                          "type": "Point",
                                        },
                                        "googleMapsUrl": "https://www.google.es/maps",
                                        "ip": "http://192.168.0.20",
                                        "lastObservation": "2018-08-18T10:30:04.158Z",
                                        "name": "foo",
                                        "supportedObservationTypes": Object {
                                          "event": Array [
                                            "foo",
                                            "bar",
                                          ],
                                          "measurement": Array [
                                            "bar",
                                            "foo",
                                          ],
                                        },
                                        "topic": "bar",
                                      }
                                    }
                                  >
                                    <ThingDetail
                                      intl={
                                        Object {
                                          "defaultFormats": Object {},
                                          "defaultLocale": "en",
                                          "formatDate": [Function],
                                          "formatHTMLMessage": [Function],
                                          "formatMessage": [Function],
                                          "formatNumber": [Function],
                                          "formatPlural": [Function],
                                          "formatRelative": [Function],
                                          "formatTime": [Function],
                                          "formats": Object {},
                                          "formatters": Object {
                                            "getDateTimeFormat": [Function],
                                            "getMessageFormat": [Function],
                                            "getNumberFormat": [Function],
                                            "getPluralFormat": [Function],
                                            "getRelativeFormat": [Function],
                                          },
                                          "locale": "en",
                                          "messages": Object {
                                            "Custom": "Custom",
                                            "Data": "Data",
                                            "Delete": "Delete",
                                            "End date": "End date",
                                            "Error": "Error",
                                            "Event stats": "Event stats",
                                            "Events:": "Events:",
                                            "Filters": "Filters",
                                            "Google maps": "Google maps",
                                            "Group by": "Group by",
                                            "IP address:": "IP address:",
                                            "IoT": "IoT",
                                            "Last observation:": "Last observation:",
                                            "Login": "Login",
                                            "Logout": "Logout",
                                            "MQTT topic:": "MQTT topic:",
                                            "Measurement stats": "Measurement stats",
                                            "Measurement type": "Measurement type",
                                            "Measurements:": "Measurements:",
                                            "Observation": "Observation",
                                            "Password": "Password",
                                            "Real time": "Real time",
                                            "Request failed": "Request failed",
                                            "Reset": "Reset",
                                            "Start date": "Start date",
                                            "Stats": "Stats",
                                            "Thing": "Thing",
                                            "Thing not found": "Thing not found",
                                            "Things": "Things",
                                            "Time": "Time",
                                            "Time period": "Time period",
                                            "Type": "Type",
                                            "Username": "Username",
                                            "avg": "Average",
                                            "avgByHour": "Average by hour",
                                            "date": "Date",
                                            "day": "Day",
                                            "door-closed": "Door closed",
                                            "door-opened": "Door opened",
                                            "en": "English",
                                            "es": "Spanish",
                                            "event": "Event",
                                            "hour": "Hour",
                                            "humidity": "Humidity",
                                            "humidity-indoor": "Humidity indoor",
                                            "humidity-outdoor": "Humidity outdoor",
                                            "luminosity": "Luminosity",
                                            "max": "Maximum",
                                            "maxByHour": "Maximum by hour",
                                            "measurement": "Mesasurement",
                                            "min": "Minimum",
                                            "minByHour": "Minimum by hour",
                                            "minute": "Minute",
                                            "month": "Month",
                                            "second": "Second",
                                            "stdDev": "Standard deviation",
                                            "stdDevByHour": "Standard deviation by hour",
                                            "temperature": "Temperature",
                                            "temperature-indoor": "Temperature indoor",
                                            "temperature-outdoor": "Temperature outdoor",
                                            "thing": "Thing",
                                            "total": "Total",
                                            "week": "Week",
                                            "year": "Year",
                                          },
                                          "now": [Function],
                                          "onError": [Function],
                                          "textComponent": "span",
                                          "timeZone": null,
                                        }
                                      }
                                      onDataClick={[Function]}
                                      onStatsClick={[Function]}
                                      thing={
                                        Object {
                                          "geometry": Object {
                                            "coordinates": Array [
                                              -40.58457,
                                              40.21339,
                                            ],
                                            "type": "Point",
                                          },
                                          "googleMapsUrl": "https://www.google.es/maps",
                                          "ip": "http://192.168.0.20",
                                          "lastObservation": "2018-08-18T10:30:04.158Z",
                                          "name": "foo",
                                          "supportedObservationTypes": Object {
                                            "event": Array [
                                              "foo",
                                              "bar",
                                            ],
                                            "measurement": Array [
                                              "bar",
                                              "foo",
                                            ],
                                          },
                                          "topic": "bar",
                                        }
                                      }
                                    >
                                      <div
                                        className="card"
                                      >
                                        <div
                                          className="card-content"
                                        >
                                          <div
                                            className="columns"
                                          >
                                            <div
                                              className="column is-three-fifths has-text-centered"
                                            >
                                              <p
                                                className="title is-3 has-text-primary is-spaced"
                                              >
                                                foo
                                              </p>
                                              <p
                                                className="title is-6"
                                              >
                                                <FormattedMessage
                                                  id="IP address:"
                                                  values={Object {}}
                                                >
                                                  <strong>
                                                    IP address:
                                                  </strong>
                                                </FormattedMessage>
                                                 
                                                <a
                                                  href="http://http://192.168.0.20"
                                                  rel="noopener noreferrer"
                                                  target="_blank"
                                                >
                                                  http://192.168.0.20
                                                </a>
                                              </p>
                                              <p
                                                className="title is-6"
                                              >
                                                <FormattedMessage
                                                  id="MQTT topic:"
                                                  values={Object {}}
                                                >
                                                  <strong>
                                                    MQTT topic:
                                                  </strong>
                                                </FormattedMessage>
                                                 
                                                <span
                                                  className="has-text-info"
                                                >
                                                  bar
                                                </span>
                                              </p>
                                              <p
                                                className="title is-6"
                                              >
                                                <FormattedMessage
                                                  id="Last observation:"
                                                  values={Object {}}
                                                >
                                                  <strong>
                                                    Last observation:
                                                  </strong>
                                                </FormattedMessage>
                                                 
                                                <span
                                                  className="has-text-info"
                                                >
                                                  Mock Date
                                                </span>
                                              </p>
                                              <TagList
                                                label="Events:"
                                                onTagClick={[Function]}
                                                tagStyle="is-warning"
                                                tags={
                                                  Array [
                                                    "foo",
                                                    "bar",
                                                  ]
                                                }
                                              >
                                                <div
                                                  className="tag-list"
                                                >
                                                  <p
                                                    className="tag-list-label is-6"
                                                  >
                                                    <FormattedMessage
                                                      id="Events:"
                                                      values={Object {}}
                                                    >
                                                      <strong>
                                                        Events:
                                                      </strong>
                                                    </FormattedMessage>
                                                  </p>
                                                  <div
                                                    className="tags"
                                                  >
                                                    <FormattedMessage
                                                      defaultMessage="foo"
                                                      id="foo"
                                                      key="foo"
                                                      values={Object {}}
                                                    >
                                                      <a
                                                        className="tag is-warning"
                                                        onClick={[Function]}
                                                        onKeyPress={[Function]}
                                                        role="link"
                                                        tabIndex={0}
                                                      >
                                                        foo
                                                      </a>
                                                    </FormattedMessage>
                                                    <FormattedMessage
                                                      defaultMessage="bar"
                                                      id="bar"
                                                      key="bar"
                                                      values={Object {}}
                                                    >
                                                      <a
                                                        className="tag is-warning"
                                                        onClick={[Function]}
                                                        onKeyPress={[Function]}
                                                        role="link"
                                                        tabIndex={0}
                                                      >
                                                        bar
                                                      </a>
                                                    </FormattedMessage>
                                                  </div>
                                                </div>
                                              </TagList>
                                              <TagList
                                                label="Measurements:"
                                                onTagClick={[Function]}
                                                tagStyle="is-warning"
                                                tags={
                                                  Array [
                                                    "bar",
                                                    "foo",
                                                  ]
                                                }
                                              >
                                                <div
                                                  className="tag-list"
                                                >
                                                  <p
                                                    className="tag-list-label is-6"
                                                  >
                                                    <FormattedMessage
                                                      id="Measurements:"
                                                      values={Object {}}
                                                    >
                                                      <strong>
                                                        Measurements:
                                                      </strong>
                                                    </FormattedMessage>
                                                  </p>
                                                  <div
                                                    className="tags"
                                                  >
                                                    <FormattedMessage
                                                      defaultMessage="bar"
                                                      id="bar"
                                                      key="bar"
                                                      values={Object {}}
                                                    >
                                                      <a
                                                        className="tag is-warning"
                                                        onClick={[Function]}
                                                        onKeyPress={[Function]}
                                                        role="link"
                                                        tabIndex={0}
                                                      >
                                                        bar
                                                      </a>
                                                    </FormattedMessage>
                                                    <FormattedMessage
                                                      defaultMessage="foo"
                                                      id="foo"
                                                      key="foo"
                                                      values={Object {}}
                                                    >
                                                      <a
                                                        className="tag is-warning"
                                                        onClick={[Function]}
                                                        onKeyPress={[Function]}
                                                        role="link"
                                                        tabIndex={0}
                                                      >
                                                        foo
                                                      </a>
                                                    </FormattedMessage>
                                                  </div>
                                                </div>
                                              </TagList>
                                              <ThingActions
                                                onStatsClick={[Function]}
                                                thing={
                                                  Object {
                                                    "geometry": Object {
                                                      "coordinates": Array [
                                                        -40.58457,
                                                        40.21339,
                                                      ],
                                                      "type": "Point",
                                                    },
                                                    "googleMapsUrl": "https://www.google.es/maps",
                                                    "ip": "http://192.168.0.20",
                                                    "lastObservation": "2018-08-18T10:30:04.158Z",
                                                    "name": "foo",
                                                    "supportedObservationTypes": Object {
                                                      "event": Array [
                                                        "foo",
                                                        "bar",
                                                      ],
                                                      "measurement": Array [
                                                        "bar",
                                                        "foo",
                                                      ],
                                                    },
                                                    "topic": "bar",
                                                  }
                                                }
                                              >
                                                <p
                                                  className="buttons is-horizontal-center"
                                                >
                                                  <a
                                                    className="button"
                                                    href="https://www.google.es/maps"
                                                    id="google-maps-link"
                                                    rel="noopener noreferrer"
                                                    target="_blank"
                                                  >
                                                    <span
                                                      className="icon"
                                                    >
                                                      <i
                                                        className="fas fa-map-marked"
                                                      />
                                                    </span>
                                                    <FormattedMessage
                                                      id="Google maps"
                                                      values={Object {}}
                                                    >
                                                      <span>
                                                        Google maps
                                                      </span>
                                                    </FormattedMessage>
                                                  </a>
                                                  <button
                                                    className="button"
                                                    id="event-stats-button"
                                                    onClick={[Function]}
                                                  >
                                                    <span
                                                      className="icon"
                                                    >
                                                      <i
                                                        className="fas fa-chart-bar"
                                                      />
                                                    </span>
                                                    <FormattedMessage
                                                      id="Event stats"
                                                      values={Object {}}
                                                    >
                                                      <span>
                                                        Event stats
                                                      </span>
                                                    </FormattedMessage>
                                                  </button>
                                                  <button
                                                    className="button"
                                                    id="measurement-stats-button"
                                                    onClick={[Function]}
                                                  >
                                                    <span
                                                      className="icon"
                                                    >
                                                      <i
                                                        className="fas fa-chart-bar"
                                                      />
                                                    </span>
                                                    <FormattedMessage
                                                      id="Measurement stats"
                                                      values={Object {}}
                                                    >
                                                      <span>
                                                        Measurement stats
                                                      </span>
                                                    </FormattedMessage>
                                                  </button>
                                                </p>
                                              </ThingActions>
                                            </div>
                                            <div
                                              className="column is-two-fifths"
                                            >
                                              <Connect(withProps(withScriptjs(withGoogleMap(Map))))
                                                marker={
                                                  Object {
                                                    "label": "foo",
                                                    "point": Object {
                                                      "lat": 40.21339,
                                                      "lng": -40.58457,
                                                    },
                                                  }
                                                }
                                              >
                                                <withProps(withScriptjs(withGoogleMap(Map)))
                                                  isDialogOpened={false}
                                                  marker={
                                                    Object {
                                                      "label": "foo",
                                                      "point": Object {
                                                        "lat": 40.21339,
                                                        "lng": -40.58457,
                                                      },
                                                    }
                                                  }
                                                  toggleDialog={[Function]}
                                                >
                                                  <withScriptjs(withGoogleMap(Map))
                                                    center={
                                                      Object {
                                                        "lat": 40.21339,
                                                        "lng": -40.58457,
                                                      }
                                                    }
                                                    containerElement={
                                                      <div
                                                        className="map"
                                                      />
                                                    }
                                                    googleMapURL="https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=geometry,drawing,places"
                                                    isDialogOpened={false}
                                                    label="foo"
                                                    loadingElement={
                                                      <div
                                                        style={
                                                          Object {
                                                            "height": "100%",
                                                          }
                                                        }
                                                      />
                                                    }
                                                    mapElement={
                                                      <div
                                                        style={
                                                          Object {
                                                            "height": "100%",
                                                          }
                                                        }
                                                      />
                                                    }
                                                    marker={
                                                      Object {
                                                        "label": "foo",
                                                        "point": Object {
                                                          "lat": 40.21339,
                                                          "lng": -40.58457,
                                                        },
                                                      }
                                                    }
                                                    point={
                                                      Object {
                                                        "lat": 40.21339,
                                                        "lng": -40.58457,
                                                      }
                                                    }
                                                    toggleDialog={[Function]}
                                                    zoom={12}
                                                  >
                                                    <div
                                                      style={
                                                        Object {
                                                          "height": "100%",
                                                        }
                                                      }
                                                    />
                                                  </withScriptjs(withGoogleMap(Map))>
                                                </withProps(withScriptjs(withGoogleMap(Map)))>
                                              </Connect(withProps(withScriptjs(withGoogleMap(Map))))>
                                            </div>
                                          </div>
                                        </div>
                                      </div>
                                    </ThingDetail>
                                  </InjectIntl(ThingDetail)>
                                </div>
                              </div>
                            </div>
                            <Modal
                              isActive={false}
                              messageStyle="is-danger"
                              onCloseClick={[Function]}
                              subTitle="Thing not found"
                              title="Error"
                            >
                              <div
                                className="modal"
                              >
                                <div
                                  className="modal-background"
                                  onClick={[Function]}
                                  onKeyPress={[Function]}
                                  role="button"
                                  tabIndex={0}
                                />
                                <div
                                  className="modal-content"
                                >
                                  <article
                                    className="message is-medium is-danger"
                                  >
                                    <div
                                      className="message-header"
                                    >
                                      <p>
                                        Error
                                      </p>
                                    </div>
                                    <div
                                      className="message-body has-text-centered"
                                    >
                                      Thing not found
                                    </div>
                                  </article>
                                </div>
                                <button
                                  aria-label="close"
                                  className="modal-close is-large"
                                  onClick={[Function]}
                                />
                              </div>
                            </Modal>
                          </div>
                        </Things>
                      </InjectIntl(Things)>
                    </ResetOnUnmount>
                  </Connect(ResetOnUnmount)>
                </Route>
              </withRouter(Connect(ResetOnUnmount))>
            </Connect(withRouter(Connect(ResetOnUnmount)))>
          </Router>
        </MemoryRouter>
      </IntlProvider>
    </IntlProvider>
  </Connect(IntlProvider)>
</Provider>
`;
