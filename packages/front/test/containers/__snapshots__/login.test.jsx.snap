// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`containers/login renders login in initial state and unmounts 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <Connect(IntlProvider)
    store={
      Object {
        "clearActions": [Function],
        "dispatch": [Function],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      }
    }
  >
    <IntlProvider
      dispatch={[Function]}
      locale="en"
      messages={
        Object {
          "Custom": "Custom",
          "Data": "Data",
          "Delete": "Delete",
          "End date": "End date",
          "Error": "Error",
          "Event stats": "Event stats",
          "Events:": "Events:",
          "Filters": "Filters",
          "Google maps": "Google maps",
          "Group by": "Group by",
          "IP address:": "IP address:",
          "IoT": "IoT",
          "Last observation:": "Last observation:",
          "Login": "Login",
          "Logout": "Logout",
          "MQTT topic:": "MQTT topic:",
          "Measurement stats": "Measurement stats",
          "Measurement type": "Measurement type",
          "Measurements:": "Measurements:",
          "Observation": "Observation",
          "Password": "Password",
          "Real time": "Real time",
          "Request failed": "Request failed",
          "Reset": "Reset",
          "Start date": "Start date",
          "Stats": "Stats",
          "Thing": "Thing",
          "Thing not found": "Thing not found",
          "Things": "Things",
          "Time": "Time",
          "Time period": "Time period",
          "Type": "Type",
          "Username": "Username",
          "avg": "Average",
          "avgByHour": "Average by hour",
          "date": "Date",
          "day": "Day",
          "door-closed": "Door closed",
          "door-opened": "Door opened",
          "en": "English",
          "es": "Spanish",
          "event": "Event",
          "hour": "Hour",
          "humidity": "Humidity",
          "humidity-indoor": "Humidity indoor",
          "humidity-outdoor": "Humidity outdoor",
          "luminosity": "Luminosity",
          "max": "Maximum",
          "maxByHour": "Maximum by hour",
          "measurement": "Mesasurement",
          "min": "Minimum",
          "minByHour": "Minimum by hour",
          "minute": "Minute",
          "month": "Month",
          "second": "Second",
          "stdDev": "Standard deviation",
          "stdDevByHour": "Standard deviation by hour",
          "temperature": "Temperature",
          "temperature-indoor": "Temperature indoor",
          "temperature-outdoor": "Temperature outdoor",
          "thing": "Thing",
          "total": "Total",
          "week": "Week",
          "year": "Year",
        }
      }
      store={
        Object {
          "clearActions": [Function],
          "dispatch": [Function],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        }
      }
      storeSubscription={
        Subscription {
          "listeners": Object {
            "clear": [Function],
            "get": [Function],
            "notify": [Function],
            "subscribe": [Function],
          },
          "onStateChange": [Function],
          "parentSub": undefined,
          "store": Object {
            "clearActions": [Function],
            "dispatch": [Function],
            "getActions": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
          },
          "unsubscribe": [Function],
        }
      }
    >
      <IntlProvider
        key="en"
        locale="en"
        messages={
          Object {
            "Custom": "Custom",
            "Data": "Data",
            "Delete": "Delete",
            "End date": "End date",
            "Error": "Error",
            "Event stats": "Event stats",
            "Events:": "Events:",
            "Filters": "Filters",
            "Google maps": "Google maps",
            "Group by": "Group by",
            "IP address:": "IP address:",
            "IoT": "IoT",
            "Last observation:": "Last observation:",
            "Login": "Login",
            "Logout": "Logout",
            "MQTT topic:": "MQTT topic:",
            "Measurement stats": "Measurement stats",
            "Measurement type": "Measurement type",
            "Measurements:": "Measurements:",
            "Observation": "Observation",
            "Password": "Password",
            "Real time": "Real time",
            "Request failed": "Request failed",
            "Reset": "Reset",
            "Start date": "Start date",
            "Stats": "Stats",
            "Thing": "Thing",
            "Thing not found": "Thing not found",
            "Things": "Things",
            "Time": "Time",
            "Time period": "Time period",
            "Type": "Type",
            "Username": "Username",
            "avg": "Average",
            "avgByHour": "Average by hour",
            "date": "Date",
            "day": "Day",
            "door-closed": "Door closed",
            "door-opened": "Door opened",
            "en": "English",
            "es": "Spanish",
            "event": "Event",
            "hour": "Hour",
            "humidity": "Humidity",
            "humidity-indoor": "Humidity indoor",
            "humidity-outdoor": "Humidity outdoor",
            "luminosity": "Luminosity",
            "max": "Maximum",
            "maxByHour": "Maximum by hour",
            "measurement": "Mesasurement",
            "min": "Minimum",
            "minByHour": "Minimum by hour",
            "minute": "Minute",
            "month": "Month",
            "second": "Second",
            "stdDev": "Standard deviation",
            "stdDevByHour": "Standard deviation by hour",
            "temperature": "Temperature",
            "temperature-indoor": "Temperature indoor",
            "temperature-outdoor": "Temperature outdoor",
            "thing": "Thing",
            "total": "Total",
            "week": "Week",
            "year": "Year",
          }
        }
      >
        <Connect(Connect(ResetOnUnmount))>
          <Connect(ResetOnUnmount)
            isAuth={[Function]}
            isLoading={false}
            login={[Function]}
            logout={[Function]}
            password={null}
            setPassword={[Function]}
            setUsername={[Function]}
            username={null}
          >
            <ResetOnUnmount
              isAuth={[Function]}
              isLoading={false}
              login={[Function]}
              logout={[Function]}
              password={null}
              reset={[Function]}
              setPassword={[Function]}
              setUsername={[Function]}
              username={null}
            >
              <InjectIntl(Login)
                isAuth={[Function]}
                isLoading={false}
                login={[Function]}
                logout={[Function]}
                password={null}
                reset={[Function]}
                setPassword={[Function]}
                setUsername={[Function]}
                username={null}
              >
                <Login
                  intl={
                    Object {
                      "defaultFormats": Object {},
                      "defaultLocale": "en",
                      "formatDate": [Function],
                      "formatHTMLMessage": [Function],
                      "formatMessage": [Function],
                      "formatNumber": [Function],
                      "formatPlural": [Function],
                      "formatRelative": [Function],
                      "formatTime": [Function],
                      "formats": Object {},
                      "formatters": Object {
                        "getDateTimeFormat": [Function],
                        "getMessageFormat": [Function],
                        "getNumberFormat": [Function],
                        "getPluralFormat": [Function],
                        "getRelativeFormat": [Function],
                      },
                      "locale": "en",
                      "messages": Object {
                        "Custom": "Custom",
                        "Data": "Data",
                        "Delete": "Delete",
                        "End date": "End date",
                        "Error": "Error",
                        "Event stats": "Event stats",
                        "Events:": "Events:",
                        "Filters": "Filters",
                        "Google maps": "Google maps",
                        "Group by": "Group by",
                        "IP address:": "IP address:",
                        "IoT": "IoT",
                        "Last observation:": "Last observation:",
                        "Login": "Login",
                        "Logout": "Logout",
                        "MQTT topic:": "MQTT topic:",
                        "Measurement stats": "Measurement stats",
                        "Measurement type": "Measurement type",
                        "Measurements:": "Measurements:",
                        "Observation": "Observation",
                        "Password": "Password",
                        "Real time": "Real time",
                        "Request failed": "Request failed",
                        "Reset": "Reset",
                        "Start date": "Start date",
                        "Stats": "Stats",
                        "Thing": "Thing",
                        "Thing not found": "Thing not found",
                        "Things": "Things",
                        "Time": "Time",
                        "Time period": "Time period",
                        "Type": "Type",
                        "Username": "Username",
                        "avg": "Average",
                        "avgByHour": "Average by hour",
                        "date": "Date",
                        "day": "Day",
                        "door-closed": "Door closed",
                        "door-opened": "Door opened",
                        "en": "English",
                        "es": "Spanish",
                        "event": "Event",
                        "hour": "Hour",
                        "humidity": "Humidity",
                        "humidity-indoor": "Humidity indoor",
                        "humidity-outdoor": "Humidity outdoor",
                        "luminosity": "Luminosity",
                        "max": "Maximum",
                        "maxByHour": "Maximum by hour",
                        "measurement": "Mesasurement",
                        "min": "Minimum",
                        "minByHour": "Minimum by hour",
                        "minute": "Minute",
                        "month": "Month",
                        "second": "Second",
                        "stdDev": "Standard deviation",
                        "stdDevByHour": "Standard deviation by hour",
                        "temperature": "Temperature",
                        "temperature-indoor": "Temperature indoor",
                        "temperature-outdoor": "Temperature outdoor",
                        "thing": "Thing",
                        "total": "Total",
                        "week": "Week",
                        "year": "Year",
                      },
                      "now": [Function],
                      "onError": [Function],
                      "textComponent": "span",
                      "timeZone": null,
                    }
                  }
                  isAuth={[Function]}
                  isLoading={false}
                  login={[Function]}
                  logout={[Function]}
                  password={null}
                  reset={[Function]}
                  setPassword={[Function]}
                  setUsername={[Function]}
                  username={null}
                >
                  <section
                    className="hero is-fullheight"
                  >
                    <div
                      className="hero-body"
                    >
                      <div
                        className="container has-text-centered"
                      >
                        <div
                          className="column is-4 is-offset-4"
                        >
                          <div
                            className="box"
                          >
                            <p
                              className="title is-1"
                            >
                              IoT
                            </p>
                            <form>
                              <div
                                className="field"
                              >
                                <div
                                  className="control has-icons-left"
                                >
                                  <input
                                    className="input is-large"
                                    id="username-input"
                                    onChange={[Function]}
                                    placeholder="Username"
                                    value=""
                                  />
                                  <span
                                    className="icon is-large is-left"
                                  >
                                    <i
                                      className="fas fa-user"
                                    />
                                  </span>
                                </div>
                              </div>
                              <div
                                className="field"
                              >
                                <div
                                  className="control has-icons-left"
                                >
                                  <input
                                    className="input is-large"
                                    id="password-input"
                                    onChange={[Function]}
                                    placeholder="Password"
                                    type="password"
                                    value=""
                                  />
                                  <span
                                    className="icon is-large is-left"
                                  >
                                    <i
                                      className="fas fa-lock"
                                    />
                                  </span>
                                </div>
                              </div>
                              <button
                                className="button is-block is-primary is-large is-fullwidth"
                                disabled={false}
                                id="login-button"
                                onClick={[Function]}
                              >
                                Login
                              </button>
                            </form>
                          </div>
                        </div>
                      </div>
                    </div>
                  </section>
                </Login>
              </InjectIntl(Login)>
            </ResetOnUnmount>
          </Connect(ResetOnUnmount)>
        </Connect(Connect(ResetOnUnmount))>
      </IntlProvider>
    </IntlProvider>
  </Connect(IntlProvider)>
</Provider>
`;

exports[`containers/login renders login in loading state 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <Connect(IntlProvider)
    store={
      Object {
        "clearActions": [Function],
        "dispatch": [Function],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      }
    }
  >
    <IntlProvider
      dispatch={[Function]}
      locale="en"
      messages={
        Object {
          "Custom": "Custom",
          "Data": "Data",
          "Delete": "Delete",
          "End date": "End date",
          "Error": "Error",
          "Event stats": "Event stats",
          "Events:": "Events:",
          "Filters": "Filters",
          "Google maps": "Google maps",
          "Group by": "Group by",
          "IP address:": "IP address:",
          "IoT": "IoT",
          "Last observation:": "Last observation:",
          "Login": "Login",
          "Logout": "Logout",
          "MQTT topic:": "MQTT topic:",
          "Measurement stats": "Measurement stats",
          "Measurement type": "Measurement type",
          "Measurements:": "Measurements:",
          "Observation": "Observation",
          "Password": "Password",
          "Real time": "Real time",
          "Request failed": "Request failed",
          "Reset": "Reset",
          "Start date": "Start date",
          "Stats": "Stats",
          "Thing": "Thing",
          "Thing not found": "Thing not found",
          "Things": "Things",
          "Time": "Time",
          "Time period": "Time period",
          "Type": "Type",
          "Username": "Username",
          "avg": "Average",
          "avgByHour": "Average by hour",
          "date": "Date",
          "day": "Day",
          "door-closed": "Door closed",
          "door-opened": "Door opened",
          "en": "English",
          "es": "Spanish",
          "event": "Event",
          "hour": "Hour",
          "humidity": "Humidity",
          "humidity-indoor": "Humidity indoor",
          "humidity-outdoor": "Humidity outdoor",
          "luminosity": "Luminosity",
          "max": "Maximum",
          "maxByHour": "Maximum by hour",
          "measurement": "Mesasurement",
          "min": "Minimum",
          "minByHour": "Minimum by hour",
          "minute": "Minute",
          "month": "Month",
          "second": "Second",
          "stdDev": "Standard deviation",
          "stdDevByHour": "Standard deviation by hour",
          "temperature": "Temperature",
          "temperature-indoor": "Temperature indoor",
          "temperature-outdoor": "Temperature outdoor",
          "thing": "Thing",
          "total": "Total",
          "week": "Week",
          "year": "Year",
        }
      }
      store={
        Object {
          "clearActions": [Function],
          "dispatch": [Function],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        }
      }
      storeSubscription={
        Subscription {
          "listeners": Object {
            "clear": [Function],
            "get": [Function],
            "notify": [Function],
            "subscribe": [Function],
          },
          "onStateChange": [Function],
          "parentSub": undefined,
          "store": Object {
            "clearActions": [Function],
            "dispatch": [Function],
            "getActions": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
          },
          "unsubscribe": [Function],
        }
      }
    >
      <IntlProvider
        key="en"
        locale="en"
        messages={
          Object {
            "Custom": "Custom",
            "Data": "Data",
            "Delete": "Delete",
            "End date": "End date",
            "Error": "Error",
            "Event stats": "Event stats",
            "Events:": "Events:",
            "Filters": "Filters",
            "Google maps": "Google maps",
            "Group by": "Group by",
            "IP address:": "IP address:",
            "IoT": "IoT",
            "Last observation:": "Last observation:",
            "Login": "Login",
            "Logout": "Logout",
            "MQTT topic:": "MQTT topic:",
            "Measurement stats": "Measurement stats",
            "Measurement type": "Measurement type",
            "Measurements:": "Measurements:",
            "Observation": "Observation",
            "Password": "Password",
            "Real time": "Real time",
            "Request failed": "Request failed",
            "Reset": "Reset",
            "Start date": "Start date",
            "Stats": "Stats",
            "Thing": "Thing",
            "Thing not found": "Thing not found",
            "Things": "Things",
            "Time": "Time",
            "Time period": "Time period",
            "Type": "Type",
            "Username": "Username",
            "avg": "Average",
            "avgByHour": "Average by hour",
            "date": "Date",
            "day": "Day",
            "door-closed": "Door closed",
            "door-opened": "Door opened",
            "en": "English",
            "es": "Spanish",
            "event": "Event",
            "hour": "Hour",
            "humidity": "Humidity",
            "humidity-indoor": "Humidity indoor",
            "humidity-outdoor": "Humidity outdoor",
            "luminosity": "Luminosity",
            "max": "Maximum",
            "maxByHour": "Maximum by hour",
            "measurement": "Mesasurement",
            "min": "Minimum",
            "minByHour": "Minimum by hour",
            "minute": "Minute",
            "month": "Month",
            "second": "Second",
            "stdDev": "Standard deviation",
            "stdDevByHour": "Standard deviation by hour",
            "temperature": "Temperature",
            "temperature-indoor": "Temperature indoor",
            "temperature-outdoor": "Temperature outdoor",
            "thing": "Thing",
            "total": "Total",
            "week": "Week",
            "year": "Year",
          }
        }
      >
        <Connect(Connect(ResetOnUnmount))>
          <Connect(ResetOnUnmount)
            isAuth={[Function]}
            isLoading={true}
            login={[Function]}
            logout={[Function]}
            password="password"
            setPassword={[Function]}
            setUsername={[Function]}
            username="username"
          >
            <ResetOnUnmount
              isAuth={[Function]}
              isLoading={true}
              login={[Function]}
              logout={[Function]}
              password="password"
              reset={[Function]}
              setPassword={[Function]}
              setUsername={[Function]}
              username="username"
            >
              <InjectIntl(Login)
                isAuth={[Function]}
                isLoading={true}
                login={[Function]}
                logout={[Function]}
                password="password"
                reset={[Function]}
                setPassword={[Function]}
                setUsername={[Function]}
                username="username"
              >
                <Login
                  intl={
                    Object {
                      "defaultFormats": Object {},
                      "defaultLocale": "en",
                      "formatDate": [Function],
                      "formatHTMLMessage": [Function],
                      "formatMessage": [Function],
                      "formatNumber": [Function],
                      "formatPlural": [Function],
                      "formatRelative": [Function],
                      "formatTime": [Function],
                      "formats": Object {},
                      "formatters": Object {
                        "getDateTimeFormat": [Function],
                        "getMessageFormat": [Function],
                        "getNumberFormat": [Function],
                        "getPluralFormat": [Function],
                        "getRelativeFormat": [Function],
                      },
                      "locale": "en",
                      "messages": Object {
                        "Custom": "Custom",
                        "Data": "Data",
                        "Delete": "Delete",
                        "End date": "End date",
                        "Error": "Error",
                        "Event stats": "Event stats",
                        "Events:": "Events:",
                        "Filters": "Filters",
                        "Google maps": "Google maps",
                        "Group by": "Group by",
                        "IP address:": "IP address:",
                        "IoT": "IoT",
                        "Last observation:": "Last observation:",
                        "Login": "Login",
                        "Logout": "Logout",
                        "MQTT topic:": "MQTT topic:",
                        "Measurement stats": "Measurement stats",
                        "Measurement type": "Measurement type",
                        "Measurements:": "Measurements:",
                        "Observation": "Observation",
                        "Password": "Password",
                        "Real time": "Real time",
                        "Request failed": "Request failed",
                        "Reset": "Reset",
                        "Start date": "Start date",
                        "Stats": "Stats",
                        "Thing": "Thing",
                        "Thing not found": "Thing not found",
                        "Things": "Things",
                        "Time": "Time",
                        "Time period": "Time period",
                        "Type": "Type",
                        "Username": "Username",
                        "avg": "Average",
                        "avgByHour": "Average by hour",
                        "date": "Date",
                        "day": "Day",
                        "door-closed": "Door closed",
                        "door-opened": "Door opened",
                        "en": "English",
                        "es": "Spanish",
                        "event": "Event",
                        "hour": "Hour",
                        "humidity": "Humidity",
                        "humidity-indoor": "Humidity indoor",
                        "humidity-outdoor": "Humidity outdoor",
                        "luminosity": "Luminosity",
                        "max": "Maximum",
                        "maxByHour": "Maximum by hour",
                        "measurement": "Mesasurement",
                        "min": "Minimum",
                        "minByHour": "Minimum by hour",
                        "minute": "Minute",
                        "month": "Month",
                        "second": "Second",
                        "stdDev": "Standard deviation",
                        "stdDevByHour": "Standard deviation by hour",
                        "temperature": "Temperature",
                        "temperature-indoor": "Temperature indoor",
                        "temperature-outdoor": "Temperature outdoor",
                        "thing": "Thing",
                        "total": "Total",
                        "week": "Week",
                        "year": "Year",
                      },
                      "now": [Function],
                      "onError": [Function],
                      "textComponent": "span",
                      "timeZone": null,
                    }
                  }
                  isAuth={[Function]}
                  isLoading={true}
                  login={[Function]}
                  logout={[Function]}
                  password="password"
                  reset={[Function]}
                  setPassword={[Function]}
                  setUsername={[Function]}
                  username="username"
                >
                  <section
                    className="hero is-fullheight"
                  >
                    <div
                      className="hero-body"
                    >
                      <div
                        className="container has-text-centered"
                      >
                        <div
                          className="column is-4 is-offset-4"
                        >
                          <div
                            className="box"
                          >
                            <p
                              className="title is-1"
                            >
                              IoT
                            </p>
                            <form>
                              <div
                                className="field"
                              >
                                <div
                                  className="control has-icons-left"
                                >
                                  <input
                                    className="input is-large"
                                    id="username-input"
                                    onChange={[Function]}
                                    placeholder="Username"
                                    value="username"
                                  />
                                  <span
                                    className="icon is-large is-left"
                                  >
                                    <i
                                      className="fas fa-user"
                                    />
                                  </span>
                                </div>
                              </div>
                              <div
                                className="field"
                              >
                                <div
                                  className="control has-icons-left"
                                >
                                  <input
                                    className="input is-large"
                                    id="password-input"
                                    onChange={[Function]}
                                    placeholder="Password"
                                    type="password"
                                    value="password"
                                  />
                                  <span
                                    className="icon is-large is-left"
                                  >
                                    <i
                                      className="fas fa-lock"
                                    />
                                  </span>
                                </div>
                              </div>
                              <button
                                className="button is-block is-primary is-large is-fullwidth is-loading"
                                disabled={true}
                                id="login-button"
                                onClick={[Function]}
                              >
                                Login
                              </button>
                            </form>
                          </div>
                        </div>
                      </div>
                    </div>
                  </section>
                </Login>
              </InjectIntl(Login)>
            </ResetOnUnmount>
          </Connect(ResetOnUnmount)>
        </Connect(Connect(ResetOnUnmount))>
      </IntlProvider>
    </IntlProvider>
  </Connect(IntlProvider)>
</Provider>
`;

exports[`containers/login simulates successful login 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <Connect(IntlProvider)
    store={
      Object {
        "clearActions": [Function],
        "dispatch": [Function],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      }
    }
  >
    <IntlProvider
      dispatch={[Function]}
      locale="en"
      messages={
        Object {
          "Custom": "Custom",
          "Data": "Data",
          "Delete": "Delete",
          "End date": "End date",
          "Error": "Error",
          "Event stats": "Event stats",
          "Events:": "Events:",
          "Filters": "Filters",
          "Google maps": "Google maps",
          "Group by": "Group by",
          "IP address:": "IP address:",
          "IoT": "IoT",
          "Last observation:": "Last observation:",
          "Login": "Login",
          "Logout": "Logout",
          "MQTT topic:": "MQTT topic:",
          "Measurement stats": "Measurement stats",
          "Measurement type": "Measurement type",
          "Measurements:": "Measurements:",
          "Observation": "Observation",
          "Password": "Password",
          "Real time": "Real time",
          "Request failed": "Request failed",
          "Reset": "Reset",
          "Start date": "Start date",
          "Stats": "Stats",
          "Thing": "Thing",
          "Thing not found": "Thing not found",
          "Things": "Things",
          "Time": "Time",
          "Time period": "Time period",
          "Type": "Type",
          "Username": "Username",
          "avg": "Average",
          "avgByHour": "Average by hour",
          "date": "Date",
          "day": "Day",
          "door-closed": "Door closed",
          "door-opened": "Door opened",
          "en": "English",
          "es": "Spanish",
          "event": "Event",
          "hour": "Hour",
          "humidity": "Humidity",
          "humidity-indoor": "Humidity indoor",
          "humidity-outdoor": "Humidity outdoor",
          "luminosity": "Luminosity",
          "max": "Maximum",
          "maxByHour": "Maximum by hour",
          "measurement": "Mesasurement",
          "min": "Minimum",
          "minByHour": "Minimum by hour",
          "minute": "Minute",
          "month": "Month",
          "second": "Second",
          "stdDev": "Standard deviation",
          "stdDevByHour": "Standard deviation by hour",
          "temperature": "Temperature",
          "temperature-indoor": "Temperature indoor",
          "temperature-outdoor": "Temperature outdoor",
          "thing": "Thing",
          "total": "Total",
          "week": "Week",
          "year": "Year",
        }
      }
      store={
        Object {
          "clearActions": [Function],
          "dispatch": [Function],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        }
      }
      storeSubscription={
        Subscription {
          "listeners": Object {
            "clear": [Function],
            "get": [Function],
            "notify": [Function],
            "subscribe": [Function],
          },
          "onStateChange": [Function],
          "parentSub": undefined,
          "store": Object {
            "clearActions": [Function],
            "dispatch": [Function],
            "getActions": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
          },
          "unsubscribe": [Function],
        }
      }
    >
      <IntlProvider
        key="en"
        locale="en"
        messages={
          Object {
            "Custom": "Custom",
            "Data": "Data",
            "Delete": "Delete",
            "End date": "End date",
            "Error": "Error",
            "Event stats": "Event stats",
            "Events:": "Events:",
            "Filters": "Filters",
            "Google maps": "Google maps",
            "Group by": "Group by",
            "IP address:": "IP address:",
            "IoT": "IoT",
            "Last observation:": "Last observation:",
            "Login": "Login",
            "Logout": "Logout",
            "MQTT topic:": "MQTT topic:",
            "Measurement stats": "Measurement stats",
            "Measurement type": "Measurement type",
            "Measurements:": "Measurements:",
            "Observation": "Observation",
            "Password": "Password",
            "Real time": "Real time",
            "Request failed": "Request failed",
            "Reset": "Reset",
            "Start date": "Start date",
            "Stats": "Stats",
            "Thing": "Thing",
            "Thing not found": "Thing not found",
            "Things": "Things",
            "Time": "Time",
            "Time period": "Time period",
            "Type": "Type",
            "Username": "Username",
            "avg": "Average",
            "avgByHour": "Average by hour",
            "date": "Date",
            "day": "Day",
            "door-closed": "Door closed",
            "door-opened": "Door opened",
            "en": "English",
            "es": "Spanish",
            "event": "Event",
            "hour": "Hour",
            "humidity": "Humidity",
            "humidity-indoor": "Humidity indoor",
            "humidity-outdoor": "Humidity outdoor",
            "luminosity": "Luminosity",
            "max": "Maximum",
            "maxByHour": "Maximum by hour",
            "measurement": "Mesasurement",
            "min": "Minimum",
            "minByHour": "Minimum by hour",
            "minute": "Minute",
            "month": "Month",
            "second": "Second",
            "stdDev": "Standard deviation",
            "stdDevByHour": "Standard deviation by hour",
            "temperature": "Temperature",
            "temperature-indoor": "Temperature indoor",
            "temperature-outdoor": "Temperature outdoor",
            "thing": "Thing",
            "total": "Total",
            "week": "Week",
            "year": "Year",
          }
        }
      >
        <Connect(Connect(ResetOnUnmount))>
          <Connect(ResetOnUnmount)
            isAuth={[Function]}
            isLoading={false}
            login={[Function]}
            logout={[Function]}
            password={null}
            setPassword={[Function]}
            setUsername={[Function]}
            username={null}
          >
            <ResetOnUnmount
              isAuth={[Function]}
              isLoading={false}
              login={[Function]}
              logout={[Function]}
              password={null}
              reset={[Function]}
              setPassword={[Function]}
              setUsername={[Function]}
              username={null}
            >
              <InjectIntl(Login)
                isAuth={[Function]}
                isLoading={false}
                login={[Function]}
                logout={[Function]}
                password={null}
                reset={[Function]}
                setPassword={[Function]}
                setUsername={[Function]}
                username={null}
              >
                <Login
                  intl={
                    Object {
                      "defaultFormats": Object {},
                      "defaultLocale": "en",
                      "formatDate": [Function],
                      "formatHTMLMessage": [Function],
                      "formatMessage": [Function],
                      "formatNumber": [Function],
                      "formatPlural": [Function],
                      "formatRelative": [Function],
                      "formatTime": [Function],
                      "formats": Object {},
                      "formatters": Object {
                        "getDateTimeFormat": [Function],
                        "getMessageFormat": [Function],
                        "getNumberFormat": [Function],
                        "getPluralFormat": [Function],
                        "getRelativeFormat": [Function],
                      },
                      "locale": "en",
                      "messages": Object {
                        "Custom": "Custom",
                        "Data": "Data",
                        "Delete": "Delete",
                        "End date": "End date",
                        "Error": "Error",
                        "Event stats": "Event stats",
                        "Events:": "Events:",
                        "Filters": "Filters",
                        "Google maps": "Google maps",
                        "Group by": "Group by",
                        "IP address:": "IP address:",
                        "IoT": "IoT",
                        "Last observation:": "Last observation:",
                        "Login": "Login",
                        "Logout": "Logout",
                        "MQTT topic:": "MQTT topic:",
                        "Measurement stats": "Measurement stats",
                        "Measurement type": "Measurement type",
                        "Measurements:": "Measurements:",
                        "Observation": "Observation",
                        "Password": "Password",
                        "Real time": "Real time",
                        "Request failed": "Request failed",
                        "Reset": "Reset",
                        "Start date": "Start date",
                        "Stats": "Stats",
                        "Thing": "Thing",
                        "Thing not found": "Thing not found",
                        "Things": "Things",
                        "Time": "Time",
                        "Time period": "Time period",
                        "Type": "Type",
                        "Username": "Username",
                        "avg": "Average",
                        "avgByHour": "Average by hour",
                        "date": "Date",
                        "day": "Day",
                        "door-closed": "Door closed",
                        "door-opened": "Door opened",
                        "en": "English",
                        "es": "Spanish",
                        "event": "Event",
                        "hour": "Hour",
                        "humidity": "Humidity",
                        "humidity-indoor": "Humidity indoor",
                        "humidity-outdoor": "Humidity outdoor",
                        "luminosity": "Luminosity",
                        "max": "Maximum",
                        "maxByHour": "Maximum by hour",
                        "measurement": "Mesasurement",
                        "min": "Minimum",
                        "minByHour": "Minimum by hour",
                        "minute": "Minute",
                        "month": "Month",
                        "second": "Second",
                        "stdDev": "Standard deviation",
                        "stdDevByHour": "Standard deviation by hour",
                        "temperature": "Temperature",
                        "temperature-indoor": "Temperature indoor",
                        "temperature-outdoor": "Temperature outdoor",
                        "thing": "Thing",
                        "total": "Total",
                        "week": "Week",
                        "year": "Year",
                      },
                      "now": [Function],
                      "onError": [Function],
                      "textComponent": "span",
                      "timeZone": null,
                    }
                  }
                  isAuth={[Function]}
                  isLoading={false}
                  login={[Function]}
                  logout={[Function]}
                  password={null}
                  reset={[Function]}
                  setPassword={[Function]}
                  setUsername={[Function]}
                  username={null}
                >
                  <section
                    className="hero is-fullheight"
                  >
                    <div
                      className="hero-body"
                    >
                      <div
                        className="container has-text-centered"
                      >
                        <div
                          className="column is-4 is-offset-4"
                        >
                          <div
                            className="box"
                          >
                            <p
                              className="title is-1"
                            >
                              IoT
                            </p>
                            <form>
                              <div
                                className="field"
                              >
                                <div
                                  className="control has-icons-left"
                                >
                                  <input
                                    className="input is-large"
                                    id="username-input"
                                    onChange={[Function]}
                                    placeholder="Username"
                                    value=""
                                  />
                                  <span
                                    className="icon is-large is-left"
                                  >
                                    <i
                                      className="fas fa-user"
                                    />
                                  </span>
                                </div>
                              </div>
                              <div
                                className="field"
                              >
                                <div
                                  className="control has-icons-left"
                                >
                                  <input
                                    className="input is-large"
                                    id="password-input"
                                    onChange={[Function]}
                                    placeholder="Password"
                                    type="password"
                                    value=""
                                  />
                                  <span
                                    className="icon is-large is-left"
                                  >
                                    <i
                                      className="fas fa-lock"
                                    />
                                  </span>
                                </div>
                              </div>
                              <button
                                className="button is-block is-primary is-large is-fullwidth"
                                disabled={false}
                                id="login-button"
                                onClick={[Function]}
                              >
                                Login
                              </button>
                            </form>
                          </div>
                        </div>
                      </div>
                    </div>
                  </section>
                </Login>
              </InjectIntl(Login)>
            </ResetOnUnmount>
          </Connect(ResetOnUnmount)>
        </Connect(Connect(ResetOnUnmount))>
      </IntlProvider>
    </IntlProvider>
  </Connect(IntlProvider)>
</Provider>
`;

exports[`containers/login simulates successful login 2`] = `
Object {
  "app": Object {
    "isHamburgerMenuExpanded": false,
    "isMapDialogOpened": false,
    "showError": true,
  },
  "auth": Object {
    "isAuth": false,
    "password": null,
    "username": null,
  },
  "data": Object {
    "isLoading": false,
    "items": Array [],
    "things": Array [],
  },
  "filters": Object {
    "dateFilter": Object {
      "custom": Object {
        "endDate": null,
        "startDate": null,
      },
      "isCustomSelected": false,
      "timePeriod": Object {
        "isActive": false,
        "isDisabled": false,
        "isLoading": false,
        "items": Array [],
        "selectedItem": null,
      },
    },
    "items": Array [],
    "thingFilter": Object {
      "isActive": false,
      "isDisabled": false,
      "isLoading": false,
      "items": Array [],
      "selectedItem": null,
    },
    "type": Object {
      "isActive": false,
      "isDisabled": false,
      "items": Array [
        "thing",
        "date",
      ],
    },
  },
  "localization": Object {
    "languages": Array [
      "en",
      "es",
    ],
    "selectedLanguage": "en",
    "translations": Object {
      "Custom": "Custom",
      "Data": "Data",
      "Delete": "Delete",
      "End date": "End date",
      "Error": "Error",
      "Event stats": "Event stats",
      "Events:": "Events:",
      "Filters": "Filters",
      "Google maps": "Google maps",
      "Group by": "Group by",
      "IP address:": "IP address:",
      "IoT": "IoT",
      "Last observation:": "Last observation:",
      "Login": "Login",
      "Logout": "Logout",
      "MQTT topic:": "MQTT topic:",
      "Measurement stats": "Measurement stats",
      "Measurement type": "Measurement type",
      "Measurements:": "Measurements:",
      "Observation": "Observation",
      "Password": "Password",
      "Real time": "Real time",
      "Request failed": "Request failed",
      "Reset": "Reset",
      "Start date": "Start date",
      "Stats": "Stats",
      "Thing": "Thing",
      "Thing not found": "Thing not found",
      "Things": "Things",
      "Time": "Time",
      "Time period": "Time period",
      "Type": "Type",
      "Username": "Username",
      "avg": "Average",
      "avgByHour": "Average by hour",
      "date": "Date",
      "day": "Day",
      "door-closed": "Door closed",
      "door-opened": "Door opened",
      "en": "English",
      "es": "Spanish",
      "event": "Event",
      "hour": "Hour",
      "humidity": "Humidity",
      "humidity-indoor": "Humidity indoor",
      "humidity-outdoor": "Humidity outdoor",
      "luminosity": "Luminosity",
      "max": "Maximum",
      "maxByHour": "Maximum by hour",
      "measurement": "Mesasurement",
      "min": "Minimum",
      "minByHour": "Minimum by hour",
      "minute": "Minute",
      "month": "Month",
      "second": "Second",
      "stdDev": "Standard deviation",
      "stdDevByHour": "Standard deviation by hour",
      "temperature": "Temperature",
      "temperature-indoor": "Temperature indoor",
      "temperature-outdoor": "Temperature outdoor",
      "thing": "Thing",
      "total": "Total",
      "week": "Week",
      "year": "Year",
    },
  },
  "params": Object {
    "allIds": Array [],
    "byId": Object {},
    "isResetDisabled": true,
  },
  "request": Object {
    "error": null,
    "pending": 0,
    "statusCode": null,
  },
  "things": Object {
    "items": Array [],
    "selectedItem": null,
    "showNotFoundError": false,
  },
}
`;

exports[`containers/login simulates successful login 3`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <Connect(IntlProvider)
    store={
      Object {
        "clearActions": [Function],
        "dispatch": [Function],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      }
    }
  >
    <IntlProvider
      dispatch={[Function]}
      locale="en"
      messages={
        Object {
          "Custom": "Custom",
          "Data": "Data",
          "Delete": "Delete",
          "End date": "End date",
          "Error": "Error",
          "Event stats": "Event stats",
          "Events:": "Events:",
          "Filters": "Filters",
          "Google maps": "Google maps",
          "Group by": "Group by",
          "IP address:": "IP address:",
          "IoT": "IoT",
          "Last observation:": "Last observation:",
          "Login": "Login",
          "Logout": "Logout",
          "MQTT topic:": "MQTT topic:",
          "Measurement stats": "Measurement stats",
          "Measurement type": "Measurement type",
          "Measurements:": "Measurements:",
          "Observation": "Observation",
          "Password": "Password",
          "Real time": "Real time",
          "Request failed": "Request failed",
          "Reset": "Reset",
          "Start date": "Start date",
          "Stats": "Stats",
          "Thing": "Thing",
          "Thing not found": "Thing not found",
          "Things": "Things",
          "Time": "Time",
          "Time period": "Time period",
          "Type": "Type",
          "Username": "Username",
          "avg": "Average",
          "avgByHour": "Average by hour",
          "date": "Date",
          "day": "Day",
          "door-closed": "Door closed",
          "door-opened": "Door opened",
          "en": "English",
          "es": "Spanish",
          "event": "Event",
          "hour": "Hour",
          "humidity": "Humidity",
          "humidity-indoor": "Humidity indoor",
          "humidity-outdoor": "Humidity outdoor",
          "luminosity": "Luminosity",
          "max": "Maximum",
          "maxByHour": "Maximum by hour",
          "measurement": "Mesasurement",
          "min": "Minimum",
          "minByHour": "Minimum by hour",
          "minute": "Minute",
          "month": "Month",
          "second": "Second",
          "stdDev": "Standard deviation",
          "stdDevByHour": "Standard deviation by hour",
          "temperature": "Temperature",
          "temperature-indoor": "Temperature indoor",
          "temperature-outdoor": "Temperature outdoor",
          "thing": "Thing",
          "total": "Total",
          "week": "Week",
          "year": "Year",
        }
      }
      store={
        Object {
          "clearActions": [Function],
          "dispatch": [Function],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        }
      }
      storeSubscription={
        Subscription {
          "listeners": Object {
            "clear": [Function],
            "get": [Function],
            "notify": [Function],
            "subscribe": [Function],
          },
          "onStateChange": [Function],
          "parentSub": undefined,
          "store": Object {
            "clearActions": [Function],
            "dispatch": [Function],
            "getActions": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
          },
          "unsubscribe": [Function],
        }
      }
    >
      <IntlProvider
        key="en"
        locale="en"
        messages={
          Object {
            "Custom": "Custom",
            "Data": "Data",
            "Delete": "Delete",
            "End date": "End date",
            "Error": "Error",
            "Event stats": "Event stats",
            "Events:": "Events:",
            "Filters": "Filters",
            "Google maps": "Google maps",
            "Group by": "Group by",
            "IP address:": "IP address:",
            "IoT": "IoT",
            "Last observation:": "Last observation:",
            "Login": "Login",
            "Logout": "Logout",
            "MQTT topic:": "MQTT topic:",
            "Measurement stats": "Measurement stats",
            "Measurement type": "Measurement type",
            "Measurements:": "Measurements:",
            "Observation": "Observation",
            "Password": "Password",
            "Real time": "Real time",
            "Request failed": "Request failed",
            "Reset": "Reset",
            "Start date": "Start date",
            "Stats": "Stats",
            "Thing": "Thing",
            "Thing not found": "Thing not found",
            "Things": "Things",
            "Time": "Time",
            "Time period": "Time period",
            "Type": "Type",
            "Username": "Username",
            "avg": "Average",
            "avgByHour": "Average by hour",
            "date": "Date",
            "day": "Day",
            "door-closed": "Door closed",
            "door-opened": "Door opened",
            "en": "English",
            "es": "Spanish",
            "event": "Event",
            "hour": "Hour",
            "humidity": "Humidity",
            "humidity-indoor": "Humidity indoor",
            "humidity-outdoor": "Humidity outdoor",
            "luminosity": "Luminosity",
            "max": "Maximum",
            "maxByHour": "Maximum by hour",
            "measurement": "Mesasurement",
            "min": "Minimum",
            "minByHour": "Minimum by hour",
            "minute": "Minute",
            "month": "Month",
            "second": "Second",
            "stdDev": "Standard deviation",
            "stdDevByHour": "Standard deviation by hour",
            "temperature": "Temperature",
            "temperature-indoor": "Temperature indoor",
            "temperature-outdoor": "Temperature outdoor",
            "thing": "Thing",
            "total": "Total",
            "week": "Week",
            "year": "Year",
          }
        }
      >
        <Connect(Connect(ResetOnUnmount))>
          <Connect(ResetOnUnmount)
            isAuth={[Function]}
            isLoading={false}
            login={[Function]}
            logout={[Function]}
            password={null}
            setPassword={[Function]}
            setUsername={[Function]}
            username={null}
          >
            <ResetOnUnmount
              isAuth={[Function]}
              isLoading={false}
              login={[Function]}
              logout={[Function]}
              password={null}
              reset={[Function]}
              setPassword={[Function]}
              setUsername={[Function]}
              username={null}
            >
              <InjectIntl(Login)
                isAuth={[Function]}
                isLoading={false}
                login={[Function]}
                logout={[Function]}
                password={null}
                reset={[Function]}
                setPassword={[Function]}
                setUsername={[Function]}
                username={null}
              >
                <Login
                  intl={
                    Object {
                      "defaultFormats": Object {},
                      "defaultLocale": "en",
                      "formatDate": [Function],
                      "formatHTMLMessage": [Function],
                      "formatMessage": [Function],
                      "formatNumber": [Function],
                      "formatPlural": [Function],
                      "formatRelative": [Function],
                      "formatTime": [Function],
                      "formats": Object {},
                      "formatters": Object {
                        "getDateTimeFormat": [Function],
                        "getMessageFormat": [Function],
                        "getNumberFormat": [Function],
                        "getPluralFormat": [Function],
                        "getRelativeFormat": [Function],
                      },
                      "locale": "en",
                      "messages": Object {
                        "Custom": "Custom",
                        "Data": "Data",
                        "Delete": "Delete",
                        "End date": "End date",
                        "Error": "Error",
                        "Event stats": "Event stats",
                        "Events:": "Events:",
                        "Filters": "Filters",
                        "Google maps": "Google maps",
                        "Group by": "Group by",
                        "IP address:": "IP address:",
                        "IoT": "IoT",
                        "Last observation:": "Last observation:",
                        "Login": "Login",
                        "Logout": "Logout",
                        "MQTT topic:": "MQTT topic:",
                        "Measurement stats": "Measurement stats",
                        "Measurement type": "Measurement type",
                        "Measurements:": "Measurements:",
                        "Observation": "Observation",
                        "Password": "Password",
                        "Real time": "Real time",
                        "Request failed": "Request failed",
                        "Reset": "Reset",
                        "Start date": "Start date",
                        "Stats": "Stats",
                        "Thing": "Thing",
                        "Thing not found": "Thing not found",
                        "Things": "Things",
                        "Time": "Time",
                        "Time period": "Time period",
                        "Type": "Type",
                        "Username": "Username",
                        "avg": "Average",
                        "avgByHour": "Average by hour",
                        "date": "Date",
                        "day": "Day",
                        "door-closed": "Door closed",
                        "door-opened": "Door opened",
                        "en": "English",
                        "es": "Spanish",
                        "event": "Event",
                        "hour": "Hour",
                        "humidity": "Humidity",
                        "humidity-indoor": "Humidity indoor",
                        "humidity-outdoor": "Humidity outdoor",
                        "luminosity": "Luminosity",
                        "max": "Maximum",
                        "maxByHour": "Maximum by hour",
                        "measurement": "Mesasurement",
                        "min": "Minimum",
                        "minByHour": "Minimum by hour",
                        "minute": "Minute",
                        "month": "Month",
                        "second": "Second",
                        "stdDev": "Standard deviation",
                        "stdDevByHour": "Standard deviation by hour",
                        "temperature": "Temperature",
                        "temperature-indoor": "Temperature indoor",
                        "temperature-outdoor": "Temperature outdoor",
                        "thing": "Thing",
                        "total": "Total",
                        "week": "Week",
                        "year": "Year",
                      },
                      "now": [Function],
                      "onError": [Function],
                      "textComponent": "span",
                      "timeZone": null,
                    }
                  }
                  isAuth={[Function]}
                  isLoading={false}
                  login={[Function]}
                  logout={[Function]}
                  password={null}
                  reset={[Function]}
                  setPassword={[Function]}
                  setUsername={[Function]}
                  username={null}
                >
                  <section
                    className="hero is-fullheight"
                  >
                    <div
                      className="hero-body"
                    >
                      <div
                        className="container has-text-centered"
                      >
                        <div
                          className="column is-4 is-offset-4"
                        >
                          <div
                            className="box"
                          >
                            <p
                              className="title is-1"
                            >
                              IoT
                            </p>
                            <form>
                              <div
                                className="field"
                              >
                                <div
                                  className="control has-icons-left"
                                >
                                  <input
                                    className="input is-large"
                                    id="username-input"
                                    onChange={[Function]}
                                    placeholder="Username"
                                    value=""
                                  />
                                  <span
                                    className="icon is-large is-left"
                                  >
                                    <i
                                      className="fas fa-user"
                                    />
                                  </span>
                                </div>
                              </div>
                              <div
                                className="field"
                              >
                                <div
                                  className="control has-icons-left"
                                >
                                  <input
                                    className="input is-large"
                                    id="password-input"
                                    onChange={[Function]}
                                    placeholder="Password"
                                    type="password"
                                    value=""
                                  />
                                  <span
                                    className="icon is-large is-left"
                                  >
                                    <i
                                      className="fas fa-lock"
                                    />
                                  </span>
                                </div>
                              </div>
                              <button
                                className="button is-block is-primary is-large is-fullwidth"
                                disabled={false}
                                id="login-button"
                                onClick={[Function]}
                              >
                                Login
                              </button>
                            </form>
                          </div>
                        </div>
                      </div>
                    </div>
                  </section>
                </Login>
              </InjectIntl(Login)>
            </ResetOnUnmount>
          </Connect(ResetOnUnmount)>
        </Connect(Connect(ResetOnUnmount))>
      </IntlProvider>
    </IntlProvider>
  </Connect(IntlProvider)>
</Provider>
`;
